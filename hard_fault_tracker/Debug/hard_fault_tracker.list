
hard_fault_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002834  08002834  00012834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002938  08002938  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002938  08002938  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002938  08002938  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002940  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  080029b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080029b0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007119  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001592  00000000  00000000  000271b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00028748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00028e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cf5  00000000  00000000  00029480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089c8  00000000  00000000  00041175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008366c  00000000  00000000  00049b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd1a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a8  00000000  00000000  000cd1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800281c 	.word	0x0800281c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800281c 	.word	0x0800281c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa42 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000160:	f000 f9f6 	bl	8000550 <run>
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f001 fb3f 	bl	80017f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fd00 	bl	8000bb4 <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f87b 	bl	80002b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 ff6d 	bl	80010b8 <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f866 	bl	80002b4 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <MX_USART1_UART_Init+0x50>)
 80001f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000216:	220c      	movs	r2, #12
 8000218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000228:	f001 f8d4 	bl	80013d4 <HAL_HalfDuplex_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000232:	f000 f83f 	bl	80002b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000008c 	.word	0x2000008c
 8000240:	40013800 	.word	0x40013800

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <MX_GPIO_Init+0x40>)
 8000250:	f043 0320 	orr.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x40>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *data, int len) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	b29a      	uxth	r2, r3
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <_write+0x28>)
 80002a0:	f001 f8f0 	bl	8001484 <HAL_UART_Transmit>
	return len;
 80002a4:	687b      	ldr	r3, [r7, #4]
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000008c 	.word	0x2000008c

080002b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b8:	b672      	cpsid	i
}
 80002ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002bc:	e7fe      	b.n	80002bc <Error_Handler+0x8>
	...

080002c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <HAL_MspInit+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <HAL_MspInit+0x40>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <HAL_MspInit+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_MspInit+0x40>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a07      	ldr	r2, [pc, #28]	; (8000300 <HAL_MspInit+0x40>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <HAL_MspInit+0x40>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	40021000 	.word	0x40021000

08000304 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030c:	f107 0310 	add.w	r3, r7, #16
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]
 8000318:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a16      	ldr	r2, [pc, #88]	; (8000378 <HAL_UART_MspInit+0x74>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d124      	bne.n	800036e <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <HAL_UART_MspInit+0x78>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <HAL_UART_MspInit+0x78>)
 800032a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <HAL_UART_MspInit+0x78>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <HAL_UART_MspInit+0x78>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <HAL_UART_MspInit+0x78>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <HAL_UART_MspInit+0x78>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0304 	and.w	r3, r3, #4
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800035a:	2312      	movs	r3, #18
 800035c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800035e:	2303      	movs	r3, #3
 8000360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <HAL_UART_MspInit+0x7c>)
 800036a:	f000 fa9f 	bl	80008ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40013800 	.word	0x40013800
 800037c:	40021000 	.word	0x40021000
 8000380:	40010800 	.word	0x40010800

08000384 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000388:	e7fe      	b.n	8000388 <NMI_Handler+0x4>
	...

0800038c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */
	uint32_t *pSP;
	__asm volatile("MRS R0, MSP");
 8000392:	f3ef 8008 	mrs	r0, MSP
	__asm volatile("MOV %0,R0":"=r"(pSP));
 8000396:	4603      	mov	r3, r0
 8000398:	603b      	str	r3, [r7, #0]

	printf("Hard fault\n");
 800039a:	4814      	ldr	r0, [pc, #80]	; (80003ec <HardFault_Handler+0x60>)
 800039c:	f001 fb96 	bl	8001acc <puts>
	printf("SP = %p\n", pSP);
 80003a0:	6839      	ldr	r1, [r7, #0]
 80003a2:	4813      	ldr	r0, [pc, #76]	; (80003f0 <HardFault_Handler+0x64>)
 80003a4:	f001 fb0c 	bl	80019c0 <iprintf>
	for(int i=0;i<400;i++){
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	e017      	b.n	80003de <HardFault_Handler+0x52>
		if((uint32_t)(pSP+i)>=0x20004fff)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	683a      	ldr	r2, [r7, #0]
 80003b4:	4413      	add	r3, r2
 80003b6:	461a      	mov	r2, r3
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <HardFault_Handler+0x68>)
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d814      	bhi.n	80003e8 <HardFault_Handler+0x5c>
			break;
		printf("%p : 0x%lx\n",(pSP+i), *(pSP+i));
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	683a      	ldr	r2, [r7, #0]
 80003c4:	18d1      	adds	r1, r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	683a      	ldr	r2, [r7, #0]
 80003cc:	4413      	add	r3, r2
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	4809      	ldr	r0, [pc, #36]	; (80003f8 <HardFault_Handler+0x6c>)
 80003d4:	f001 faf4 	bl	80019c0 <iprintf>
	for(int i=0;i<400;i++){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3301      	adds	r3, #1
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80003e4:	dbe3      	blt.n	80003ae <HardFault_Handler+0x22>
 80003e6:	e000      	b.n	80003ea <HardFault_Handler+0x5e>
			break;
 80003e8:	bf00      	nop


//	dumpExceptionRegister(pSP, 0);

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80003ea:	e7fe      	b.n	80003ea <HardFault_Handler+0x5e>
 80003ec:	08002834 	.word	0x08002834
 80003f0:	08002840 	.word	0x08002840
 80003f4:	20004ffe 	.word	0x20004ffe
 80003f8:	0800284c 	.word	0x0800284c

080003fc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000400:	e7fe      	b.n	8000400 <MemManage_Handler+0x4>

08000402 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000406:	e7fe      	b.n	8000406 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800040c:	e7fe      	b.n	800040c <UsageFault_Handler+0x4>

0800040e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	bc80      	pop	{r7}
 8000418:	4770      	bx	lr

0800041a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000426:	b480      	push	{r7}
 8000428:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000432:	b580      	push	{r7, lr}
 8000434:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000436:	f000 f915 	bl	8000664 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}

0800043e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b086      	sub	sp, #24
 8000442:	af00      	add	r7, sp, #0
 8000444:	60f8      	str	r0, [r7, #12]
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
 800044e:	e00a      	b.n	8000466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000450:	f3af 8000 	nop.w
 8000454:	4601      	mov	r1, r0
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	60ba      	str	r2, [r7, #8]
 800045c:	b2ca      	uxtb	r2, r1
 800045e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	3301      	adds	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	697a      	ldr	r2, [r7, #20]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	429a      	cmp	r2, r3
 800046c:	dbf0      	blt.n	8000450 <_read+0x12>
  }

  return len;
 800046e:	687b      	ldr	r3, [r7, #4]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3718      	adds	r7, #24
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}

08000478 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800049e:	605a      	str	r2, [r3, #4]
  return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <_isatty>:

int _isatty(int file)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b4:	2301      	movs	r3, #1
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <_sbrk+0x5c>)
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <_sbrk+0x60>)
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <_sbrk+0x64>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	; (8000540 <_sbrk+0x68>)
 80004f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	429a      	cmp	r2, r3
 8000506:	d207      	bcs.n	8000518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000508:	f001 f93c 	bl	8001784 <__errno>
 800050c:	4603      	mov	r3, r0
 800050e:	220c      	movs	r2, #12
 8000510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	e009      	b.n	800052c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <_sbrk+0x64>)
 8000528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052a:	68fb      	ldr	r3, [r7, #12]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20005000 	.word	0x20005000
 8000538:	00000400 	.word	0x00000400
 800053c:	200000d4 	.word	0x200000d4
 8000540:	200000f0 	.word	0x200000f0

08000544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <run>:


}


void run(){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0



	int *x;
	while(1){
		x = malloc(1024);
 8000556:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800055a:	f001 f93d 	bl	80017d8 <malloc>
 800055e:	4603      	mov	r3, r0
 8000560:	607b      	str	r3, [r7, #4]
		if(x==NULL)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d103      	bne.n	8000570 <run+0x20>
			printf("NULL\n");
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <run+0x34>)
 800056a:	f001 faaf 	bl	8001acc <puts>
 800056e:	e002      	b.n	8000576 <run+0x26>
		else
			printf("OKAY\n");
 8000570:	4805      	ldr	r0, [pc, #20]	; (8000588 <run+0x38>)
 8000572:	f001 faab 	bl	8001acc <puts>
		free(x);
 8000576:	6878      	ldr	r0, [r7, #4]
 8000578:	f001 f936 	bl	80017e8 <free>
		HAL_Delay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f000 f88d 	bl	800069c <HAL_Delay>
		x = malloc(1024);
 8000582:	e7e8      	b.n	8000556 <run+0x6>
 8000584:	08002864 	.word	0x08002864
 8000588:	0800286c 	.word	0x0800286c

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
bl  SystemInit
 800058c:	f7ff ffda 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000592:	490c      	ldr	r1, [pc, #48]	; (80005c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a8:	4c09      	ldr	r4, [pc, #36]	; (80005d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b6:	f001 f8eb 	bl	8001790 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fdc7 	bl	800014c <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005c8:	08002940 	.word	0x08002940
  ldr r2, =_sbss
 80005cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005d0:	200000ec 	.word	0x200000ec

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x28>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f92b 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	200f      	movs	r0, #15
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f7ff fe64 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f935 	bl	8000892 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 f90b 	bl	800085a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	200000d8 	.word	0x200000d8

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	200000d8 	.word	0x200000d8

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff fff0 	bl	8000688 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_Delay+0x44>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffe0 	bl	8000688 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000008 	.word	0x20000008

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3b01      	subs	r3, #1
 800080c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000810:	d301      	bcc.n	8000816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000812:	2301      	movs	r3, #1
 8000814:	e00f      	b.n	8000836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <SysTick_Config+0x40>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3b01      	subs	r3, #1
 800081c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081e:	210f      	movs	r1, #15
 8000820:	f04f 30ff 	mov.w	r0, #4294967295
 8000824:	f7ff ff90 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <SysTick_Config+0x40>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <SysTick_Config+0x40>)
 8000830:	2207      	movs	r2, #7
 8000832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	e000e010 	.word	0xe000e010

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff49 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff5e 	bl	800072c <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ff90 	bl	800079c <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff5f 	bl	8000748 <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb0 	bl	8000800 <SysTick_Config>
 80008a0:	4603      	mov	r3, r0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008be:	e169      	b.n	8000b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008c0:	2201      	movs	r2, #1
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	4013      	ands	r3, r2
 80008d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	429a      	cmp	r2, r3
 80008da:	f040 8158 	bne.w	8000b8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	4a9a      	ldr	r2, [pc, #616]	; (8000b4c <HAL_GPIO_Init+0x2a0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d05e      	beq.n	80009a6 <HAL_GPIO_Init+0xfa>
 80008e8:	4a98      	ldr	r2, [pc, #608]	; (8000b4c <HAL_GPIO_Init+0x2a0>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d875      	bhi.n	80009da <HAL_GPIO_Init+0x12e>
 80008ee:	4a98      	ldr	r2, [pc, #608]	; (8000b50 <HAL_GPIO_Init+0x2a4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d058      	beq.n	80009a6 <HAL_GPIO_Init+0xfa>
 80008f4:	4a96      	ldr	r2, [pc, #600]	; (8000b50 <HAL_GPIO_Init+0x2a4>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d86f      	bhi.n	80009da <HAL_GPIO_Init+0x12e>
 80008fa:	4a96      	ldr	r2, [pc, #600]	; (8000b54 <HAL_GPIO_Init+0x2a8>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d052      	beq.n	80009a6 <HAL_GPIO_Init+0xfa>
 8000900:	4a94      	ldr	r2, [pc, #592]	; (8000b54 <HAL_GPIO_Init+0x2a8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d869      	bhi.n	80009da <HAL_GPIO_Init+0x12e>
 8000906:	4a94      	ldr	r2, [pc, #592]	; (8000b58 <HAL_GPIO_Init+0x2ac>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d04c      	beq.n	80009a6 <HAL_GPIO_Init+0xfa>
 800090c:	4a92      	ldr	r2, [pc, #584]	; (8000b58 <HAL_GPIO_Init+0x2ac>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d863      	bhi.n	80009da <HAL_GPIO_Init+0x12e>
 8000912:	4a92      	ldr	r2, [pc, #584]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d046      	beq.n	80009a6 <HAL_GPIO_Init+0xfa>
 8000918:	4a90      	ldr	r2, [pc, #576]	; (8000b5c <HAL_GPIO_Init+0x2b0>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d85d      	bhi.n	80009da <HAL_GPIO_Init+0x12e>
 800091e:	2b12      	cmp	r3, #18
 8000920:	d82a      	bhi.n	8000978 <HAL_GPIO_Init+0xcc>
 8000922:	2b12      	cmp	r3, #18
 8000924:	d859      	bhi.n	80009da <HAL_GPIO_Init+0x12e>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <HAL_GPIO_Init+0x80>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	080009a7 	.word	0x080009a7
 8000930:	08000981 	.word	0x08000981
 8000934:	08000993 	.word	0x08000993
 8000938:	080009d5 	.word	0x080009d5
 800093c:	080009db 	.word	0x080009db
 8000940:	080009db 	.word	0x080009db
 8000944:	080009db 	.word	0x080009db
 8000948:	080009db 	.word	0x080009db
 800094c:	080009db 	.word	0x080009db
 8000950:	080009db 	.word	0x080009db
 8000954:	080009db 	.word	0x080009db
 8000958:	080009db 	.word	0x080009db
 800095c:	080009db 	.word	0x080009db
 8000960:	080009db 	.word	0x080009db
 8000964:	080009db 	.word	0x080009db
 8000968:	080009db 	.word	0x080009db
 800096c:	080009db 	.word	0x080009db
 8000970:	08000989 	.word	0x08000989
 8000974:	0800099d 	.word	0x0800099d
 8000978:	4a79      	ldr	r2, [pc, #484]	; (8000b60 <HAL_GPIO_Init+0x2b4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d013      	beq.n	80009a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800097e:	e02c      	b.n	80009da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	623b      	str	r3, [r7, #32]
          break;
 8000986:	e029      	b.n	80009dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	3304      	adds	r3, #4
 800098e:	623b      	str	r3, [r7, #32]
          break;
 8000990:	e024      	b.n	80009dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	3308      	adds	r3, #8
 8000998:	623b      	str	r3, [r7, #32]
          break;
 800099a:	e01f      	b.n	80009dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	330c      	adds	r3, #12
 80009a2:	623b      	str	r3, [r7, #32]
          break;
 80009a4:	e01a      	b.n	80009dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d102      	bne.n	80009b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009ae:	2304      	movs	r3, #4
 80009b0:	623b      	str	r3, [r7, #32]
          break;
 80009b2:	e013      	b.n	80009dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d105      	bne.n	80009c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009bc:	2308      	movs	r3, #8
 80009be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	611a      	str	r2, [r3, #16]
          break;
 80009c6:	e009      	b.n	80009dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c8:	2308      	movs	r3, #8
 80009ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	615a      	str	r2, [r3, #20]
          break;
 80009d2:	e003      	b.n	80009dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e000      	b.n	80009dc <HAL_GPIO_Init+0x130>
          break;
 80009da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	2bff      	cmp	r3, #255	; 0xff
 80009e0:	d801      	bhi.n	80009e6 <HAL_GPIO_Init+0x13a>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	e001      	b.n	80009ea <HAL_GPIO_Init+0x13e>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3304      	adds	r3, #4
 80009ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	2bff      	cmp	r3, #255	; 0xff
 80009f0:	d802      	bhi.n	80009f8 <HAL_GPIO_Init+0x14c>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	e002      	b.n	80009fe <HAL_GPIO_Init+0x152>
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3b08      	subs	r3, #8
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	210f      	movs	r1, #15
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	401a      	ands	r2, r3
 8000a10:	6a39      	ldr	r1, [r7, #32]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f000 80b1 	beq.w	8000b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2c:	4b4d      	ldr	r3, [pc, #308]	; (8000b64 <HAL_GPIO_Init+0x2b8>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_GPIO_Init+0x2b8>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b4a      	ldr	r3, [pc, #296]	; (8000b64 <HAL_GPIO_Init+0x2b8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a44:	4a48      	ldr	r2, [pc, #288]	; (8000b68 <HAL_GPIO_Init+0x2bc>)
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a40      	ldr	r2, [pc, #256]	; (8000b6c <HAL_GPIO_Init+0x2c0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d013      	beq.n	8000a98 <HAL_GPIO_Init+0x1ec>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a3f      	ldr	r2, [pc, #252]	; (8000b70 <HAL_GPIO_Init+0x2c4>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d00d      	beq.n	8000a94 <HAL_GPIO_Init+0x1e8>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <HAL_GPIO_Init+0x2c8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d007      	beq.n	8000a90 <HAL_GPIO_Init+0x1e4>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a3d      	ldr	r2, [pc, #244]	; (8000b78 <HAL_GPIO_Init+0x2cc>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d101      	bne.n	8000a8c <HAL_GPIO_Init+0x1e0>
 8000a88:	2303      	movs	r3, #3
 8000a8a:	e006      	b.n	8000a9a <HAL_GPIO_Init+0x1ee>
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	e004      	b.n	8000a9a <HAL_GPIO_Init+0x1ee>
 8000a90:	2302      	movs	r3, #2
 8000a92:	e002      	b.n	8000a9a <HAL_GPIO_Init+0x1ee>
 8000a94:	2301      	movs	r3, #1
 8000a96:	e000      	b.n	8000a9a <HAL_GPIO_Init+0x1ee>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a9c:	f002 0203 	and.w	r2, r2, #3
 8000aa0:	0092      	lsls	r2, r2, #2
 8000aa2:	4093      	lsls	r3, r2
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aaa:	492f      	ldr	r1, [pc, #188]	; (8000b68 <HAL_GPIO_Init+0x2bc>)
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	089b      	lsrs	r3, r3, #2
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000ac6:	689a      	ldr	r2, [r3, #8]
 8000ac8:	492c      	ldr	r1, [pc, #176]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	608b      	str	r3, [r1, #8]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4928      	ldr	r1, [pc, #160]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	4922      	ldr	r1, [pc, #136]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60cb      	str	r3, [r1, #12]
 8000af8:	e006      	b.n	8000b08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000afa:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	491e      	ldr	r1, [pc, #120]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	4918      	ldr	r1, [pc, #96]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	604b      	str	r3, [r1, #4]
 8000b20:	e006      	b.n	8000b30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b24:	685a      	ldr	r2, [r3, #4]
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4914      	ldr	r1, [pc, #80]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d021      	beq.n	8000b80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	490e      	ldr	r1, [pc, #56]	; (8000b7c <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	600b      	str	r3, [r1, #0]
 8000b48:	e021      	b.n	8000b8e <HAL_GPIO_Init+0x2e2>
 8000b4a:	bf00      	nop
 8000b4c:	10320000 	.word	0x10320000
 8000b50:	10310000 	.word	0x10310000
 8000b54:	10220000 	.word	0x10220000
 8000b58:	10210000 	.word	0x10210000
 8000b5c:	10120000 	.word	0x10120000
 8000b60:	10110000 	.word	0x10110000
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	40011000 	.word	0x40011000
 8000b78:	40011400 	.word	0x40011400
 8000b7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_GPIO_Init+0x304>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	4909      	ldr	r1, [pc, #36]	; (8000bb0 <HAL_GPIO_Init+0x304>)
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	3301      	adds	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f47f ae8e 	bne.w	80008c0 <HAL_GPIO_Init+0x14>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	372c      	adds	r7, #44	; 0x2c
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e272      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8087 	beq.w	8000ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bd4:	4b92      	ldr	r3, [pc, #584]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d00c      	beq.n	8000bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be0:	4b8f      	ldr	r3, [pc, #572]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d112      	bne.n	8000c12 <HAL_RCC_OscConfig+0x5e>
 8000bec:	4b8c      	ldr	r3, [pc, #560]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf8:	d10b      	bne.n	8000c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bfa:	4b89      	ldr	r3, [pc, #548]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d06c      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x12c>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d168      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e24c      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1a:	d106      	bne.n	8000c2a <HAL_RCC_OscConfig+0x76>
 8000c1c:	4b80      	ldr	r3, [pc, #512]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a7f      	ldr	r2, [pc, #508]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c26:	6013      	str	r3, [r2, #0]
 8000c28:	e02e      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x98>
 8000c32:	4b7b      	ldr	r3, [pc, #492]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a7a      	ldr	r2, [pc, #488]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b78      	ldr	r3, [pc, #480]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a77      	ldr	r2, [pc, #476]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e01d      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0xbc>
 8000c56:	4b72      	ldr	r3, [pc, #456]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a71      	ldr	r2, [pc, #452]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a6e      	ldr	r2, [pc, #440]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e00b      	b.n	8000c88 <HAL_RCC_OscConfig+0xd4>
 8000c70:	4b6b      	ldr	r3, [pc, #428]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a6a      	ldr	r2, [pc, #424]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	4b68      	ldr	r3, [pc, #416]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a67      	ldr	r2, [pc, #412]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d013      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff fcfa 	bl	8000688 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c98:	f7ff fcf6 	bl	8000688 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b64      	cmp	r3, #100	; 0x64
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e200      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000caa:	4b5d      	ldr	r3, [pc, #372]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f0      	beq.n	8000c98 <HAL_RCC_OscConfig+0xe4>
 8000cb6:	e014      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fce6 	bl	8000688 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fce2 	bl	8000688 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	; 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e1ec      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd2:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1f0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x10c>
 8000cde:	e000      	b.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d063      	beq.n	8000db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cfa:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b08      	cmp	r3, #8
 8000d04:	d11c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x18c>
 8000d06:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d116      	bne.n	8000d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d005      	beq.n	8000d2a <HAL_RCC_OscConfig+0x176>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d001      	beq.n	8000d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e1c0      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2a:	4b3d      	ldr	r3, [pc, #244]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4939      	ldr	r1, [pc, #228]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3e:	e03a      	b.n	8000db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691b      	ldr	r3, [r3, #16]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d020      	beq.n	8000d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d4e:	f7ff fc9b 	bl	8000688 <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d56:	f7ff fc97 	bl	8000688 <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e1a1      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	695b      	ldr	r3, [r3, #20]
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	4927      	ldr	r1, [pc, #156]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	4313      	orrs	r3, r2
 8000d86:	600b      	str	r3, [r1, #0]
 8000d88:	e015      	b.n	8000db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_RCC_OscConfig+0x270>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fc7a 	bl	8000688 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d98:	f7ff fc76 	bl	8000688 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e180      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d1f0      	bne.n	8000d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d03a      	beq.n	8000e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d019      	beq.n	8000dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dd0:	f7ff fc5a 	bl	8000688 <HAL_GetTick>
 8000dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fc56 	bl	8000688 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e160      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f0      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f000 face 	bl	8001398 <RCC_Delay>
 8000dfc:	e01c      	b.n	8000e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_RCC_OscConfig+0x274>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e04:	f7ff fc40 	bl	8000688 <HAL_GetTick>
 8000e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e0a:	e00f      	b.n	8000e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e0c:	f7ff fc3c 	bl	8000688 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d908      	bls.n	8000e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e146      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000
 8000e24:	42420000 	.word	0x42420000
 8000e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2c:	4b92      	ldr	r3, [pc, #584]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e9      	bne.n	8000e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80a6 	beq.w	8000f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e4a:	4b8b      	ldr	r3, [pc, #556]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10d      	bne.n	8000e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b88      	ldr	r3, [pc, #544]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a87      	ldr	r2, [pc, #540]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b85      	ldr	r3, [pc, #532]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e72:	4b82      	ldr	r3, [pc, #520]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d118      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e7e:	4b7f      	ldr	r3, [pc, #508]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7e      	ldr	r2, [pc, #504]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fbfd 	bl	8000688 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e92:	f7ff fbf9 	bl	8000688 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b64      	cmp	r3, #100	; 0x64
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e103      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4b75      	ldr	r3, [pc, #468]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d106      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x312>
 8000eb8:	4b6f      	ldr	r3, [pc, #444]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	4a6e      	ldr	r2, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6213      	str	r3, [r2, #32]
 8000ec4:	e02d      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x334>
 8000ece:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a69      	ldr	r2, [pc, #420]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f023 0301 	bic.w	r3, r3, #1
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a66      	ldr	r2, [pc, #408]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0304 	bic.w	r3, r3, #4
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	e01c      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x356>
 8000ef0:	4b61      	ldr	r3, [pc, #388]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a60      	ldr	r2, [pc, #384]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a5d      	ldr	r2, [pc, #372]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	e00b      	b.n	8000f22 <HAL_RCC_OscConfig+0x36e>
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a5a      	ldr	r2, [pc, #360]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	6213      	str	r3, [r2, #32]
 8000f16:	4b58      	ldr	r3, [pc, #352]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a57      	ldr	r2, [pc, #348]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
 8000f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d015      	beq.n	8000f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fbad 	bl	8000688 <HAL_GetTick>
 8000f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f32:	f7ff fba9 	bl	8000688 <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e0b1      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a1b      	ldr	r3, [r3, #32]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0ee      	beq.n	8000f32 <HAL_RCC_OscConfig+0x37e>
 8000f54:	e014      	b.n	8000f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f56:	f7ff fb97 	bl	8000688 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f5c:	e00a      	b.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fb93 	bl	8000688 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e09b      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ee      	bne.n	8000f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d105      	bne.n	8000f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a3b      	ldr	r2, [pc, #236]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8087 	beq.w	80010aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f9c:	4b36      	ldr	r3, [pc, #216]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d061      	beq.n	800106c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d146      	bne.n	800103e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb0:	4b33      	ldr	r3, [pc, #204]	; (8001080 <HAL_RCC_OscConfig+0x4cc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb67 	bl	8000688 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fb63 	bl	8000688 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e06d      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd0:	4b29      	ldr	r3, [pc, #164]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f0      	bne.n	8000fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe4:	d108      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	4921      	ldr	r1, [pc, #132]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a19      	ldr	r1, [r3, #32]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	430b      	orrs	r3, r1
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	4313      	orrs	r3, r2
 800100e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_RCC_OscConfig+0x4cc>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb37 	bl	8000688 <HAL_GetTick>
 800101a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101c:	e008      	b.n	8001030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800101e:	f7ff fb33 	bl	8000688 <HAL_GetTick>
 8001022:	4602      	mov	r2, r0
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e03d      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f0      	beq.n	800101e <HAL_RCC_OscConfig+0x46a>
 800103c:	e035      	b.n	80010aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_RCC_OscConfig+0x4cc>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fb20 	bl	8000688 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff fb1c 	bl	8000688 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e026      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0x498>
 800106a:	e01e      	b.n	80010aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d107      	bne.n	8001084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e019      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
 8001078:	40021000 	.word	0x40021000
 800107c:	40007000 	.word	0x40007000
 8001080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_OscConfig+0x500>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	429a      	cmp	r2, r3
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0d0      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010cc:	4b6a      	ldr	r3, [pc, #424]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d910      	bls.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 0207 	bic.w	r2, r3, #7
 80010e2:	4965      	ldr	r1, [pc, #404]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b63      	ldr	r3, [pc, #396]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0b8      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001114:	4b59      	ldr	r3, [pc, #356]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a58      	ldr	r2, [pc, #352]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800111e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	4b53      	ldr	r3, [pc, #332]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	494d      	ldr	r1, [pc, #308]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	4313      	orrs	r3, r2
 8001148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d040      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b47      	ldr	r3, [pc, #284]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d115      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e07f      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e073      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e06b      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f023 0203 	bic.w	r2, r3, #3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4936      	ldr	r1, [pc, #216]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a8:	f7ff fa6e 	bl	8000688 <HAL_GetTick>
 80011ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ae:	e00a      	b.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b0:	f7ff fa6a 	bl	8000688 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e053      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 020c 	and.w	r2, r3, #12
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d1eb      	bne.n	80011b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d210      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 0207 	bic.w	r2, r3, #7
 80011ee:	4922      	ldr	r1, [pc, #136]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e032      	b.n	800126e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001246:	f000 f821 	bl	800128c <HAL_RCC_GetSysClockFreq>
 800124a:	4602      	mov	r2, r0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	490a      	ldr	r1, [pc, #40]	; (8001280 <HAL_RCC_ClockConfig+0x1c8>)
 8001258:	5ccb      	ldrb	r3, [r1, r3]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_RCC_ClockConfig+0x1cc>)
 8001260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_ClockConfig+0x1d0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f9cc 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000
 800127c:	40021000 	.word	0x40021000
 8001280:	08002874 	.word	0x08002874
 8001284:	20000000 	.word	0x20000000
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_RCC_GetSysClockFreq+0x94>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d002      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x30>
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ba:	e027      	b.n	800130c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 80012be:	613b      	str	r3, [r7, #16]
      break;
 80012c0:	e027      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	4a17      	ldr	r2, [pc, #92]	; (8001328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <HAL_RCC_GetSysClockFreq+0x94>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	0c5b      	lsrs	r3, r3, #17
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_RCC_GetSysClockFreq+0xa0>)
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	fb03 f202 	mul.w	r2, r3, r2
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	e004      	b.n	8001306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	613b      	str	r3, [r7, #16]
      break;
 800130a:	e002      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_RCC_GetSysClockFreq+0x98>)
 800130e:	613b      	str	r3, [r7, #16]
      break;
 8001310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001312:	693b      	ldr	r3, [r7, #16]
}
 8001314:	4618      	mov	r0, r3
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40021000 	.word	0x40021000
 8001324:	007a1200 	.word	0x007a1200
 8001328:	0800288c 	.word	0x0800288c
 800132c:	0800289c 	.word	0x0800289c
 8001330:	003d0900 	.word	0x003d0900

08001334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <HAL_RCC_GetHCLKFreq+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	20000000 	.word	0x20000000

08001348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800134c:	f7ff fff2 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8001350:	4602      	mov	r2, r0
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	4903      	ldr	r1, [pc, #12]	; (800136c <HAL_RCC_GetPCLK1Freq+0x24>)
 800135e:	5ccb      	ldrb	r3, [r1, r3]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	08002884 	.word	0x08002884

08001370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001374:	f7ff ffde 	bl	8001334 <HAL_RCC_GetHCLKFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	0adb      	lsrs	r3, r3, #11
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4903      	ldr	r1, [pc, #12]	; (8001394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	08002884 	.word	0x08002884

08001398 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <RCC_Delay+0x34>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <RCC_Delay+0x38>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0a5b      	lsrs	r3, r3, #9
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013b4:	bf00      	nop
  }
  while (Delay --);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1e5a      	subs	r2, r3, #1
 80013ba:	60fa      	str	r2, [r7, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f9      	bne.n	80013b4 <RCC_Delay+0x1c>
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000000 	.word	0x20000000
 80013d0:	10624dd3 	.word	0x10624dd3

080013d4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e04a      	b.n	800147c <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d106      	bne.n	8001400 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7fe ff82 	bl	8000304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2224      	movs	r2, #36	; 0x24
 8001404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f925 	bl	8001668 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800142c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800143c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0208 	orr.w	r2, r2, #8
 800144c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800145c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2220      	movs	r2, #32
 8001468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2220      	movs	r2, #32
 8001470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af02      	add	r7, sp, #8
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d16d      	bne.n	8001580 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <HAL_UART_Transmit+0x2c>
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e066      	b.n	8001582 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2221      	movs	r2, #33	; 0x21
 80014be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80014c2:	f7ff f8e1 	bl	8000688 <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014dc:	d108      	bne.n	80014f0 <HAL_UART_Transmit+0x6c>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d104      	bne.n	80014f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	e003      	b.n	80014f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80014f8:	e02a      	b.n	8001550 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f840 	bl	800158a <UART_WaitOnFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e036      	b.n	8001582 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001528:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	3302      	adds	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
 8001530:	e007      	b.n	8001542 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29a      	uxth	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001554:	b29b      	uxth	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1cf      	bne.n	80014fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2200      	movs	r2, #0
 8001562:	2140      	movs	r1, #64	; 0x40
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f810 	bl	800158a <UART_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e006      	b.n	8001582 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2220      	movs	r2, #32
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	e000      	b.n	8001582 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001580:	2302      	movs	r3, #2
  }
}
 8001582:	4618      	mov	r0, r3
 8001584:	3720      	adds	r7, #32
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b090      	sub	sp, #64	; 0x40
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800159a:	e050      	b.n	800163e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800159c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a2:	d04c      	beq.n	800163e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80015a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <UART_WaitOnFlagUntilTimeout+0x30>
 80015aa:	f7ff f86d 	bl	8000688 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d241      	bcs.n	800163e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	330c      	adds	r3, #12
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	e853 3f00 	ldrex	r3, [r3]
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	330c      	adds	r3, #12
 80015d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015da:	637a      	str	r2, [r7, #52]	; 0x34
 80015dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015e2:	e841 2300 	strex	r3, r2, [r1]
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e5      	bne.n	80015ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3314      	adds	r3, #20
 80015f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	e853 3f00 	ldrex	r3, [r3]
 80015fc:	613b      	str	r3, [r7, #16]
   return(result);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3314      	adds	r3, #20
 800160c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800160e:	623a      	str	r2, [r7, #32]
 8001610:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001612:	69f9      	ldr	r1, [r7, #28]
 8001614:	6a3a      	ldr	r2, [r7, #32]
 8001616:	e841 2300 	strex	r3, r2, [r1]
 800161a:	61bb      	str	r3, [r7, #24]
   return(result);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1e5      	bne.n	80015ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e00f      	b.n	800165e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4013      	ands	r3, r2
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	429a      	cmp	r2, r3
 800164c:	bf0c      	ite	eq
 800164e:	2301      	moveq	r3, #1
 8001650:	2300      	movne	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	429a      	cmp	r2, r3
 800165a:	d09f      	beq.n	800159c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3740      	adds	r7, #64	; 0x40
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	4313      	orrs	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016a2:	f023 030c 	bic.w	r3, r3, #12
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699a      	ldr	r2, [r3, #24]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a2c      	ldr	r2, [pc, #176]	; (800177c <UART_SetConfig+0x114>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d103      	bne.n	80016d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80016d0:	f7ff fe4e 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	e002      	b.n	80016de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80016d8:	f7ff fe36 	bl	8001348 <HAL_RCC_GetPCLK1Freq>
 80016dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	009a      	lsls	r2, r3, #2
 80016e8:	441a      	add	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	4a22      	ldr	r2, [pc, #136]	; (8001780 <UART_SetConfig+0x118>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	0119      	lsls	r1, r3, #4
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	009a      	lsls	r2, r3, #2
 8001708:	441a      	add	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	fbb2 f2f3 	udiv	r2, r2, r3
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <UART_SetConfig+0x118>)
 8001716:	fba3 0302 	umull	r0, r3, r3, r2
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2064      	movs	r0, #100	; 0x64
 800171e:	fb00 f303 	mul.w	r3, r0, r3
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	3332      	adds	r3, #50	; 0x32
 8001728:	4a15      	ldr	r2, [pc, #84]	; (8001780 <UART_SetConfig+0x118>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001734:	4419      	add	r1, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	009a      	lsls	r2, r3, #2
 8001740:	441a      	add	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	fbb2 f2f3 	udiv	r2, r2, r3
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <UART_SetConfig+0x118>)
 800174e:	fba3 0302 	umull	r0, r3, r3, r2
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	fb00 f303 	mul.w	r3, r0, r3
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	3332      	adds	r3, #50	; 0x32
 8001760:	4a07      	ldr	r2, [pc, #28]	; (8001780 <UART_SetConfig+0x118>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	f003 020f 	and.w	r2, r3, #15
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	440a      	add	r2, r1
 8001772:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40013800 	.word	0x40013800
 8001780:	51eb851f 	.word	0x51eb851f

08001784 <__errno>:
 8001784:	4b01      	ldr	r3, [pc, #4]	; (800178c <__errno+0x8>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c

08001790 <__libc_init_array>:
 8001790:	b570      	push	{r4, r5, r6, lr}
 8001792:	2600      	movs	r6, #0
 8001794:	4d0c      	ldr	r5, [pc, #48]	; (80017c8 <__libc_init_array+0x38>)
 8001796:	4c0d      	ldr	r4, [pc, #52]	; (80017cc <__libc_init_array+0x3c>)
 8001798:	1b64      	subs	r4, r4, r5
 800179a:	10a4      	asrs	r4, r4, #2
 800179c:	42a6      	cmp	r6, r4
 800179e:	d109      	bne.n	80017b4 <__libc_init_array+0x24>
 80017a0:	f001 f83c 	bl	800281c <_init>
 80017a4:	2600      	movs	r6, #0
 80017a6:	4d0a      	ldr	r5, [pc, #40]	; (80017d0 <__libc_init_array+0x40>)
 80017a8:	4c0a      	ldr	r4, [pc, #40]	; (80017d4 <__libc_init_array+0x44>)
 80017aa:	1b64      	subs	r4, r4, r5
 80017ac:	10a4      	asrs	r4, r4, #2
 80017ae:	42a6      	cmp	r6, r4
 80017b0:	d105      	bne.n	80017be <__libc_init_array+0x2e>
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
 80017b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b8:	4798      	blx	r3
 80017ba:	3601      	adds	r6, #1
 80017bc:	e7ee      	b.n	800179c <__libc_init_array+0xc>
 80017be:	f855 3b04 	ldr.w	r3, [r5], #4
 80017c2:	4798      	blx	r3
 80017c4:	3601      	adds	r6, #1
 80017c6:	e7f2      	b.n	80017ae <__libc_init_array+0x1e>
 80017c8:	08002938 	.word	0x08002938
 80017cc:	08002938 	.word	0x08002938
 80017d0:	08002938 	.word	0x08002938
 80017d4:	0800293c 	.word	0x0800293c

080017d8 <malloc>:
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <malloc+0xc>)
 80017da:	4601      	mov	r1, r0
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	f000 b87b 	b.w	80018d8 <_malloc_r>
 80017e2:	bf00      	nop
 80017e4:	2000000c 	.word	0x2000000c

080017e8 <free>:
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <free+0xc>)
 80017ea:	4601      	mov	r1, r0
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	f000 b80b 	b.w	8001808 <_free_r>
 80017f2:	bf00      	nop
 80017f4:	2000000c 	.word	0x2000000c

080017f8 <memset>:
 80017f8:	4603      	mov	r3, r0
 80017fa:	4402      	add	r2, r0
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d100      	bne.n	8001802 <memset+0xa>
 8001800:	4770      	bx	lr
 8001802:	f803 1b01 	strb.w	r1, [r3], #1
 8001806:	e7f9      	b.n	80017fc <memset+0x4>

08001808 <_free_r>:
 8001808:	b538      	push	{r3, r4, r5, lr}
 800180a:	4605      	mov	r5, r0
 800180c:	2900      	cmp	r1, #0
 800180e:	d040      	beq.n	8001892 <_free_r+0x8a>
 8001810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001814:	1f0c      	subs	r4, r1, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	bfb8      	it	lt
 800181a:	18e4      	addlt	r4, r4, r3
 800181c:	f000 fc4a 	bl	80020b4 <__malloc_lock>
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <_free_r+0x8c>)
 8001822:	6813      	ldr	r3, [r2, #0]
 8001824:	b933      	cbnz	r3, 8001834 <_free_r+0x2c>
 8001826:	6063      	str	r3, [r4, #4]
 8001828:	6014      	str	r4, [r2, #0]
 800182a:	4628      	mov	r0, r5
 800182c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001830:	f000 bc46 	b.w	80020c0 <__malloc_unlock>
 8001834:	42a3      	cmp	r3, r4
 8001836:	d908      	bls.n	800184a <_free_r+0x42>
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	1821      	adds	r1, r4, r0
 800183c:	428b      	cmp	r3, r1
 800183e:	bf01      	itttt	eq
 8001840:	6819      	ldreq	r1, [r3, #0]
 8001842:	685b      	ldreq	r3, [r3, #4]
 8001844:	1809      	addeq	r1, r1, r0
 8001846:	6021      	streq	r1, [r4, #0]
 8001848:	e7ed      	b.n	8001826 <_free_r+0x1e>
 800184a:	461a      	mov	r2, r3
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	b10b      	cbz	r3, 8001854 <_free_r+0x4c>
 8001850:	42a3      	cmp	r3, r4
 8001852:	d9fa      	bls.n	800184a <_free_r+0x42>
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	1850      	adds	r0, r2, r1
 8001858:	42a0      	cmp	r0, r4
 800185a:	d10b      	bne.n	8001874 <_free_r+0x6c>
 800185c:	6820      	ldr	r0, [r4, #0]
 800185e:	4401      	add	r1, r0
 8001860:	1850      	adds	r0, r2, r1
 8001862:	4283      	cmp	r3, r0
 8001864:	6011      	str	r1, [r2, #0]
 8001866:	d1e0      	bne.n	800182a <_free_r+0x22>
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4401      	add	r1, r0
 800186e:	6011      	str	r1, [r2, #0]
 8001870:	6053      	str	r3, [r2, #4]
 8001872:	e7da      	b.n	800182a <_free_r+0x22>
 8001874:	d902      	bls.n	800187c <_free_r+0x74>
 8001876:	230c      	movs	r3, #12
 8001878:	602b      	str	r3, [r5, #0]
 800187a:	e7d6      	b.n	800182a <_free_r+0x22>
 800187c:	6820      	ldr	r0, [r4, #0]
 800187e:	1821      	adds	r1, r4, r0
 8001880:	428b      	cmp	r3, r1
 8001882:	bf01      	itttt	eq
 8001884:	6819      	ldreq	r1, [r3, #0]
 8001886:	685b      	ldreq	r3, [r3, #4]
 8001888:	1809      	addeq	r1, r1, r0
 800188a:	6021      	streq	r1, [r4, #0]
 800188c:	6063      	str	r3, [r4, #4]
 800188e:	6054      	str	r4, [r2, #4]
 8001890:	e7cb      	b.n	800182a <_free_r+0x22>
 8001892:	bd38      	pop	{r3, r4, r5, pc}
 8001894:	200000dc 	.word	0x200000dc

08001898 <sbrk_aligned>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	4e0e      	ldr	r6, [pc, #56]	; (80018d4 <sbrk_aligned+0x3c>)
 800189c:	460c      	mov	r4, r1
 800189e:	6831      	ldr	r1, [r6, #0]
 80018a0:	4605      	mov	r5, r0
 80018a2:	b911      	cbnz	r1, 80018aa <sbrk_aligned+0x12>
 80018a4:	f000 f91a 	bl	8001adc <_sbrk_r>
 80018a8:	6030      	str	r0, [r6, #0]
 80018aa:	4621      	mov	r1, r4
 80018ac:	4628      	mov	r0, r5
 80018ae:	f000 f915 	bl	8001adc <_sbrk_r>
 80018b2:	1c43      	adds	r3, r0, #1
 80018b4:	d00a      	beq.n	80018cc <sbrk_aligned+0x34>
 80018b6:	1cc4      	adds	r4, r0, #3
 80018b8:	f024 0403 	bic.w	r4, r4, #3
 80018bc:	42a0      	cmp	r0, r4
 80018be:	d007      	beq.n	80018d0 <sbrk_aligned+0x38>
 80018c0:	1a21      	subs	r1, r4, r0
 80018c2:	4628      	mov	r0, r5
 80018c4:	f000 f90a 	bl	8001adc <_sbrk_r>
 80018c8:	3001      	adds	r0, #1
 80018ca:	d101      	bne.n	80018d0 <sbrk_aligned+0x38>
 80018cc:	f04f 34ff 	mov.w	r4, #4294967295
 80018d0:	4620      	mov	r0, r4
 80018d2:	bd70      	pop	{r4, r5, r6, pc}
 80018d4:	200000e0 	.word	0x200000e0

080018d8 <_malloc_r>:
 80018d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018dc:	1ccd      	adds	r5, r1, #3
 80018de:	f025 0503 	bic.w	r5, r5, #3
 80018e2:	3508      	adds	r5, #8
 80018e4:	2d0c      	cmp	r5, #12
 80018e6:	bf38      	it	cc
 80018e8:	250c      	movcc	r5, #12
 80018ea:	2d00      	cmp	r5, #0
 80018ec:	4607      	mov	r7, r0
 80018ee:	db01      	blt.n	80018f4 <_malloc_r+0x1c>
 80018f0:	42a9      	cmp	r1, r5
 80018f2:	d905      	bls.n	8001900 <_malloc_r+0x28>
 80018f4:	230c      	movs	r3, #12
 80018f6:	2600      	movs	r6, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4630      	mov	r0, r6
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001900:	4e2e      	ldr	r6, [pc, #184]	; (80019bc <_malloc_r+0xe4>)
 8001902:	f000 fbd7 	bl	80020b4 <__malloc_lock>
 8001906:	6833      	ldr	r3, [r6, #0]
 8001908:	461c      	mov	r4, r3
 800190a:	bb34      	cbnz	r4, 800195a <_malloc_r+0x82>
 800190c:	4629      	mov	r1, r5
 800190e:	4638      	mov	r0, r7
 8001910:	f7ff ffc2 	bl	8001898 <sbrk_aligned>
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	4604      	mov	r4, r0
 8001918:	d14d      	bne.n	80019b6 <_malloc_r+0xde>
 800191a:	6834      	ldr	r4, [r6, #0]
 800191c:	4626      	mov	r6, r4
 800191e:	2e00      	cmp	r6, #0
 8001920:	d140      	bne.n	80019a4 <_malloc_r+0xcc>
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	4631      	mov	r1, r6
 8001926:	4638      	mov	r0, r7
 8001928:	eb04 0803 	add.w	r8, r4, r3
 800192c:	f000 f8d6 	bl	8001adc <_sbrk_r>
 8001930:	4580      	cmp	r8, r0
 8001932:	d13a      	bne.n	80019aa <_malloc_r+0xd2>
 8001934:	6821      	ldr	r1, [r4, #0]
 8001936:	3503      	adds	r5, #3
 8001938:	1a6d      	subs	r5, r5, r1
 800193a:	f025 0503 	bic.w	r5, r5, #3
 800193e:	3508      	adds	r5, #8
 8001940:	2d0c      	cmp	r5, #12
 8001942:	bf38      	it	cc
 8001944:	250c      	movcc	r5, #12
 8001946:	4638      	mov	r0, r7
 8001948:	4629      	mov	r1, r5
 800194a:	f7ff ffa5 	bl	8001898 <sbrk_aligned>
 800194e:	3001      	adds	r0, #1
 8001950:	d02b      	beq.n	80019aa <_malloc_r+0xd2>
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	442b      	add	r3, r5
 8001956:	6023      	str	r3, [r4, #0]
 8001958:	e00e      	b.n	8001978 <_malloc_r+0xa0>
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	1b52      	subs	r2, r2, r5
 800195e:	d41e      	bmi.n	800199e <_malloc_r+0xc6>
 8001960:	2a0b      	cmp	r2, #11
 8001962:	d916      	bls.n	8001992 <_malloc_r+0xba>
 8001964:	1961      	adds	r1, r4, r5
 8001966:	42a3      	cmp	r3, r4
 8001968:	6025      	str	r5, [r4, #0]
 800196a:	bf18      	it	ne
 800196c:	6059      	strne	r1, [r3, #4]
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	bf08      	it	eq
 8001972:	6031      	streq	r1, [r6, #0]
 8001974:	5162      	str	r2, [r4, r5]
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	4638      	mov	r0, r7
 800197a:	f104 060b 	add.w	r6, r4, #11
 800197e:	f000 fb9f 	bl	80020c0 <__malloc_unlock>
 8001982:	f026 0607 	bic.w	r6, r6, #7
 8001986:	1d23      	adds	r3, r4, #4
 8001988:	1af2      	subs	r2, r6, r3
 800198a:	d0b6      	beq.n	80018fa <_malloc_r+0x22>
 800198c:	1b9b      	subs	r3, r3, r6
 800198e:	50a3      	str	r3, [r4, r2]
 8001990:	e7b3      	b.n	80018fa <_malloc_r+0x22>
 8001992:	6862      	ldr	r2, [r4, #4]
 8001994:	42a3      	cmp	r3, r4
 8001996:	bf0c      	ite	eq
 8001998:	6032      	streq	r2, [r6, #0]
 800199a:	605a      	strne	r2, [r3, #4]
 800199c:	e7ec      	b.n	8001978 <_malloc_r+0xa0>
 800199e:	4623      	mov	r3, r4
 80019a0:	6864      	ldr	r4, [r4, #4]
 80019a2:	e7b2      	b.n	800190a <_malloc_r+0x32>
 80019a4:	4634      	mov	r4, r6
 80019a6:	6876      	ldr	r6, [r6, #4]
 80019a8:	e7b9      	b.n	800191e <_malloc_r+0x46>
 80019aa:	230c      	movs	r3, #12
 80019ac:	4638      	mov	r0, r7
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	f000 fb86 	bl	80020c0 <__malloc_unlock>
 80019b4:	e7a1      	b.n	80018fa <_malloc_r+0x22>
 80019b6:	6025      	str	r5, [r4, #0]
 80019b8:	e7de      	b.n	8001978 <_malloc_r+0xa0>
 80019ba:	bf00      	nop
 80019bc:	200000dc 	.word	0x200000dc

080019c0 <iprintf>:
 80019c0:	b40f      	push	{r0, r1, r2, r3}
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <iprintf+0x2c>)
 80019c4:	b513      	push	{r0, r1, r4, lr}
 80019c6:	681c      	ldr	r4, [r3, #0]
 80019c8:	b124      	cbz	r4, 80019d4 <iprintf+0x14>
 80019ca:	69a3      	ldr	r3, [r4, #24]
 80019cc:	b913      	cbnz	r3, 80019d4 <iprintf+0x14>
 80019ce:	4620      	mov	r0, r4
 80019d0:	f000 fa6a 	bl	8001ea8 <__sinit>
 80019d4:	ab05      	add	r3, sp, #20
 80019d6:	4620      	mov	r0, r4
 80019d8:	9a04      	ldr	r2, [sp, #16]
 80019da:	68a1      	ldr	r1, [r4, #8]
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	f000 fb9d 	bl	800211c <_vfiprintf_r>
 80019e2:	b002      	add	sp, #8
 80019e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019e8:	b004      	add	sp, #16
 80019ea:	4770      	bx	lr
 80019ec:	2000000c 	.word	0x2000000c

080019f0 <_puts_r>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	460e      	mov	r6, r1
 80019f4:	4605      	mov	r5, r0
 80019f6:	b118      	cbz	r0, 8001a00 <_puts_r+0x10>
 80019f8:	6983      	ldr	r3, [r0, #24]
 80019fa:	b90b      	cbnz	r3, 8001a00 <_puts_r+0x10>
 80019fc:	f000 fa54 	bl	8001ea8 <__sinit>
 8001a00:	69ab      	ldr	r3, [r5, #24]
 8001a02:	68ac      	ldr	r4, [r5, #8]
 8001a04:	b913      	cbnz	r3, 8001a0c <_puts_r+0x1c>
 8001a06:	4628      	mov	r0, r5
 8001a08:	f000 fa4e 	bl	8001ea8 <__sinit>
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <_puts_r+0xd0>)
 8001a0e:	429c      	cmp	r4, r3
 8001a10:	d120      	bne.n	8001a54 <_puts_r+0x64>
 8001a12:	686c      	ldr	r4, [r5, #4]
 8001a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a16:	07db      	lsls	r3, r3, #31
 8001a18:	d405      	bmi.n	8001a26 <_puts_r+0x36>
 8001a1a:	89a3      	ldrh	r3, [r4, #12]
 8001a1c:	0598      	lsls	r0, r3, #22
 8001a1e:	d402      	bmi.n	8001a26 <_puts_r+0x36>
 8001a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a22:	f000 fadf 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 8001a26:	89a3      	ldrh	r3, [r4, #12]
 8001a28:	0719      	lsls	r1, r3, #28
 8001a2a:	d51d      	bpl.n	8001a68 <_puts_r+0x78>
 8001a2c:	6923      	ldr	r3, [r4, #16]
 8001a2e:	b1db      	cbz	r3, 8001a68 <_puts_r+0x78>
 8001a30:	3e01      	subs	r6, #1
 8001a32:	68a3      	ldr	r3, [r4, #8]
 8001a34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60a3      	str	r3, [r4, #8]
 8001a3c:	bb39      	cbnz	r1, 8001a8e <_puts_r+0x9e>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da38      	bge.n	8001ab4 <_puts_r+0xc4>
 8001a42:	4622      	mov	r2, r4
 8001a44:	210a      	movs	r1, #10
 8001a46:	4628      	mov	r0, r5
 8001a48:	f000 f858 	bl	8001afc <__swbuf_r>
 8001a4c:	3001      	adds	r0, #1
 8001a4e:	d011      	beq.n	8001a74 <_puts_r+0x84>
 8001a50:	250a      	movs	r5, #10
 8001a52:	e011      	b.n	8001a78 <_puts_r+0x88>
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <_puts_r+0xd4>)
 8001a56:	429c      	cmp	r4, r3
 8001a58:	d101      	bne.n	8001a5e <_puts_r+0x6e>
 8001a5a:	68ac      	ldr	r4, [r5, #8]
 8001a5c:	e7da      	b.n	8001a14 <_puts_r+0x24>
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <_puts_r+0xd8>)
 8001a60:	429c      	cmp	r4, r3
 8001a62:	bf08      	it	eq
 8001a64:	68ec      	ldreq	r4, [r5, #12]
 8001a66:	e7d5      	b.n	8001a14 <_puts_r+0x24>
 8001a68:	4621      	mov	r1, r4
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 f898 	bl	8001ba0 <__swsetup_r>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d0dd      	beq.n	8001a30 <_puts_r+0x40>
 8001a74:	f04f 35ff 	mov.w	r5, #4294967295
 8001a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a7a:	07da      	lsls	r2, r3, #31
 8001a7c:	d405      	bmi.n	8001a8a <_puts_r+0x9a>
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	059b      	lsls	r3, r3, #22
 8001a82:	d402      	bmi.n	8001a8a <_puts_r+0x9a>
 8001a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a86:	f000 faae 	bl	8001fe6 <__retarget_lock_release_recursive>
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	bd70      	pop	{r4, r5, r6, pc}
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da04      	bge.n	8001a9c <_puts_r+0xac>
 8001a92:	69a2      	ldr	r2, [r4, #24]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dc06      	bgt.n	8001aa6 <_puts_r+0xb6>
 8001a98:	290a      	cmp	r1, #10
 8001a9a:	d004      	beq.n	8001aa6 <_puts_r+0xb6>
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	6022      	str	r2, [r4, #0]
 8001aa2:	7019      	strb	r1, [r3, #0]
 8001aa4:	e7c5      	b.n	8001a32 <_puts_r+0x42>
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 f827 	bl	8001afc <__swbuf_r>
 8001aae:	3001      	adds	r0, #1
 8001ab0:	d1bf      	bne.n	8001a32 <_puts_r+0x42>
 8001ab2:	e7df      	b.n	8001a74 <_puts_r+0x84>
 8001ab4:	250a      	movs	r5, #10
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	6022      	str	r2, [r4, #0]
 8001abc:	701d      	strb	r5, [r3, #0]
 8001abe:	e7db      	b.n	8001a78 <_puts_r+0x88>
 8001ac0:	080028c4 	.word	0x080028c4
 8001ac4:	080028e4 	.word	0x080028e4
 8001ac8:	080028a4 	.word	0x080028a4

08001acc <puts>:
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <puts+0xc>)
 8001ace:	4601      	mov	r1, r0
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	f7ff bf8d 	b.w	80019f0 <_puts_r>
 8001ad6:	bf00      	nop
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <_sbrk_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	2300      	movs	r3, #0
 8001ae0:	4d05      	ldr	r5, [pc, #20]	; (8001af8 <_sbrk_r+0x1c>)
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f7fe fcf6 	bl	80004d8 <_sbrk>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_sbrk_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_sbrk_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	200000e8 	.word	0x200000e8

08001afc <__swbuf_r>:
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	460e      	mov	r6, r1
 8001b00:	4614      	mov	r4, r2
 8001b02:	4605      	mov	r5, r0
 8001b04:	b118      	cbz	r0, 8001b0e <__swbuf_r+0x12>
 8001b06:	6983      	ldr	r3, [r0, #24]
 8001b08:	b90b      	cbnz	r3, 8001b0e <__swbuf_r+0x12>
 8001b0a:	f000 f9cd 	bl	8001ea8 <__sinit>
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <__swbuf_r+0x98>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	d12b      	bne.n	8001b6c <__swbuf_r+0x70>
 8001b14:	686c      	ldr	r4, [r5, #4]
 8001b16:	69a3      	ldr	r3, [r4, #24]
 8001b18:	60a3      	str	r3, [r4, #8]
 8001b1a:	89a3      	ldrh	r3, [r4, #12]
 8001b1c:	071a      	lsls	r2, r3, #28
 8001b1e:	d52f      	bpl.n	8001b80 <__swbuf_r+0x84>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	b36b      	cbz	r3, 8001b80 <__swbuf_r+0x84>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	b2f6      	uxtb	r6, r6
 8001b2a:	1ac0      	subs	r0, r0, r3
 8001b2c:	6963      	ldr	r3, [r4, #20]
 8001b2e:	4637      	mov	r7, r6
 8001b30:	4283      	cmp	r3, r0
 8001b32:	dc04      	bgt.n	8001b3e <__swbuf_r+0x42>
 8001b34:	4621      	mov	r1, r4
 8001b36:	4628      	mov	r0, r5
 8001b38:	f000 f922 	bl	8001d80 <_fflush_r>
 8001b3c:	bb30      	cbnz	r0, 8001b8c <__swbuf_r+0x90>
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	3001      	adds	r0, #1
 8001b42:	3b01      	subs	r3, #1
 8001b44:	60a3      	str	r3, [r4, #8]
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	6022      	str	r2, [r4, #0]
 8001b4c:	701e      	strb	r6, [r3, #0]
 8001b4e:	6963      	ldr	r3, [r4, #20]
 8001b50:	4283      	cmp	r3, r0
 8001b52:	d004      	beq.n	8001b5e <__swbuf_r+0x62>
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	07db      	lsls	r3, r3, #31
 8001b58:	d506      	bpl.n	8001b68 <__swbuf_r+0x6c>
 8001b5a:	2e0a      	cmp	r6, #10
 8001b5c:	d104      	bne.n	8001b68 <__swbuf_r+0x6c>
 8001b5e:	4621      	mov	r1, r4
 8001b60:	4628      	mov	r0, r5
 8001b62:	f000 f90d 	bl	8001d80 <_fflush_r>
 8001b66:	b988      	cbnz	r0, 8001b8c <__swbuf_r+0x90>
 8001b68:	4638      	mov	r0, r7
 8001b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <__swbuf_r+0x9c>)
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	d101      	bne.n	8001b76 <__swbuf_r+0x7a>
 8001b72:	68ac      	ldr	r4, [r5, #8]
 8001b74:	e7cf      	b.n	8001b16 <__swbuf_r+0x1a>
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <__swbuf_r+0xa0>)
 8001b78:	429c      	cmp	r4, r3
 8001b7a:	bf08      	it	eq
 8001b7c:	68ec      	ldreq	r4, [r5, #12]
 8001b7e:	e7ca      	b.n	8001b16 <__swbuf_r+0x1a>
 8001b80:	4621      	mov	r1, r4
 8001b82:	4628      	mov	r0, r5
 8001b84:	f000 f80c 	bl	8001ba0 <__swsetup_r>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d0cb      	beq.n	8001b24 <__swbuf_r+0x28>
 8001b8c:	f04f 37ff 	mov.w	r7, #4294967295
 8001b90:	e7ea      	b.n	8001b68 <__swbuf_r+0x6c>
 8001b92:	bf00      	nop
 8001b94:	080028c4 	.word	0x080028c4
 8001b98:	080028e4 	.word	0x080028e4
 8001b9c:	080028a4 	.word	0x080028a4

08001ba0 <__swsetup_r>:
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <__swsetup_r+0xcc>)
 8001ba2:	b570      	push	{r4, r5, r6, lr}
 8001ba4:	681d      	ldr	r5, [r3, #0]
 8001ba6:	4606      	mov	r6, r0
 8001ba8:	460c      	mov	r4, r1
 8001baa:	b125      	cbz	r5, 8001bb6 <__swsetup_r+0x16>
 8001bac:	69ab      	ldr	r3, [r5, #24]
 8001bae:	b913      	cbnz	r3, 8001bb6 <__swsetup_r+0x16>
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f000 f979 	bl	8001ea8 <__sinit>
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <__swsetup_r+0xd0>)
 8001bb8:	429c      	cmp	r4, r3
 8001bba:	d10f      	bne.n	8001bdc <__swsetup_r+0x3c>
 8001bbc:	686c      	ldr	r4, [r5, #4]
 8001bbe:	89a3      	ldrh	r3, [r4, #12]
 8001bc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bc4:	0719      	lsls	r1, r3, #28
 8001bc6:	d42c      	bmi.n	8001c22 <__swsetup_r+0x82>
 8001bc8:	06dd      	lsls	r5, r3, #27
 8001bca:	d411      	bmi.n	8001bf0 <__swsetup_r+0x50>
 8001bcc:	2309      	movs	r3, #9
 8001bce:	6033      	str	r3, [r6, #0]
 8001bd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	81a3      	strh	r3, [r4, #12]
 8001bda:	e03e      	b.n	8001c5a <__swsetup_r+0xba>
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <__swsetup_r+0xd4>)
 8001bde:	429c      	cmp	r4, r3
 8001be0:	d101      	bne.n	8001be6 <__swsetup_r+0x46>
 8001be2:	68ac      	ldr	r4, [r5, #8]
 8001be4:	e7eb      	b.n	8001bbe <__swsetup_r+0x1e>
 8001be6:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <__swsetup_r+0xd8>)
 8001be8:	429c      	cmp	r4, r3
 8001bea:	bf08      	it	eq
 8001bec:	68ec      	ldreq	r4, [r5, #12]
 8001bee:	e7e6      	b.n	8001bbe <__swsetup_r+0x1e>
 8001bf0:	0758      	lsls	r0, r3, #29
 8001bf2:	d512      	bpl.n	8001c1a <__swsetup_r+0x7a>
 8001bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf6:	b141      	cbz	r1, 8001c0a <__swsetup_r+0x6a>
 8001bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bfc:	4299      	cmp	r1, r3
 8001bfe:	d002      	beq.n	8001c06 <__swsetup_r+0x66>
 8001c00:	4630      	mov	r0, r6
 8001c02:	f7ff fe01 	bl	8001808 <_free_r>
 8001c06:	2300      	movs	r3, #0
 8001c08:	6363      	str	r3, [r4, #52]	; 0x34
 8001c0a:	89a3      	ldrh	r3, [r4, #12]
 8001c0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c10:	81a3      	strh	r3, [r4, #12]
 8001c12:	2300      	movs	r3, #0
 8001c14:	6063      	str	r3, [r4, #4]
 8001c16:	6923      	ldr	r3, [r4, #16]
 8001c18:	6023      	str	r3, [r4, #0]
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	f043 0308 	orr.w	r3, r3, #8
 8001c20:	81a3      	strh	r3, [r4, #12]
 8001c22:	6923      	ldr	r3, [r4, #16]
 8001c24:	b94b      	cbnz	r3, 8001c3a <__swsetup_r+0x9a>
 8001c26:	89a3      	ldrh	r3, [r4, #12]
 8001c28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c30:	d003      	beq.n	8001c3a <__swsetup_r+0x9a>
 8001c32:	4621      	mov	r1, r4
 8001c34:	4630      	mov	r0, r6
 8001c36:	f000 f9fd 	bl	8002034 <__smakebuf_r>
 8001c3a:	89a0      	ldrh	r0, [r4, #12]
 8001c3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c40:	f010 0301 	ands.w	r3, r0, #1
 8001c44:	d00a      	beq.n	8001c5c <__swsetup_r+0xbc>
 8001c46:	2300      	movs	r3, #0
 8001c48:	60a3      	str	r3, [r4, #8]
 8001c4a:	6963      	ldr	r3, [r4, #20]
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	61a3      	str	r3, [r4, #24]
 8001c50:	6923      	ldr	r3, [r4, #16]
 8001c52:	b943      	cbnz	r3, 8001c66 <__swsetup_r+0xc6>
 8001c54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c58:	d1ba      	bne.n	8001bd0 <__swsetup_r+0x30>
 8001c5a:	bd70      	pop	{r4, r5, r6, pc}
 8001c5c:	0781      	lsls	r1, r0, #30
 8001c5e:	bf58      	it	pl
 8001c60:	6963      	ldrpl	r3, [r4, #20]
 8001c62:	60a3      	str	r3, [r4, #8]
 8001c64:	e7f4      	b.n	8001c50 <__swsetup_r+0xb0>
 8001c66:	2000      	movs	r0, #0
 8001c68:	e7f7      	b.n	8001c5a <__swsetup_r+0xba>
 8001c6a:	bf00      	nop
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	080028c4 	.word	0x080028c4
 8001c74:	080028e4 	.word	0x080028e4
 8001c78:	080028a4 	.word	0x080028a4

08001c7c <__sflush_r>:
 8001c7c:	898a      	ldrh	r2, [r1, #12]
 8001c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c80:	4605      	mov	r5, r0
 8001c82:	0710      	lsls	r0, r2, #28
 8001c84:	460c      	mov	r4, r1
 8001c86:	d457      	bmi.n	8001d38 <__sflush_r+0xbc>
 8001c88:	684b      	ldr	r3, [r1, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	dc04      	bgt.n	8001c98 <__sflush_r+0x1c>
 8001c8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dc01      	bgt.n	8001c98 <__sflush_r+0x1c>
 8001c94:	2000      	movs	r0, #0
 8001c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c9a:	2e00      	cmp	r6, #0
 8001c9c:	d0fa      	beq.n	8001c94 <__sflush_r+0x18>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ca4:	682f      	ldr	r7, [r5, #0]
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	d032      	beq.n	8001d10 <__sflush_r+0x94>
 8001caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cac:	89a3      	ldrh	r3, [r4, #12]
 8001cae:	075a      	lsls	r2, r3, #29
 8001cb0:	d505      	bpl.n	8001cbe <__sflush_r+0x42>
 8001cb2:	6863      	ldr	r3, [r4, #4]
 8001cb4:	1ac0      	subs	r0, r0, r3
 8001cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cb8:	b10b      	cbz	r3, 8001cbe <__sflush_r+0x42>
 8001cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cbc:	1ac0      	subs	r0, r0, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	6a21      	ldr	r1, [r4, #32]
 8001cc8:	47b0      	blx	r6
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	d106      	bne.n	8001cde <__sflush_r+0x62>
 8001cd0:	6829      	ldr	r1, [r5, #0]
 8001cd2:	291d      	cmp	r1, #29
 8001cd4:	d82c      	bhi.n	8001d30 <__sflush_r+0xb4>
 8001cd6:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <__sflush_r+0x100>)
 8001cd8:	40ca      	lsrs	r2, r1
 8001cda:	07d6      	lsls	r6, r2, #31
 8001cdc:	d528      	bpl.n	8001d30 <__sflush_r+0xb4>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	6062      	str	r2, [r4, #4]
 8001ce2:	6922      	ldr	r2, [r4, #16]
 8001ce4:	04d9      	lsls	r1, r3, #19
 8001ce6:	6022      	str	r2, [r4, #0]
 8001ce8:	d504      	bpl.n	8001cf4 <__sflush_r+0x78>
 8001cea:	1c42      	adds	r2, r0, #1
 8001cec:	d101      	bne.n	8001cf2 <__sflush_r+0x76>
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	b903      	cbnz	r3, 8001cf4 <__sflush_r+0x78>
 8001cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8001cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cf6:	602f      	str	r7, [r5, #0]
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d0cb      	beq.n	8001c94 <__sflush_r+0x18>
 8001cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d00:	4299      	cmp	r1, r3
 8001d02:	d002      	beq.n	8001d0a <__sflush_r+0x8e>
 8001d04:	4628      	mov	r0, r5
 8001d06:	f7ff fd7f 	bl	8001808 <_free_r>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d0e:	e7c2      	b.n	8001c96 <__sflush_r+0x1a>
 8001d10:	6a21      	ldr	r1, [r4, #32]
 8001d12:	2301      	movs	r3, #1
 8001d14:	4628      	mov	r0, r5
 8001d16:	47b0      	blx	r6
 8001d18:	1c41      	adds	r1, r0, #1
 8001d1a:	d1c7      	bne.n	8001cac <__sflush_r+0x30>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0c4      	beq.n	8001cac <__sflush_r+0x30>
 8001d22:	2b1d      	cmp	r3, #29
 8001d24:	d001      	beq.n	8001d2a <__sflush_r+0xae>
 8001d26:	2b16      	cmp	r3, #22
 8001d28:	d101      	bne.n	8001d2e <__sflush_r+0xb2>
 8001d2a:	602f      	str	r7, [r5, #0]
 8001d2c:	e7b2      	b.n	8001c94 <__sflush_r+0x18>
 8001d2e:	89a3      	ldrh	r3, [r4, #12]
 8001d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d34:	81a3      	strh	r3, [r4, #12]
 8001d36:	e7ae      	b.n	8001c96 <__sflush_r+0x1a>
 8001d38:	690f      	ldr	r7, [r1, #16]
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d0aa      	beq.n	8001c94 <__sflush_r+0x18>
 8001d3e:	0793      	lsls	r3, r2, #30
 8001d40:	bf18      	it	ne
 8001d42:	2300      	movne	r3, #0
 8001d44:	680e      	ldr	r6, [r1, #0]
 8001d46:	bf08      	it	eq
 8001d48:	694b      	ldreq	r3, [r1, #20]
 8001d4a:	1bf6      	subs	r6, r6, r7
 8001d4c:	600f      	str	r7, [r1, #0]
 8001d4e:	608b      	str	r3, [r1, #8]
 8001d50:	2e00      	cmp	r6, #0
 8001d52:	dd9f      	ble.n	8001c94 <__sflush_r+0x18>
 8001d54:	4633      	mov	r3, r6
 8001d56:	463a      	mov	r2, r7
 8001d58:	4628      	mov	r0, r5
 8001d5a:	6a21      	ldr	r1, [r4, #32]
 8001d5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001d60:	47e0      	blx	ip
 8001d62:	2800      	cmp	r0, #0
 8001d64:	dc06      	bgt.n	8001d74 <__sflush_r+0xf8>
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	e790      	b.n	8001c96 <__sflush_r+0x1a>
 8001d74:	4407      	add	r7, r0
 8001d76:	1a36      	subs	r6, r6, r0
 8001d78:	e7ea      	b.n	8001d50 <__sflush_r+0xd4>
 8001d7a:	bf00      	nop
 8001d7c:	20400001 	.word	0x20400001

08001d80 <_fflush_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	690b      	ldr	r3, [r1, #16]
 8001d84:	4605      	mov	r5, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	b913      	cbnz	r3, 8001d90 <_fflush_r+0x10>
 8001d8a:	2500      	movs	r5, #0
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	bd38      	pop	{r3, r4, r5, pc}
 8001d90:	b118      	cbz	r0, 8001d9a <_fflush_r+0x1a>
 8001d92:	6983      	ldr	r3, [r0, #24]
 8001d94:	b90b      	cbnz	r3, 8001d9a <_fflush_r+0x1a>
 8001d96:	f000 f887 	bl	8001ea8 <__sinit>
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <_fflush_r+0x6c>)
 8001d9c:	429c      	cmp	r4, r3
 8001d9e:	d11b      	bne.n	8001dd8 <_fflush_r+0x58>
 8001da0:	686c      	ldr	r4, [r5, #4]
 8001da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ef      	beq.n	8001d8a <_fflush_r+0xa>
 8001daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001dac:	07d0      	lsls	r0, r2, #31
 8001dae:	d404      	bmi.n	8001dba <_fflush_r+0x3a>
 8001db0:	0599      	lsls	r1, r3, #22
 8001db2:	d402      	bmi.n	8001dba <_fflush_r+0x3a>
 8001db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001db6:	f000 f915 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 8001dba:	4628      	mov	r0, r5
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	f7ff ff5d 	bl	8001c7c <__sflush_r>
 8001dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	07da      	lsls	r2, r3, #31
 8001dc8:	d4e0      	bmi.n	8001d8c <_fflush_r+0xc>
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	059b      	lsls	r3, r3, #22
 8001dce:	d4dd      	bmi.n	8001d8c <_fflush_r+0xc>
 8001dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dd2:	f000 f908 	bl	8001fe6 <__retarget_lock_release_recursive>
 8001dd6:	e7d9      	b.n	8001d8c <_fflush_r+0xc>
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <_fflush_r+0x70>)
 8001dda:	429c      	cmp	r4, r3
 8001ddc:	d101      	bne.n	8001de2 <_fflush_r+0x62>
 8001dde:	68ac      	ldr	r4, [r5, #8]
 8001de0:	e7df      	b.n	8001da2 <_fflush_r+0x22>
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <_fflush_r+0x74>)
 8001de4:	429c      	cmp	r4, r3
 8001de6:	bf08      	it	eq
 8001de8:	68ec      	ldreq	r4, [r5, #12]
 8001dea:	e7da      	b.n	8001da2 <_fflush_r+0x22>
 8001dec:	080028c4 	.word	0x080028c4
 8001df0:	080028e4 	.word	0x080028e4
 8001df4:	080028a4 	.word	0x080028a4

08001df8 <std>:
 8001df8:	2300      	movs	r3, #0
 8001dfa:	b510      	push	{r4, lr}
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8001e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e06:	6083      	str	r3, [r0, #8]
 8001e08:	8181      	strh	r1, [r0, #12]
 8001e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e0c:	81c2      	strh	r2, [r0, #14]
 8001e0e:	6183      	str	r3, [r0, #24]
 8001e10:	4619      	mov	r1, r3
 8001e12:	2208      	movs	r2, #8
 8001e14:	305c      	adds	r0, #92	; 0x5c
 8001e16:	f7ff fcef 	bl	80017f8 <memset>
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <std+0x38>)
 8001e1c:	6224      	str	r4, [r4, #32]
 8001e1e:	6263      	str	r3, [r4, #36]	; 0x24
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <std+0x3c>)
 8001e22:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <std+0x40>)
 8001e26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <std+0x44>)
 8001e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	bf00      	nop
 8001e30:	080026a9 	.word	0x080026a9
 8001e34:	080026cb 	.word	0x080026cb
 8001e38:	08002703 	.word	0x08002703
 8001e3c:	08002727 	.word	0x08002727

08001e40 <_cleanup_r>:
 8001e40:	4901      	ldr	r1, [pc, #4]	; (8001e48 <_cleanup_r+0x8>)
 8001e42:	f000 b8af 	b.w	8001fa4 <_fwalk_reent>
 8001e46:	bf00      	nop
 8001e48:	08001d81 	.word	0x08001d81

08001e4c <__sfmoreglue>:
 8001e4c:	2268      	movs	r2, #104	; 0x68
 8001e4e:	b570      	push	{r4, r5, r6, lr}
 8001e50:	1e4d      	subs	r5, r1, #1
 8001e52:	4355      	muls	r5, r2
 8001e54:	460e      	mov	r6, r1
 8001e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e5a:	f7ff fd3d 	bl	80018d8 <_malloc_r>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	b140      	cbz	r0, 8001e74 <__sfmoreglue+0x28>
 8001e62:	2100      	movs	r1, #0
 8001e64:	e9c0 1600 	strd	r1, r6, [r0]
 8001e68:	300c      	adds	r0, #12
 8001e6a:	60a0      	str	r0, [r4, #8]
 8001e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e70:	f7ff fcc2 	bl	80017f8 <memset>
 8001e74:	4620      	mov	r0, r4
 8001e76:	bd70      	pop	{r4, r5, r6, pc}

08001e78 <__sfp_lock_acquire>:
 8001e78:	4801      	ldr	r0, [pc, #4]	; (8001e80 <__sfp_lock_acquire+0x8>)
 8001e7a:	f000 b8b3 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 8001e7e:	bf00      	nop
 8001e80:	200000e5 	.word	0x200000e5

08001e84 <__sfp_lock_release>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__sfp_lock_release+0x8>)
 8001e86:	f000 b8ae 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	200000e5 	.word	0x200000e5

08001e90 <__sinit_lock_acquire>:
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <__sinit_lock_acquire+0x8>)
 8001e92:	f000 b8a7 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 8001e96:	bf00      	nop
 8001e98:	200000e6 	.word	0x200000e6

08001e9c <__sinit_lock_release>:
 8001e9c:	4801      	ldr	r0, [pc, #4]	; (8001ea4 <__sinit_lock_release+0x8>)
 8001e9e:	f000 b8a2 	b.w	8001fe6 <__retarget_lock_release_recursive>
 8001ea2:	bf00      	nop
 8001ea4:	200000e6 	.word	0x200000e6

08001ea8 <__sinit>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	4604      	mov	r4, r0
 8001eac:	f7ff fff0 	bl	8001e90 <__sinit_lock_acquire>
 8001eb0:	69a3      	ldr	r3, [r4, #24]
 8001eb2:	b11b      	cbz	r3, 8001ebc <__sinit+0x14>
 8001eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001eb8:	f7ff bff0 	b.w	8001e9c <__sinit_lock_release>
 8001ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <__sinit+0x68>)
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <__sinit+0x6c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8001eca:	42a3      	cmp	r3, r4
 8001ecc:	bf08      	it	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	bf08      	it	eq
 8001ed4:	61a3      	streq	r3, [r4, #24]
 8001ed6:	f000 f81f 	bl	8001f18 <__sfp>
 8001eda:	6060      	str	r0, [r4, #4]
 8001edc:	4620      	mov	r0, r4
 8001ede:	f000 f81b 	bl	8001f18 <__sfp>
 8001ee2:	60a0      	str	r0, [r4, #8]
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f000 f817 	bl	8001f18 <__sfp>
 8001eea:	2200      	movs	r2, #0
 8001eec:	2104      	movs	r1, #4
 8001eee:	60e0      	str	r0, [r4, #12]
 8001ef0:	6860      	ldr	r0, [r4, #4]
 8001ef2:	f7ff ff81 	bl	8001df8 <std>
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2109      	movs	r1, #9
 8001efa:	68a0      	ldr	r0, [r4, #8]
 8001efc:	f7ff ff7c 	bl	8001df8 <std>
 8001f00:	2202      	movs	r2, #2
 8001f02:	2112      	movs	r1, #18
 8001f04:	68e0      	ldr	r0, [r4, #12]
 8001f06:	f7ff ff77 	bl	8001df8 <std>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61a3      	str	r3, [r4, #24]
 8001f0e:	e7d1      	b.n	8001eb4 <__sinit+0xc>
 8001f10:	080028a0 	.word	0x080028a0
 8001f14:	08001e41 	.word	0x08001e41

08001f18 <__sfp>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	4607      	mov	r7, r0
 8001f1c:	f7ff ffac 	bl	8001e78 <__sfp_lock_acquire>
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <__sfp+0x84>)
 8001f22:	681e      	ldr	r6, [r3, #0]
 8001f24:	69b3      	ldr	r3, [r6, #24]
 8001f26:	b913      	cbnz	r3, 8001f2e <__sfp+0x16>
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f7ff ffbd 	bl	8001ea8 <__sinit>
 8001f2e:	3648      	adds	r6, #72	; 0x48
 8001f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	d503      	bpl.n	8001f40 <__sfp+0x28>
 8001f38:	6833      	ldr	r3, [r6, #0]
 8001f3a:	b30b      	cbz	r3, 8001f80 <__sfp+0x68>
 8001f3c:	6836      	ldr	r6, [r6, #0]
 8001f3e:	e7f7      	b.n	8001f30 <__sfp+0x18>
 8001f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f44:	b9d5      	cbnz	r5, 8001f7c <__sfp+0x64>
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <__sfp+0x88>)
 8001f48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f4c:	60e3      	str	r3, [r4, #12]
 8001f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f50:	f000 f847 	bl	8001fe2 <__retarget_lock_init_recursive>
 8001f54:	f7ff ff96 	bl	8001e84 <__sfp_lock_release>
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f64:	6025      	str	r5, [r4, #0]
 8001f66:	61a5      	str	r5, [r4, #24]
 8001f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f6c:	f7ff fc44 	bl	80017f8 <memset>
 8001f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f78:	4620      	mov	r0, r4
 8001f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f7c:	3468      	adds	r4, #104	; 0x68
 8001f7e:	e7d9      	b.n	8001f34 <__sfp+0x1c>
 8001f80:	2104      	movs	r1, #4
 8001f82:	4638      	mov	r0, r7
 8001f84:	f7ff ff62 	bl	8001e4c <__sfmoreglue>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	6030      	str	r0, [r6, #0]
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d1d5      	bne.n	8001f3c <__sfp+0x24>
 8001f90:	f7ff ff78 	bl	8001e84 <__sfp_lock_release>
 8001f94:	230c      	movs	r3, #12
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	e7ee      	b.n	8001f78 <__sfp+0x60>
 8001f9a:	bf00      	nop
 8001f9c:	080028a0 	.word	0x080028a0
 8001fa0:	ffff0001 	.word	0xffff0001

08001fa4 <_fwalk_reent>:
 8001fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	4606      	mov	r6, r0
 8001faa:	4688      	mov	r8, r1
 8001fac:	2700      	movs	r7, #0
 8001fae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8001fba:	d505      	bpl.n	8001fc8 <_fwalk_reent+0x24>
 8001fbc:	6824      	ldr	r4, [r4, #0]
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d1f7      	bne.n	8001fb2 <_fwalk_reent+0xe>
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fc8:	89ab      	ldrh	r3, [r5, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d907      	bls.n	8001fde <_fwalk_reent+0x3a>
 8001fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	d003      	beq.n	8001fde <_fwalk_reent+0x3a>
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	4630      	mov	r0, r6
 8001fda:	47c0      	blx	r8
 8001fdc:	4307      	orrs	r7, r0
 8001fde:	3568      	adds	r5, #104	; 0x68
 8001fe0:	e7e9      	b.n	8001fb6 <_fwalk_reent+0x12>

08001fe2 <__retarget_lock_init_recursive>:
 8001fe2:	4770      	bx	lr

08001fe4 <__retarget_lock_acquire_recursive>:
 8001fe4:	4770      	bx	lr

08001fe6 <__retarget_lock_release_recursive>:
 8001fe6:	4770      	bx	lr

08001fe8 <__swhatbuf_r>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	460e      	mov	r6, r1
 8001fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff0:	4614      	mov	r4, r2
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	461d      	mov	r5, r3
 8001ff6:	b096      	sub	sp, #88	; 0x58
 8001ff8:	da08      	bge.n	800200c <__swhatbuf_r+0x24>
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002000:	602a      	str	r2, [r5, #0]
 8002002:	061a      	lsls	r2, r3, #24
 8002004:	d410      	bmi.n	8002028 <__swhatbuf_r+0x40>
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	e00e      	b.n	800202a <__swhatbuf_r+0x42>
 800200c:	466a      	mov	r2, sp
 800200e:	f000 fbb1 	bl	8002774 <_fstat_r>
 8002012:	2800      	cmp	r0, #0
 8002014:	dbf1      	blt.n	8001ffa <__swhatbuf_r+0x12>
 8002016:	9a01      	ldr	r2, [sp, #4]
 8002018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800201c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002020:	425a      	negs	r2, r3
 8002022:	415a      	adcs	r2, r3
 8002024:	602a      	str	r2, [r5, #0]
 8002026:	e7ee      	b.n	8002006 <__swhatbuf_r+0x1e>
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	2000      	movs	r0, #0
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	b016      	add	sp, #88	; 0x58
 8002030:	bd70      	pop	{r4, r5, r6, pc}
	...

08002034 <__smakebuf_r>:
 8002034:	898b      	ldrh	r3, [r1, #12]
 8002036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002038:	079d      	lsls	r5, r3, #30
 800203a:	4606      	mov	r6, r0
 800203c:	460c      	mov	r4, r1
 800203e:	d507      	bpl.n	8002050 <__smakebuf_r+0x1c>
 8002040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	6123      	str	r3, [r4, #16]
 8002048:	2301      	movs	r3, #1
 800204a:	6163      	str	r3, [r4, #20]
 800204c:	b002      	add	sp, #8
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	466a      	mov	r2, sp
 8002052:	ab01      	add	r3, sp, #4
 8002054:	f7ff ffc8 	bl	8001fe8 <__swhatbuf_r>
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	4605      	mov	r5, r0
 800205c:	4630      	mov	r0, r6
 800205e:	f7ff fc3b 	bl	80018d8 <_malloc_r>
 8002062:	b948      	cbnz	r0, 8002078 <__smakebuf_r+0x44>
 8002064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002068:	059a      	lsls	r2, r3, #22
 800206a:	d4ef      	bmi.n	800204c <__smakebuf_r+0x18>
 800206c:	f023 0303 	bic.w	r3, r3, #3
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	e7e3      	b.n	8002040 <__smakebuf_r+0xc>
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <__smakebuf_r+0x7c>)
 800207a:	62b3      	str	r3, [r6, #40]	; 0x28
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	6020      	str	r0, [r4, #0]
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	81a3      	strh	r3, [r4, #12]
 8002086:	9b00      	ldr	r3, [sp, #0]
 8002088:	6120      	str	r0, [r4, #16]
 800208a:	6163      	str	r3, [r4, #20]
 800208c:	9b01      	ldr	r3, [sp, #4]
 800208e:	b15b      	cbz	r3, 80020a8 <__smakebuf_r+0x74>
 8002090:	4630      	mov	r0, r6
 8002092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002096:	f000 fb7f 	bl	8002798 <_isatty_r>
 800209a:	b128      	cbz	r0, 80020a8 <__smakebuf_r+0x74>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	89a0      	ldrh	r0, [r4, #12]
 80020aa:	4305      	orrs	r5, r0
 80020ac:	81a5      	strh	r5, [r4, #12]
 80020ae:	e7cd      	b.n	800204c <__smakebuf_r+0x18>
 80020b0:	08001e41 	.word	0x08001e41

080020b4 <__malloc_lock>:
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <__malloc_lock+0x8>)
 80020b6:	f7ff bf95 	b.w	8001fe4 <__retarget_lock_acquire_recursive>
 80020ba:	bf00      	nop
 80020bc:	200000e4 	.word	0x200000e4

080020c0 <__malloc_unlock>:
 80020c0:	4801      	ldr	r0, [pc, #4]	; (80020c8 <__malloc_unlock+0x8>)
 80020c2:	f7ff bf90 	b.w	8001fe6 <__retarget_lock_release_recursive>
 80020c6:	bf00      	nop
 80020c8:	200000e4 	.word	0x200000e4

080020cc <__sfputc_r>:
 80020cc:	6893      	ldr	r3, [r2, #8]
 80020ce:	b410      	push	{r4}
 80020d0:	3b01      	subs	r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	da07      	bge.n	80020e8 <__sfputc_r+0x1c>
 80020d8:	6994      	ldr	r4, [r2, #24]
 80020da:	42a3      	cmp	r3, r4
 80020dc:	db01      	blt.n	80020e2 <__sfputc_r+0x16>
 80020de:	290a      	cmp	r1, #10
 80020e0:	d102      	bne.n	80020e8 <__sfputc_r+0x1c>
 80020e2:	bc10      	pop	{r4}
 80020e4:	f7ff bd0a 	b.w	8001afc <__swbuf_r>
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	1c58      	adds	r0, r3, #1
 80020ec:	6010      	str	r0, [r2, #0]
 80020ee:	7019      	strb	r1, [r3, #0]
 80020f0:	4608      	mov	r0, r1
 80020f2:	bc10      	pop	{r4}
 80020f4:	4770      	bx	lr

080020f6 <__sfputs_r>:
 80020f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f8:	4606      	mov	r6, r0
 80020fa:	460f      	mov	r7, r1
 80020fc:	4614      	mov	r4, r2
 80020fe:	18d5      	adds	r5, r2, r3
 8002100:	42ac      	cmp	r4, r5
 8002102:	d101      	bne.n	8002108 <__sfputs_r+0x12>
 8002104:	2000      	movs	r0, #0
 8002106:	e007      	b.n	8002118 <__sfputs_r+0x22>
 8002108:	463a      	mov	r2, r7
 800210a:	4630      	mov	r0, r6
 800210c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002110:	f7ff ffdc 	bl	80020cc <__sfputc_r>
 8002114:	1c43      	adds	r3, r0, #1
 8002116:	d1f3      	bne.n	8002100 <__sfputs_r+0xa>
 8002118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800211c <_vfiprintf_r>:
 800211c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002120:	460d      	mov	r5, r1
 8002122:	4614      	mov	r4, r2
 8002124:	4698      	mov	r8, r3
 8002126:	4606      	mov	r6, r0
 8002128:	b09d      	sub	sp, #116	; 0x74
 800212a:	b118      	cbz	r0, 8002134 <_vfiprintf_r+0x18>
 800212c:	6983      	ldr	r3, [r0, #24]
 800212e:	b90b      	cbnz	r3, 8002134 <_vfiprintf_r+0x18>
 8002130:	f7ff feba 	bl	8001ea8 <__sinit>
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <_vfiprintf_r+0x240>)
 8002136:	429d      	cmp	r5, r3
 8002138:	d11b      	bne.n	8002172 <_vfiprintf_r+0x56>
 800213a:	6875      	ldr	r5, [r6, #4]
 800213c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800213e:	07d9      	lsls	r1, r3, #31
 8002140:	d405      	bmi.n	800214e <_vfiprintf_r+0x32>
 8002142:	89ab      	ldrh	r3, [r5, #12]
 8002144:	059a      	lsls	r2, r3, #22
 8002146:	d402      	bmi.n	800214e <_vfiprintf_r+0x32>
 8002148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800214a:	f7ff ff4b 	bl	8001fe4 <__retarget_lock_acquire_recursive>
 800214e:	89ab      	ldrh	r3, [r5, #12]
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	d501      	bpl.n	8002158 <_vfiprintf_r+0x3c>
 8002154:	692b      	ldr	r3, [r5, #16]
 8002156:	b9eb      	cbnz	r3, 8002194 <_vfiprintf_r+0x78>
 8002158:	4629      	mov	r1, r5
 800215a:	4630      	mov	r0, r6
 800215c:	f7ff fd20 	bl	8001ba0 <__swsetup_r>
 8002160:	b1c0      	cbz	r0, 8002194 <_vfiprintf_r+0x78>
 8002162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002164:	07dc      	lsls	r4, r3, #31
 8002166:	d50e      	bpl.n	8002186 <_vfiprintf_r+0x6a>
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	b01d      	add	sp, #116	; 0x74
 800216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002172:	4b7b      	ldr	r3, [pc, #492]	; (8002360 <_vfiprintf_r+0x244>)
 8002174:	429d      	cmp	r5, r3
 8002176:	d101      	bne.n	800217c <_vfiprintf_r+0x60>
 8002178:	68b5      	ldr	r5, [r6, #8]
 800217a:	e7df      	b.n	800213c <_vfiprintf_r+0x20>
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <_vfiprintf_r+0x248>)
 800217e:	429d      	cmp	r5, r3
 8002180:	bf08      	it	eq
 8002182:	68f5      	ldreq	r5, [r6, #12]
 8002184:	e7da      	b.n	800213c <_vfiprintf_r+0x20>
 8002186:	89ab      	ldrh	r3, [r5, #12]
 8002188:	0598      	lsls	r0, r3, #22
 800218a:	d4ed      	bmi.n	8002168 <_vfiprintf_r+0x4c>
 800218c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800218e:	f7ff ff2a 	bl	8001fe6 <__retarget_lock_release_recursive>
 8002192:	e7e9      	b.n	8002168 <_vfiprintf_r+0x4c>
 8002194:	2300      	movs	r3, #0
 8002196:	9309      	str	r3, [sp, #36]	; 0x24
 8002198:	2320      	movs	r3, #32
 800219a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800219e:	2330      	movs	r3, #48	; 0x30
 80021a0:	f04f 0901 	mov.w	r9, #1
 80021a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80021a8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002368 <_vfiprintf_r+0x24c>
 80021ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021b0:	4623      	mov	r3, r4
 80021b2:	469a      	mov	sl, r3
 80021b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021b8:	b10a      	cbz	r2, 80021be <_vfiprintf_r+0xa2>
 80021ba:	2a25      	cmp	r2, #37	; 0x25
 80021bc:	d1f9      	bne.n	80021b2 <_vfiprintf_r+0x96>
 80021be:	ebba 0b04 	subs.w	fp, sl, r4
 80021c2:	d00b      	beq.n	80021dc <_vfiprintf_r+0xc0>
 80021c4:	465b      	mov	r3, fp
 80021c6:	4622      	mov	r2, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7ff ff93 	bl	80020f6 <__sfputs_r>
 80021d0:	3001      	adds	r0, #1
 80021d2:	f000 80aa 	beq.w	800232a <_vfiprintf_r+0x20e>
 80021d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021d8:	445a      	add	r2, fp
 80021da:	9209      	str	r2, [sp, #36]	; 0x24
 80021dc:	f89a 3000 	ldrb.w	r3, [sl]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a2 	beq.w	800232a <_vfiprintf_r+0x20e>
 80021e6:	2300      	movs	r3, #0
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021f0:	f10a 0a01 	add.w	sl, sl, #1
 80021f4:	9304      	str	r3, [sp, #16]
 80021f6:	9307      	str	r3, [sp, #28]
 80021f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021fc:	931a      	str	r3, [sp, #104]	; 0x68
 80021fe:	4654      	mov	r4, sl
 8002200:	2205      	movs	r2, #5
 8002202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002206:	4858      	ldr	r0, [pc, #352]	; (8002368 <_vfiprintf_r+0x24c>)
 8002208:	f000 fae8 	bl	80027dc <memchr>
 800220c:	9a04      	ldr	r2, [sp, #16]
 800220e:	b9d8      	cbnz	r0, 8002248 <_vfiprintf_r+0x12c>
 8002210:	06d1      	lsls	r1, r2, #27
 8002212:	bf44      	itt	mi
 8002214:	2320      	movmi	r3, #32
 8002216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800221a:	0713      	lsls	r3, r2, #28
 800221c:	bf44      	itt	mi
 800221e:	232b      	movmi	r3, #43	; 0x2b
 8002220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002224:	f89a 3000 	ldrb.w	r3, [sl]
 8002228:	2b2a      	cmp	r3, #42	; 0x2a
 800222a:	d015      	beq.n	8002258 <_vfiprintf_r+0x13c>
 800222c:	4654      	mov	r4, sl
 800222e:	2000      	movs	r0, #0
 8002230:	f04f 0c0a 	mov.w	ip, #10
 8002234:	9a07      	ldr	r2, [sp, #28]
 8002236:	4621      	mov	r1, r4
 8002238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800223c:	3b30      	subs	r3, #48	; 0x30
 800223e:	2b09      	cmp	r3, #9
 8002240:	d94e      	bls.n	80022e0 <_vfiprintf_r+0x1c4>
 8002242:	b1b0      	cbz	r0, 8002272 <_vfiprintf_r+0x156>
 8002244:	9207      	str	r2, [sp, #28]
 8002246:	e014      	b.n	8002272 <_vfiprintf_r+0x156>
 8002248:	eba0 0308 	sub.w	r3, r0, r8
 800224c:	fa09 f303 	lsl.w	r3, r9, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	46a2      	mov	sl, r4
 8002254:	9304      	str	r3, [sp, #16]
 8002256:	e7d2      	b.n	80021fe <_vfiprintf_r+0xe2>
 8002258:	9b03      	ldr	r3, [sp, #12]
 800225a:	1d19      	adds	r1, r3, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	9103      	str	r1, [sp, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	bfbb      	ittet	lt
 8002264:	425b      	neglt	r3, r3
 8002266:	f042 0202 	orrlt.w	r2, r2, #2
 800226a:	9307      	strge	r3, [sp, #28]
 800226c:	9307      	strlt	r3, [sp, #28]
 800226e:	bfb8      	it	lt
 8002270:	9204      	strlt	r2, [sp, #16]
 8002272:	7823      	ldrb	r3, [r4, #0]
 8002274:	2b2e      	cmp	r3, #46	; 0x2e
 8002276:	d10c      	bne.n	8002292 <_vfiprintf_r+0x176>
 8002278:	7863      	ldrb	r3, [r4, #1]
 800227a:	2b2a      	cmp	r3, #42	; 0x2a
 800227c:	d135      	bne.n	80022ea <_vfiprintf_r+0x1ce>
 800227e:	9b03      	ldr	r3, [sp, #12]
 8002280:	3402      	adds	r4, #2
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	9203      	str	r2, [sp, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	bfb8      	it	lt
 800228c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002290:	9305      	str	r3, [sp, #20]
 8002292:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800236c <_vfiprintf_r+0x250>
 8002296:	2203      	movs	r2, #3
 8002298:	4650      	mov	r0, sl
 800229a:	7821      	ldrb	r1, [r4, #0]
 800229c:	f000 fa9e 	bl	80027dc <memchr>
 80022a0:	b140      	cbz	r0, 80022b4 <_vfiprintf_r+0x198>
 80022a2:	2340      	movs	r3, #64	; 0x40
 80022a4:	eba0 000a 	sub.w	r0, r0, sl
 80022a8:	fa03 f000 	lsl.w	r0, r3, r0
 80022ac:	9b04      	ldr	r3, [sp, #16]
 80022ae:	3401      	adds	r4, #1
 80022b0:	4303      	orrs	r3, r0
 80022b2:	9304      	str	r3, [sp, #16]
 80022b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022b8:	2206      	movs	r2, #6
 80022ba:	482d      	ldr	r0, [pc, #180]	; (8002370 <_vfiprintf_r+0x254>)
 80022bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022c0:	f000 fa8c 	bl	80027dc <memchr>
 80022c4:	2800      	cmp	r0, #0
 80022c6:	d03f      	beq.n	8002348 <_vfiprintf_r+0x22c>
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <_vfiprintf_r+0x258>)
 80022ca:	bb1b      	cbnz	r3, 8002314 <_vfiprintf_r+0x1f8>
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	3307      	adds	r3, #7
 80022d0:	f023 0307 	bic.w	r3, r3, #7
 80022d4:	3308      	adds	r3, #8
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022da:	443b      	add	r3, r7
 80022dc:	9309      	str	r3, [sp, #36]	; 0x24
 80022de:	e767      	b.n	80021b0 <_vfiprintf_r+0x94>
 80022e0:	460c      	mov	r4, r1
 80022e2:	2001      	movs	r0, #1
 80022e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80022e8:	e7a5      	b.n	8002236 <_vfiprintf_r+0x11a>
 80022ea:	2300      	movs	r3, #0
 80022ec:	f04f 0c0a 	mov.w	ip, #10
 80022f0:	4619      	mov	r1, r3
 80022f2:	3401      	adds	r4, #1
 80022f4:	9305      	str	r3, [sp, #20]
 80022f6:	4620      	mov	r0, r4
 80022f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022fc:	3a30      	subs	r2, #48	; 0x30
 80022fe:	2a09      	cmp	r2, #9
 8002300:	d903      	bls.n	800230a <_vfiprintf_r+0x1ee>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0c5      	beq.n	8002292 <_vfiprintf_r+0x176>
 8002306:	9105      	str	r1, [sp, #20]
 8002308:	e7c3      	b.n	8002292 <_vfiprintf_r+0x176>
 800230a:	4604      	mov	r4, r0
 800230c:	2301      	movs	r3, #1
 800230e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002312:	e7f0      	b.n	80022f6 <_vfiprintf_r+0x1da>
 8002314:	ab03      	add	r3, sp, #12
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	462a      	mov	r2, r5
 800231a:	4630      	mov	r0, r6
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <_vfiprintf_r+0x25c>)
 800231e:	a904      	add	r1, sp, #16
 8002320:	f3af 8000 	nop.w
 8002324:	4607      	mov	r7, r0
 8002326:	1c78      	adds	r0, r7, #1
 8002328:	d1d6      	bne.n	80022d8 <_vfiprintf_r+0x1bc>
 800232a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800232c:	07d9      	lsls	r1, r3, #31
 800232e:	d405      	bmi.n	800233c <_vfiprintf_r+0x220>
 8002330:	89ab      	ldrh	r3, [r5, #12]
 8002332:	059a      	lsls	r2, r3, #22
 8002334:	d402      	bmi.n	800233c <_vfiprintf_r+0x220>
 8002336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002338:	f7ff fe55 	bl	8001fe6 <__retarget_lock_release_recursive>
 800233c:	89ab      	ldrh	r3, [r5, #12]
 800233e:	065b      	lsls	r3, r3, #25
 8002340:	f53f af12 	bmi.w	8002168 <_vfiprintf_r+0x4c>
 8002344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002346:	e711      	b.n	800216c <_vfiprintf_r+0x50>
 8002348:	ab03      	add	r3, sp, #12
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	462a      	mov	r2, r5
 800234e:	4630      	mov	r0, r6
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <_vfiprintf_r+0x25c>)
 8002352:	a904      	add	r1, sp, #16
 8002354:	f000 f882 	bl	800245c <_printf_i>
 8002358:	e7e4      	b.n	8002324 <_vfiprintf_r+0x208>
 800235a:	bf00      	nop
 800235c:	080028c4 	.word	0x080028c4
 8002360:	080028e4 	.word	0x080028e4
 8002364:	080028a4 	.word	0x080028a4
 8002368:	08002904 	.word	0x08002904
 800236c:	0800290a 	.word	0x0800290a
 8002370:	0800290e 	.word	0x0800290e
 8002374:	00000000 	.word	0x00000000
 8002378:	080020f7 	.word	0x080020f7

0800237c <_printf_common>:
 800237c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002380:	4616      	mov	r6, r2
 8002382:	4699      	mov	r9, r3
 8002384:	688a      	ldr	r2, [r1, #8]
 8002386:	690b      	ldr	r3, [r1, #16]
 8002388:	4607      	mov	r7, r0
 800238a:	4293      	cmp	r3, r2
 800238c:	bfb8      	it	lt
 800238e:	4613      	movlt	r3, r2
 8002390:	6033      	str	r3, [r6, #0]
 8002392:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002396:	460c      	mov	r4, r1
 8002398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800239c:	b10a      	cbz	r2, 80023a2 <_printf_common+0x26>
 800239e:	3301      	adds	r3, #1
 80023a0:	6033      	str	r3, [r6, #0]
 80023a2:	6823      	ldr	r3, [r4, #0]
 80023a4:	0699      	lsls	r1, r3, #26
 80023a6:	bf42      	ittt	mi
 80023a8:	6833      	ldrmi	r3, [r6, #0]
 80023aa:	3302      	addmi	r3, #2
 80023ac:	6033      	strmi	r3, [r6, #0]
 80023ae:	6825      	ldr	r5, [r4, #0]
 80023b0:	f015 0506 	ands.w	r5, r5, #6
 80023b4:	d106      	bne.n	80023c4 <_printf_common+0x48>
 80023b6:	f104 0a19 	add.w	sl, r4, #25
 80023ba:	68e3      	ldr	r3, [r4, #12]
 80023bc:	6832      	ldr	r2, [r6, #0]
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	42ab      	cmp	r3, r5
 80023c2:	dc28      	bgt.n	8002416 <_printf_common+0x9a>
 80023c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023c8:	1e13      	subs	r3, r2, #0
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	bf18      	it	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	0692      	lsls	r2, r2, #26
 80023d2:	d42d      	bmi.n	8002430 <_printf_common+0xb4>
 80023d4:	4649      	mov	r1, r9
 80023d6:	4638      	mov	r0, r7
 80023d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023dc:	47c0      	blx	r8
 80023de:	3001      	adds	r0, #1
 80023e0:	d020      	beq.n	8002424 <_printf_common+0xa8>
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	68e5      	ldr	r5, [r4, #12]
 80023e6:	f003 0306 	and.w	r3, r3, #6
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf18      	it	ne
 80023ee:	2500      	movne	r5, #0
 80023f0:	6832      	ldr	r2, [r6, #0]
 80023f2:	f04f 0600 	mov.w	r6, #0
 80023f6:	68a3      	ldr	r3, [r4, #8]
 80023f8:	bf08      	it	eq
 80023fa:	1aad      	subeq	r5, r5, r2
 80023fc:	6922      	ldr	r2, [r4, #16]
 80023fe:	bf08      	it	eq
 8002400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002404:	4293      	cmp	r3, r2
 8002406:	bfc4      	itt	gt
 8002408:	1a9b      	subgt	r3, r3, r2
 800240a:	18ed      	addgt	r5, r5, r3
 800240c:	341a      	adds	r4, #26
 800240e:	42b5      	cmp	r5, r6
 8002410:	d11a      	bne.n	8002448 <_printf_common+0xcc>
 8002412:	2000      	movs	r0, #0
 8002414:	e008      	b.n	8002428 <_printf_common+0xac>
 8002416:	2301      	movs	r3, #1
 8002418:	4652      	mov	r2, sl
 800241a:	4649      	mov	r1, r9
 800241c:	4638      	mov	r0, r7
 800241e:	47c0      	blx	r8
 8002420:	3001      	adds	r0, #1
 8002422:	d103      	bne.n	800242c <_printf_common+0xb0>
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800242c:	3501      	adds	r5, #1
 800242e:	e7c4      	b.n	80023ba <_printf_common+0x3e>
 8002430:	2030      	movs	r0, #48	; 0x30
 8002432:	18e1      	adds	r1, r4, r3
 8002434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800243e:	4422      	add	r2, r4
 8002440:	3302      	adds	r3, #2
 8002442:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002446:	e7c5      	b.n	80023d4 <_printf_common+0x58>
 8002448:	2301      	movs	r3, #1
 800244a:	4622      	mov	r2, r4
 800244c:	4649      	mov	r1, r9
 800244e:	4638      	mov	r0, r7
 8002450:	47c0      	blx	r8
 8002452:	3001      	adds	r0, #1
 8002454:	d0e6      	beq.n	8002424 <_printf_common+0xa8>
 8002456:	3601      	adds	r6, #1
 8002458:	e7d9      	b.n	800240e <_printf_common+0x92>
	...

0800245c <_printf_i>:
 800245c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002460:	7e0f      	ldrb	r7, [r1, #24]
 8002462:	4691      	mov	r9, r2
 8002464:	2f78      	cmp	r7, #120	; 0x78
 8002466:	4680      	mov	r8, r0
 8002468:	460c      	mov	r4, r1
 800246a:	469a      	mov	sl, r3
 800246c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800246e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002472:	d807      	bhi.n	8002484 <_printf_i+0x28>
 8002474:	2f62      	cmp	r7, #98	; 0x62
 8002476:	d80a      	bhi.n	800248e <_printf_i+0x32>
 8002478:	2f00      	cmp	r7, #0
 800247a:	f000 80d9 	beq.w	8002630 <_printf_i+0x1d4>
 800247e:	2f58      	cmp	r7, #88	; 0x58
 8002480:	f000 80a4 	beq.w	80025cc <_printf_i+0x170>
 8002484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800248c:	e03a      	b.n	8002504 <_printf_i+0xa8>
 800248e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002492:	2b15      	cmp	r3, #21
 8002494:	d8f6      	bhi.n	8002484 <_printf_i+0x28>
 8002496:	a101      	add	r1, pc, #4	; (adr r1, 800249c <_printf_i+0x40>)
 8002498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	08002509 	.word	0x08002509
 80024a4:	08002485 	.word	0x08002485
 80024a8:	08002485 	.word	0x08002485
 80024ac:	08002485 	.word	0x08002485
 80024b0:	08002485 	.word	0x08002485
 80024b4:	08002509 	.word	0x08002509
 80024b8:	08002485 	.word	0x08002485
 80024bc:	08002485 	.word	0x08002485
 80024c0:	08002485 	.word	0x08002485
 80024c4:	08002485 	.word	0x08002485
 80024c8:	08002617 	.word	0x08002617
 80024cc:	08002539 	.word	0x08002539
 80024d0:	080025f9 	.word	0x080025f9
 80024d4:	08002485 	.word	0x08002485
 80024d8:	08002485 	.word	0x08002485
 80024dc:	08002639 	.word	0x08002639
 80024e0:	08002485 	.word	0x08002485
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002485 	.word	0x08002485
 80024ec:	08002485 	.word	0x08002485
 80024f0:	08002601 	.word	0x08002601
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	1d1a      	adds	r2, r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	602a      	str	r2, [r5, #0]
 80024fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002504:	2301      	movs	r3, #1
 8002506:	e0a4      	b.n	8002652 <_printf_i+0x1f6>
 8002508:	6820      	ldr	r0, [r4, #0]
 800250a:	6829      	ldr	r1, [r5, #0]
 800250c:	0606      	lsls	r6, r0, #24
 800250e:	f101 0304 	add.w	r3, r1, #4
 8002512:	d50a      	bpl.n	800252a <_printf_i+0xce>
 8002514:	680e      	ldr	r6, [r1, #0]
 8002516:	602b      	str	r3, [r5, #0]
 8002518:	2e00      	cmp	r6, #0
 800251a:	da03      	bge.n	8002524 <_printf_i+0xc8>
 800251c:	232d      	movs	r3, #45	; 0x2d
 800251e:	4276      	negs	r6, r6
 8002520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002524:	230a      	movs	r3, #10
 8002526:	485e      	ldr	r0, [pc, #376]	; (80026a0 <_printf_i+0x244>)
 8002528:	e019      	b.n	800255e <_printf_i+0x102>
 800252a:	680e      	ldr	r6, [r1, #0]
 800252c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002530:	602b      	str	r3, [r5, #0]
 8002532:	bf18      	it	ne
 8002534:	b236      	sxthne	r6, r6
 8002536:	e7ef      	b.n	8002518 <_printf_i+0xbc>
 8002538:	682b      	ldr	r3, [r5, #0]
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	1d19      	adds	r1, r3, #4
 800253e:	6029      	str	r1, [r5, #0]
 8002540:	0601      	lsls	r1, r0, #24
 8002542:	d501      	bpl.n	8002548 <_printf_i+0xec>
 8002544:	681e      	ldr	r6, [r3, #0]
 8002546:	e002      	b.n	800254e <_printf_i+0xf2>
 8002548:	0646      	lsls	r6, r0, #25
 800254a:	d5fb      	bpl.n	8002544 <_printf_i+0xe8>
 800254c:	881e      	ldrh	r6, [r3, #0]
 800254e:	2f6f      	cmp	r7, #111	; 0x6f
 8002550:	bf0c      	ite	eq
 8002552:	2308      	moveq	r3, #8
 8002554:	230a      	movne	r3, #10
 8002556:	4852      	ldr	r0, [pc, #328]	; (80026a0 <_printf_i+0x244>)
 8002558:	2100      	movs	r1, #0
 800255a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800255e:	6865      	ldr	r5, [r4, #4]
 8002560:	2d00      	cmp	r5, #0
 8002562:	bfa8      	it	ge
 8002564:	6821      	ldrge	r1, [r4, #0]
 8002566:	60a5      	str	r5, [r4, #8]
 8002568:	bfa4      	itt	ge
 800256a:	f021 0104 	bicge.w	r1, r1, #4
 800256e:	6021      	strge	r1, [r4, #0]
 8002570:	b90e      	cbnz	r6, 8002576 <_printf_i+0x11a>
 8002572:	2d00      	cmp	r5, #0
 8002574:	d04d      	beq.n	8002612 <_printf_i+0x1b6>
 8002576:	4615      	mov	r5, r2
 8002578:	fbb6 f1f3 	udiv	r1, r6, r3
 800257c:	fb03 6711 	mls	r7, r3, r1, r6
 8002580:	5dc7      	ldrb	r7, [r0, r7]
 8002582:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002586:	4637      	mov	r7, r6
 8002588:	42bb      	cmp	r3, r7
 800258a:	460e      	mov	r6, r1
 800258c:	d9f4      	bls.n	8002578 <_printf_i+0x11c>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d10b      	bne.n	80025aa <_printf_i+0x14e>
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	07de      	lsls	r6, r3, #31
 8002596:	d508      	bpl.n	80025aa <_printf_i+0x14e>
 8002598:	6923      	ldr	r3, [r4, #16]
 800259a:	6861      	ldr	r1, [r4, #4]
 800259c:	4299      	cmp	r1, r3
 800259e:	bfde      	ittt	le
 80025a0:	2330      	movle	r3, #48	; 0x30
 80025a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025aa:	1b52      	subs	r2, r2, r5
 80025ac:	6122      	str	r2, [r4, #16]
 80025ae:	464b      	mov	r3, r9
 80025b0:	4621      	mov	r1, r4
 80025b2:	4640      	mov	r0, r8
 80025b4:	f8cd a000 	str.w	sl, [sp]
 80025b8:	aa03      	add	r2, sp, #12
 80025ba:	f7ff fedf 	bl	800237c <_printf_common>
 80025be:	3001      	adds	r0, #1
 80025c0:	d14c      	bne.n	800265c <_printf_i+0x200>
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295
 80025c6:	b004      	add	sp, #16
 80025c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025cc:	4834      	ldr	r0, [pc, #208]	; (80026a0 <_printf_i+0x244>)
 80025ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025d2:	6829      	ldr	r1, [r5, #0]
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	f851 6b04 	ldr.w	r6, [r1], #4
 80025da:	6029      	str	r1, [r5, #0]
 80025dc:	061d      	lsls	r5, r3, #24
 80025de:	d514      	bpl.n	800260a <_printf_i+0x1ae>
 80025e0:	07df      	lsls	r7, r3, #31
 80025e2:	bf44      	itt	mi
 80025e4:	f043 0320 	orrmi.w	r3, r3, #32
 80025e8:	6023      	strmi	r3, [r4, #0]
 80025ea:	b91e      	cbnz	r6, 80025f4 <_printf_i+0x198>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	f023 0320 	bic.w	r3, r3, #32
 80025f2:	6023      	str	r3, [r4, #0]
 80025f4:	2310      	movs	r3, #16
 80025f6:	e7af      	b.n	8002558 <_printf_i+0xfc>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	f043 0320 	orr.w	r3, r3, #32
 80025fe:	6023      	str	r3, [r4, #0]
 8002600:	2378      	movs	r3, #120	; 0x78
 8002602:	4828      	ldr	r0, [pc, #160]	; (80026a4 <_printf_i+0x248>)
 8002604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002608:	e7e3      	b.n	80025d2 <_printf_i+0x176>
 800260a:	0659      	lsls	r1, r3, #25
 800260c:	bf48      	it	mi
 800260e:	b2b6      	uxthmi	r6, r6
 8002610:	e7e6      	b.n	80025e0 <_printf_i+0x184>
 8002612:	4615      	mov	r5, r2
 8002614:	e7bb      	b.n	800258e <_printf_i+0x132>
 8002616:	682b      	ldr	r3, [r5, #0]
 8002618:	6826      	ldr	r6, [r4, #0]
 800261a:	1d18      	adds	r0, r3, #4
 800261c:	6961      	ldr	r1, [r4, #20]
 800261e:	6028      	str	r0, [r5, #0]
 8002620:	0635      	lsls	r5, r6, #24
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	d501      	bpl.n	800262a <_printf_i+0x1ce>
 8002626:	6019      	str	r1, [r3, #0]
 8002628:	e002      	b.n	8002630 <_printf_i+0x1d4>
 800262a:	0670      	lsls	r0, r6, #25
 800262c:	d5fb      	bpl.n	8002626 <_printf_i+0x1ca>
 800262e:	8019      	strh	r1, [r3, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	4615      	mov	r5, r2
 8002634:	6123      	str	r3, [r4, #16]
 8002636:	e7ba      	b.n	80025ae <_printf_i+0x152>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	2100      	movs	r1, #0
 800263c:	1d1a      	adds	r2, r3, #4
 800263e:	602a      	str	r2, [r5, #0]
 8002640:	681d      	ldr	r5, [r3, #0]
 8002642:	6862      	ldr	r2, [r4, #4]
 8002644:	4628      	mov	r0, r5
 8002646:	f000 f8c9 	bl	80027dc <memchr>
 800264a:	b108      	cbz	r0, 8002650 <_printf_i+0x1f4>
 800264c:	1b40      	subs	r0, r0, r5
 800264e:	6060      	str	r0, [r4, #4]
 8002650:	6863      	ldr	r3, [r4, #4]
 8002652:	6123      	str	r3, [r4, #16]
 8002654:	2300      	movs	r3, #0
 8002656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800265a:	e7a8      	b.n	80025ae <_printf_i+0x152>
 800265c:	462a      	mov	r2, r5
 800265e:	4649      	mov	r1, r9
 8002660:	4640      	mov	r0, r8
 8002662:	6923      	ldr	r3, [r4, #16]
 8002664:	47d0      	blx	sl
 8002666:	3001      	adds	r0, #1
 8002668:	d0ab      	beq.n	80025c2 <_printf_i+0x166>
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	079b      	lsls	r3, r3, #30
 800266e:	d413      	bmi.n	8002698 <_printf_i+0x23c>
 8002670:	68e0      	ldr	r0, [r4, #12]
 8002672:	9b03      	ldr	r3, [sp, #12]
 8002674:	4298      	cmp	r0, r3
 8002676:	bfb8      	it	lt
 8002678:	4618      	movlt	r0, r3
 800267a:	e7a4      	b.n	80025c6 <_printf_i+0x16a>
 800267c:	2301      	movs	r3, #1
 800267e:	4632      	mov	r2, r6
 8002680:	4649      	mov	r1, r9
 8002682:	4640      	mov	r0, r8
 8002684:	47d0      	blx	sl
 8002686:	3001      	adds	r0, #1
 8002688:	d09b      	beq.n	80025c2 <_printf_i+0x166>
 800268a:	3501      	adds	r5, #1
 800268c:	68e3      	ldr	r3, [r4, #12]
 800268e:	9903      	ldr	r1, [sp, #12]
 8002690:	1a5b      	subs	r3, r3, r1
 8002692:	42ab      	cmp	r3, r5
 8002694:	dcf2      	bgt.n	800267c <_printf_i+0x220>
 8002696:	e7eb      	b.n	8002670 <_printf_i+0x214>
 8002698:	2500      	movs	r5, #0
 800269a:	f104 0619 	add.w	r6, r4, #25
 800269e:	e7f5      	b.n	800268c <_printf_i+0x230>
 80026a0:	08002915 	.word	0x08002915
 80026a4:	08002926 	.word	0x08002926

080026a8 <__sread>:
 80026a8:	b510      	push	{r4, lr}
 80026aa:	460c      	mov	r4, r1
 80026ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b0:	f000 f8a2 	bl	80027f8 <_read_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bfab      	itete	ge
 80026b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026ba:	89a3      	ldrhlt	r3, [r4, #12]
 80026bc:	181b      	addge	r3, r3, r0
 80026be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026c2:	bfac      	ite	ge
 80026c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80026c6:	81a3      	strhlt	r3, [r4, #12]
 80026c8:	bd10      	pop	{r4, pc}

080026ca <__swrite>:
 80026ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026ce:	461f      	mov	r7, r3
 80026d0:	898b      	ldrh	r3, [r1, #12]
 80026d2:	4605      	mov	r5, r0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	460c      	mov	r4, r1
 80026d8:	4616      	mov	r6, r2
 80026da:	d505      	bpl.n	80026e8 <__swrite+0x1e>
 80026dc:	2302      	movs	r3, #2
 80026de:	2200      	movs	r2, #0
 80026e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e4:	f000 f868 	bl	80027b8 <_lseek_r>
 80026e8:	89a3      	ldrh	r3, [r4, #12]
 80026ea:	4632      	mov	r2, r6
 80026ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f0:	81a3      	strh	r3, [r4, #12]
 80026f2:	4628      	mov	r0, r5
 80026f4:	463b      	mov	r3, r7
 80026f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026fe:	f000 b817 	b.w	8002730 <_write_r>

08002702 <__sseek>:
 8002702:	b510      	push	{r4, lr}
 8002704:	460c      	mov	r4, r1
 8002706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270a:	f000 f855 	bl	80027b8 <_lseek_r>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	bf15      	itete	ne
 8002714:	6560      	strne	r0, [r4, #84]	; 0x54
 8002716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800271a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800271e:	81a3      	strheq	r3, [r4, #12]
 8002720:	bf18      	it	ne
 8002722:	81a3      	strhne	r3, [r4, #12]
 8002724:	bd10      	pop	{r4, pc}

08002726 <__sclose>:
 8002726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800272a:	f000 b813 	b.w	8002754 <_close_r>
	...

08002730 <_write_r>:
 8002730:	b538      	push	{r3, r4, r5, lr}
 8002732:	4604      	mov	r4, r0
 8002734:	4608      	mov	r0, r1
 8002736:	4611      	mov	r1, r2
 8002738:	2200      	movs	r2, #0
 800273a:	4d05      	ldr	r5, [pc, #20]	; (8002750 <_write_r+0x20>)
 800273c:	602a      	str	r2, [r5, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	f7fd fda2 	bl	8000288 <_write>
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	d102      	bne.n	800274e <_write_r+0x1e>
 8002748:	682b      	ldr	r3, [r5, #0]
 800274a:	b103      	cbz	r3, 800274e <_write_r+0x1e>
 800274c:	6023      	str	r3, [r4, #0]
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	200000e8 	.word	0x200000e8

08002754 <_close_r>:
 8002754:	b538      	push	{r3, r4, r5, lr}
 8002756:	2300      	movs	r3, #0
 8002758:	4d05      	ldr	r5, [pc, #20]	; (8002770 <_close_r+0x1c>)
 800275a:	4604      	mov	r4, r0
 800275c:	4608      	mov	r0, r1
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	f7fd fe8a 	bl	8000478 <_close>
 8002764:	1c43      	adds	r3, r0, #1
 8002766:	d102      	bne.n	800276e <_close_r+0x1a>
 8002768:	682b      	ldr	r3, [r5, #0]
 800276a:	b103      	cbz	r3, 800276e <_close_r+0x1a>
 800276c:	6023      	str	r3, [r4, #0]
 800276e:	bd38      	pop	{r3, r4, r5, pc}
 8002770:	200000e8 	.word	0x200000e8

08002774 <_fstat_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	2300      	movs	r3, #0
 8002778:	4d06      	ldr	r5, [pc, #24]	; (8002794 <_fstat_r+0x20>)
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	602b      	str	r3, [r5, #0]
 8002782:	f7fd fe84 	bl	800048e <_fstat>
 8002786:	1c43      	adds	r3, r0, #1
 8002788:	d102      	bne.n	8002790 <_fstat_r+0x1c>
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	b103      	cbz	r3, 8002790 <_fstat_r+0x1c>
 800278e:	6023      	str	r3, [r4, #0]
 8002790:	bd38      	pop	{r3, r4, r5, pc}
 8002792:	bf00      	nop
 8002794:	200000e8 	.word	0x200000e8

08002798 <_isatty_r>:
 8002798:	b538      	push	{r3, r4, r5, lr}
 800279a:	2300      	movs	r3, #0
 800279c:	4d05      	ldr	r5, [pc, #20]	; (80027b4 <_isatty_r+0x1c>)
 800279e:	4604      	mov	r4, r0
 80027a0:	4608      	mov	r0, r1
 80027a2:	602b      	str	r3, [r5, #0]
 80027a4:	f7fd fe82 	bl	80004ac <_isatty>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	d102      	bne.n	80027b2 <_isatty_r+0x1a>
 80027ac:	682b      	ldr	r3, [r5, #0]
 80027ae:	b103      	cbz	r3, 80027b2 <_isatty_r+0x1a>
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
 80027b4:	200000e8 	.word	0x200000e8

080027b8 <_lseek_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4604      	mov	r4, r0
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	2200      	movs	r2, #0
 80027c2:	4d05      	ldr	r5, [pc, #20]	; (80027d8 <_lseek_r+0x20>)
 80027c4:	602a      	str	r2, [r5, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f7fd fe7a 	bl	80004c0 <_lseek>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d102      	bne.n	80027d6 <_lseek_r+0x1e>
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	b103      	cbz	r3, 80027d6 <_lseek_r+0x1e>
 80027d4:	6023      	str	r3, [r4, #0]
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	200000e8 	.word	0x200000e8

080027dc <memchr>:
 80027dc:	4603      	mov	r3, r0
 80027de:	b510      	push	{r4, lr}
 80027e0:	b2c9      	uxtb	r1, r1
 80027e2:	4402      	add	r2, r0
 80027e4:	4293      	cmp	r3, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	d101      	bne.n	80027ee <memchr+0x12>
 80027ea:	2000      	movs	r0, #0
 80027ec:	e003      	b.n	80027f6 <memchr+0x1a>
 80027ee:	7804      	ldrb	r4, [r0, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	428c      	cmp	r4, r1
 80027f4:	d1f6      	bne.n	80027e4 <memchr+0x8>
 80027f6:	bd10      	pop	{r4, pc}

080027f8 <_read_r>:
 80027f8:	b538      	push	{r3, r4, r5, lr}
 80027fa:	4604      	mov	r4, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	2200      	movs	r2, #0
 8002802:	4d05      	ldr	r5, [pc, #20]	; (8002818 <_read_r+0x20>)
 8002804:	602a      	str	r2, [r5, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	f7fd fe19 	bl	800043e <_read>
 800280c:	1c43      	adds	r3, r0, #1
 800280e:	d102      	bne.n	8002816 <_read_r+0x1e>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	b103      	cbz	r3, 8002816 <_read_r+0x1e>
 8002814:	6023      	str	r3, [r4, #0]
 8002816:	bd38      	pop	{r3, r4, r5, pc}
 8002818:	200000e8 	.word	0x200000e8

0800281c <_init>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

08002828 <_fini>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr
