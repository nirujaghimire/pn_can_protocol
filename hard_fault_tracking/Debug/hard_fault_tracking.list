
hard_fault_tracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002868  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa4  08002aa4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa4  08002aa4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa4  08002aa4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000080  08002b2c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002b2c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076a5  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016aa  00000000  00000000  0002774e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  00028df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  000294e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789f  00000000  00000000  00029b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008467  00000000  00000000  000413df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083617  00000000  00000000  00049846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cce5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002360  00000000  00000000  000cceb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800295c 	.word	0x0800295c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800295c 	.word	0x0800295c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fab2 	bl	80006b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015c:	f000 f848 	bl	80001f0 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000160:	f000 fa26 	bl	80005b0 <run>
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b090      	sub	sp, #64	; 0x40
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0318 	add.w	r3, r7, #24
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f001 fb83 	bl	8001880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	1d3b      	adds	r3, r7, #4
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
 8000180:	605a      	str	r2, [r3, #4]
 8000182:	609a      	str	r2, [r3, #8]
 8000184:	60da      	str	r2, [r3, #12]
 8000186:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000188:	2301      	movs	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000190:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000192:	2300      	movs	r3, #0
 8000194:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019a:	2302      	movs	r3, #2
 800019c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800019e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fd4c 	bl	8000c4c <HAL_RCC_OscConfig>
 80001b4:	4603      	mov	r3, r0
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d001      	beq.n	80001be <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001ba:	f000 f865 	bl	8000288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001be:	230f      	movs	r3, #15
 80001c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c2:	2302      	movs	r3, #2
 80001c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d0:	2300      	movs	r3, #0
 80001d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2102      	movs	r1, #2
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 ffb9 	bl	8001150 <HAL_RCC_ClockConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e4:	f000 f850 	bl	8000288 <Error_Handler>
  }
}
 80001e8:	bf00      	nop
 80001ea:	3740      	adds	r7, #64	; 0x40
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001f6:	4a12      	ldr	r2, [pc, #72]	; (8000240 <MX_USART1_UART_Init+0x50>)
 80001f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_USART1_UART_Init+0x4c>)
 80001fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000202:	4b0e      	ldr	r3, [pc, #56]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000204:	2200      	movs	r2, #0
 8000206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000208:	4b0c      	ldr	r3, [pc, #48]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800020a:	2200      	movs	r2, #0
 800020c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800020e:	4b0b      	ldr	r3, [pc, #44]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000210:	2200      	movs	r2, #0
 8000212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000214:	4b09      	ldr	r3, [pc, #36]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000216:	220c      	movs	r2, #12
 8000218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <MX_USART1_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_USART1_UART_Init+0x4c>)
 8000228:	f001 f920 	bl	800146c <HAL_HalfDuplex_Init>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000232:	f000 f829 	bl	8000288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000236:	bf00      	nop
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000009c 	.word	0x2000009c
 8000240:	40013800 	.word	0x40013800

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_GPIO_Init+0x40>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <MX_GPIO_Init+0x40>)
 8000250:	f043 0320 	orr.w	r3, r3, #32
 8000254:	6193      	str	r3, [r2, #24]
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x40>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0320 	and.w	r3, r3, #32
 800025e:	607b      	str	r3, [r7, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <MX_GPIO_Init+0x40>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	603b      	str	r3, [r7, #0]
 8000278:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000

08000288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800028c:	b672      	cpsid	i
}
 800028e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000290:	e7fe      	b.n	8000290 <Error_Handler+0x8>
	...

08000294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_MspInit+0x40>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <HAL_MspInit+0x40>)
 80002a0:	f043 0301 	orr.w	r3, r3, #1
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <HAL_MspInit+0x40>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <HAL_MspInit+0x40>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	4a07      	ldr	r2, [pc, #28]	; (80002d4 <HAL_MspInit+0x40>)
 80002b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002bc:	61d3      	str	r3, [r2, #28]
 80002be:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <HAL_MspInit+0x40>)
 80002c0:	69db      	ldr	r3, [r3, #28]
 80002c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c6:	603b      	str	r3, [r7, #0]
 80002c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a16      	ldr	r2, [pc, #88]	; (800034c <HAL_UART_MspInit+0x74>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d124      	bne.n	8000342 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <HAL_UART_MspInit+0x78>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <HAL_UART_MspInit+0x78>)
 80002fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <HAL_UART_MspInit+0x78>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <HAL_UART_MspInit+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800032c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800032e:	2312      	movs	r3, #18
 8000330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <HAL_UART_MspInit+0x7c>)
 800033e:	f000 fb01 	bl	8000944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000342:	bf00      	nop
 8000344:	3720      	adds	r7, #32
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40013800 	.word	0x40013800
 8000350:	40021000 	.word	0x40021000
 8000354:	40010800 	.word	0x40010800

08000358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800035c:	e7fe      	b.n	800035c <NMI_Handler+0x4>
	...

08000360 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	uint32_t *pSP;
	__asm volatile("MRS R0, MSP");
 8000366:	f3ef 8008 	mrs	r0, MSP
	__asm volatile("MOV %0,R0":"=r"(pSP));
 800036a:	4603      	mov	r3, r0
 800036c:	603b      	str	r3, [r7, #0]

	printf("Hard fault\n");
 800036e:	4814      	ldr	r0, [pc, #80]	; (80003c0 <HardFault_Handler+0x60>)
 8000370:	f001 fc04 	bl	8001b7c <puts>
	printf("SP = %p\n", pSP);
 8000374:	6839      	ldr	r1, [r7, #0]
 8000376:	4813      	ldr	r0, [pc, #76]	; (80003c4 <HardFault_Handler+0x64>)
 8000378:	f001 fb66 	bl	8001a48 <iprintf>
	for(int i=0;i<400;i++){
 800037c:	2300      	movs	r3, #0
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	e017      	b.n	80003b2 <HardFault_Handler+0x52>
		if((uint32_t)(pSP+i)>=0x20004fff)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	683a      	ldr	r2, [r7, #0]
 8000388:	4413      	add	r3, r2
 800038a:	461a      	mov	r2, r3
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <HardFault_Handler+0x68>)
 800038e:	429a      	cmp	r2, r3
 8000390:	d814      	bhi.n	80003bc <HardFault_Handler+0x5c>
			break;
		printf("%p : 0x%lx\n",(pSP+i), *(pSP+i));
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	18d1      	adds	r1, r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	683a      	ldr	r2, [r7, #0]
 80003a0:	4413      	add	r3, r2
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	4809      	ldr	r0, [pc, #36]	; (80003cc <HardFault_Handler+0x6c>)
 80003a8:	f001 fb4e 	bl	8001a48 <iprintf>
	for(int i=0;i<400;i++){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80003b8:	dbe3      	blt.n	8000382 <HardFault_Handler+0x22>
 80003ba:	e000      	b.n	80003be <HardFault_Handler+0x5e>
			break;
 80003bc:	bf00      	nop
	}
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <HardFault_Handler+0x5e>
 80003c0:	08002974 	.word	0x08002974
 80003c4:	08002980 	.word	0x08002980
 80003c8:	20004ffe 	.word	0x20004ffe
 80003cc:	0800298c 	.word	0x0800298c

080003d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <MemManage_Handler+0x4>

080003d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003da:	e7fe      	b.n	80003da <BusFault_Handler+0x4>

080003dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <UsageFault_Handler+0x4>

080003e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e6:	bf00      	nop
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr

080003ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr

080003fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040a:	f000 f99b 	bl	8000744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}

08000412 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b086      	sub	sp, #24
 8000416:	af00      	add	r7, sp, #0
 8000418:	60f8      	str	r0, [r7, #12]
 800041a:	60b9      	str	r1, [r7, #8]
 800041c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041e:	2300      	movs	r3, #0
 8000420:	617b      	str	r3, [r7, #20]
 8000422:	e00a      	b.n	800043a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000424:	f3af 8000 	nop.w
 8000428:	4601      	mov	r1, r0
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	1c5a      	adds	r2, r3, #1
 800042e:	60ba      	str	r2, [r7, #8]
 8000430:	b2ca      	uxtb	r2, r1
 8000432:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	3301      	adds	r3, #1
 8000438:	617b      	str	r3, [r7, #20]
 800043a:	697a      	ldr	r2, [r7, #20]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	429a      	cmp	r2, r3
 8000440:	dbf0      	blt.n	8000424 <_read+0x12>
  }

  return len;
 8000442:	687b      	ldr	r3, [r7, #4]
}
 8000444:	4618      	mov	r0, r3
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <_close>:
  }
  return len;
}

int _close(int file)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000458:	4618      	mov	r0, r3
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000472:	605a      	str	r2, [r3, #4]
  return 0;
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <_isatty>:

int _isatty(int file)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000488:	2301      	movs	r3, #1
}
 800048a:	4618      	mov	r0, r3
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	60f8      	str	r0, [r7, #12]
 800049c:	60b9      	str	r1, [r7, #8]
 800049e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004a0:	2300      	movs	r3, #0
}
 80004a2:	4618      	mov	r0, r3
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <_sbrk+0x5c>)
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <_sbrk+0x60>)
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c8:	4b11      	ldr	r3, [pc, #68]	; (8000510 <_sbrk+0x64>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	; (8000514 <_sbrk+0x68>)
 80004cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ce:	4b10      	ldr	r3, [pc, #64]	; (8000510 <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d207      	bcs.n	80004ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004dc:	f001 f99e 	bl	800181c <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	220c      	movs	r2, #12
 80004e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	e009      	b.n	8000500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <_sbrk+0x64>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <_sbrk+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20005000 	.word	0x20005000
 800050c:	00000400 	.word	0x00000400
 8000510:	200000e4 	.word	0x200000e4
 8000514:	20000100 	.word	0x20000100

08000518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <printComplex>:
typedef struct {
	int real;
	int img;
} Complex;

void printComplex(Complex complex) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	463b      	mov	r3, r7
 800052c:	e883 0003 	stmia.w	r3, {r0, r1}
	printf("(%d,%d)\n", complex.real, complex.img);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	4619      	mov	r1, r3
 8000536:	4803      	ldr	r0, [pc, #12]	; (8000544 <printComplex+0x20>)
 8000538:	f001 fa86 	bl	8001a48 <iprintf>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08002998 	.word	0x08002998

08000548 <printAddr>:

void printAddr(Complex *complex){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	printf("Complex : %p\n",complex);
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <printAddr+0x30>)
 8000554:	f001 fa78 	bl	8001a48 <iprintf>
	printf("->real : %p\n",&(complex->real));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4619      	mov	r1, r3
 800055c:	4807      	ldr	r0, [pc, #28]	; (800057c <printAddr+0x34>)
 800055e:	f001 fa73 	bl	8001a48 <iprintf>
	printf("->img : %p\n",&(complex->img));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3304      	adds	r3, #4
 8000566:	4619      	mov	r1, r3
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <printAddr+0x38>)
 800056a:	f001 fa6d 	bl	8001a48 <iprintf>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	080029a4 	.word	0x080029a4
 800057c:	080029b4 	.word	0x080029b4
 8000580:	080029c4 	.word	0x080029c4

08000584 <_write>:

int _write(int file, char *ptr, int len) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	b29a      	uxth	r2, r3
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	68b9      	ldr	r1, [r7, #8]
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <_write+0x28>)
 800059c:	f000 ffbe 	bl	800151c <HAL_UART_Transmit>
	return len;
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	2000009c 	.word	0x2000009c

080005b0 <run>:

Complex global = {3,4};


void run() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
	printf("Initiating.....\n");
 80005b6:	4829      	ldr	r0, [pc, #164]	; (800065c <run+0xac>)
 80005b8:	f001 fae0 	bl	8001b7c <puts>

	printf("\n");
 80005bc:	200a      	movs	r0, #10
 80005be:	f001 fa5b 	bl	8001a78 <putchar>
	printComplex(global);
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <run+0xb0>)
 80005c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005c8:	f7ff ffac 	bl	8000524 <printComplex>
	printAddr(&global);
 80005cc:	4824      	ldr	r0, [pc, #144]	; (8000660 <run+0xb0>)
 80005ce:	f7ff ffbb 	bl	8000548 <printAddr>

	printf("\n");
 80005d2:	200a      	movs	r0, #10
 80005d4:	f001 fa50 	bl	8001a78 <putchar>
	static Complex comp = {1,2};
	printComplex(comp);
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <run+0xb4>)
 80005da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005de:	f7ff ffa1 	bl	8000524 <printComplex>
	printAddr(&comp);
 80005e2:	4820      	ldr	r0, [pc, #128]	; (8000664 <run+0xb4>)
 80005e4:	f7ff ffb0 	bl	8000548 <printAddr>

	printf("\n");
 80005e8:	200a      	movs	r0, #10
 80005ea:	f001 fa45 	bl	8001a78 <putchar>
	Complex *c = (Complex*)(0x8000010);
 80005ee:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <run+0xb8>)
 80005f0:	617b      	str	r3, [r7, #20]
	c->real = 10;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	220a      	movs	r2, #10
 80005f6:	601a      	str	r2, [r3, #0]
	printComplex(*c);
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80005fe:	f7ff ff91 	bl	8000524 <printComplex>
	printAddr(c);
 8000602:	6978      	ldr	r0, [r7, #20]
 8000604:	f7ff ffa0 	bl	8000548 <printAddr>
//	c->real = 26;
//	c->img = 14;

	printf("\n");
 8000608:	200a      	movs	r0, #10
 800060a:	f001 fa35 	bl	8001a78 <putchar>
	Complex *complex = NULL;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
	printComplex(*complex);
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000618:	f7ff ff84 	bl	8000524 <printComplex>
	printAddr(complex);
 800061c:	6938      	ldr	r0, [r7, #16]
 800061e:	f7ff ff93 	bl	8000548 <printAddr>

	printf("\n");
 8000622:	200a      	movs	r0, #10
 8000624:	f001 fa28 	bl	8001a78 <putchar>
	Complex peter;
	printComplex(peter);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800062e:	f7ff ff79 	bl	8000524 <printComplex>
	printAddr(&peter);
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff87 	bl	8000548 <printAddr>

	printf("\n");
 800063a:	200a      	movs	r0, #10
 800063c:	f001 fa1c 	bl	8001a78 <putchar>
	Complex *niruja = malloc(sizeof(Complex));
 8000640:	2008      	movs	r0, #8
 8000642:	f001 f915 	bl	8001870 <malloc>
 8000646:	4603      	mov	r3, r0
 8000648:	60fb      	str	r3, [r7, #12]
	printComplex(*niruja);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000650:	f7ff ff68 	bl	8000524 <printComplex>
	printAddr(niruja);
 8000654:	68f8      	ldr	r0, [r7, #12]
 8000656:	f7ff ff77 	bl	8000548 <printAddr>
	while (1) {
 800065a:	e7fe      	b.n	800065a <run+0xaa>
 800065c:	080029d0 	.word	0x080029d0
 8000660:	20000004 	.word	0x20000004
 8000664:	2000000c 	.word	0x2000000c
 8000668:	08000010 	.word	0x08000010

0800066c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800066c:	f7ff ff54 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000672:	490c      	ldr	r1, [pc, #48]	; (80006a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a09      	ldr	r2, [pc, #36]	; (80006ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000688:	4c09      	ldr	r4, [pc, #36]	; (80006b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000696:	f001 f8c7 	bl	8001828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069a:	f7ff fd57 	bl	800014c <main>
  bx lr
 800069e:	4770      	bx	lr
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80006a8:	08002aac 	.word	0x08002aac
  ldr r2, =_sbss
 80006ac:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80006b0:	200000fc 	.word	0x200000fc

080006b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_2_IRQHandler>
	...

080006b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <HAL_Init+0x28>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a07      	ldr	r2, [pc, #28]	; (80006e0 <HAL_Init+0x28>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f000 f907 	bl	80008dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ce:	200f      	movs	r0, #15
 80006d0:	f000 f808 	bl	80006e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d4:	f7ff fdde 	bl	8000294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40022000 	.word	0x40022000

080006e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_InitTick+0x54>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_InitTick+0x58>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f911 	bl	800092a <HAL_SYSTICK_Config>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e00e      	b.n	8000730 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	d80a      	bhi.n	800072e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000718:	2200      	movs	r2, #0
 800071a:	6879      	ldr	r1, [r7, #4]
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f000 f8e7 	bl	80008f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <HAL_InitTick+0x5c>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800072a:	2300      	movs	r3, #0
 800072c:	e000      	b.n	8000730 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000000 	.word	0x20000000
 800073c:	20000018 	.word	0x20000018
 8000740:	20000014 	.word	0x20000014

08000744 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <HAL_IncTick+0x1c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_IncTick+0x20>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4413      	add	r3, r2
 8000754:	4a03      	ldr	r2, [pc, #12]	; (8000764 <HAL_IncTick+0x20>)
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000018 	.word	0x20000018
 8000764:	200000e8 	.word	0x200000e8

08000768 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return uwTick;
 800076c:	4b02      	ldr	r3, [pc, #8]	; (8000778 <HAL_GetTick+0x10>)
 800076e:	681b      	ldr	r3, [r3, #0]
}
 8000770:	4618      	mov	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200000e8 	.word	0x200000e8

0800077c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <__NVIC_SetPriorityGrouping+0x44>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000798:	4013      	ands	r3, r2
 800079a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <__NVIC_SetPriorityGrouping+0x44>)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	60d3      	str	r3, [r2, #12]
}
 80007b4:	bf00      	nop
 80007b6:	3714      	adds	r7, #20
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <__NVIC_GetPriorityGrouping+0x18>)
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	f003 0307 	and.w	r3, r3, #7
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	; (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a8:	d301      	bcc.n	80008ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00f      	b.n	80008ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <SysTick_Config+0x40>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b6:	210f      	movs	r1, #15
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f7ff ff90 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Config+0x40>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x40>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff49 	bl	800077c <__NVIC_SetPriorityGrouping>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000904:	f7ff ff5e 	bl	80007c4 <__NVIC_GetPriorityGrouping>
 8000908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	68b9      	ldr	r1, [r7, #8]
 800090e:	6978      	ldr	r0, [r7, #20]
 8000910:	f7ff ff90 	bl	8000834 <NVIC_EncodePriority>
 8000914:	4602      	mov	r2, r0
 8000916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff ff5f 	bl	80007e0 <__NVIC_SetPriority>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff ffb0 	bl	8000898 <SysTick_Config>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000944:	b480      	push	{r7}
 8000946:	b08b      	sub	sp, #44	; 0x2c
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000956:	e169      	b.n	8000c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000958:	2201      	movs	r2, #1
 800095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	4013      	ands	r3, r2
 800096a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	429a      	cmp	r2, r3
 8000972:	f040 8158 	bne.w	8000c26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4a9a      	ldr	r2, [pc, #616]	; (8000be4 <HAL_GPIO_Init+0x2a0>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d05e      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 8000980:	4a98      	ldr	r2, [pc, #608]	; (8000be4 <HAL_GPIO_Init+0x2a0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d875      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 8000986:	4a98      	ldr	r2, [pc, #608]	; (8000be8 <HAL_GPIO_Init+0x2a4>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d058      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 800098c:	4a96      	ldr	r2, [pc, #600]	; (8000be8 <HAL_GPIO_Init+0x2a4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d86f      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 8000992:	4a96      	ldr	r2, [pc, #600]	; (8000bec <HAL_GPIO_Init+0x2a8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d052      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 8000998:	4a94      	ldr	r2, [pc, #592]	; (8000bec <HAL_GPIO_Init+0x2a8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d869      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 800099e:	4a94      	ldr	r2, [pc, #592]	; (8000bf0 <HAL_GPIO_Init+0x2ac>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d04c      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 80009a4:	4a92      	ldr	r2, [pc, #584]	; (8000bf0 <HAL_GPIO_Init+0x2ac>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d863      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 80009aa:	4a92      	ldr	r2, [pc, #584]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d046      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
 80009b0:	4a90      	ldr	r2, [pc, #576]	; (8000bf4 <HAL_GPIO_Init+0x2b0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d85d      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 80009b6:	2b12      	cmp	r3, #18
 80009b8:	d82a      	bhi.n	8000a10 <HAL_GPIO_Init+0xcc>
 80009ba:	2b12      	cmp	r3, #18
 80009bc:	d859      	bhi.n	8000a72 <HAL_GPIO_Init+0x12e>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <HAL_GPIO_Init+0x80>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	08000a3f 	.word	0x08000a3f
 80009c8:	08000a19 	.word	0x08000a19
 80009cc:	08000a2b 	.word	0x08000a2b
 80009d0:	08000a6d 	.word	0x08000a6d
 80009d4:	08000a73 	.word	0x08000a73
 80009d8:	08000a73 	.word	0x08000a73
 80009dc:	08000a73 	.word	0x08000a73
 80009e0:	08000a73 	.word	0x08000a73
 80009e4:	08000a73 	.word	0x08000a73
 80009e8:	08000a73 	.word	0x08000a73
 80009ec:	08000a73 	.word	0x08000a73
 80009f0:	08000a73 	.word	0x08000a73
 80009f4:	08000a73 	.word	0x08000a73
 80009f8:	08000a73 	.word	0x08000a73
 80009fc:	08000a73 	.word	0x08000a73
 8000a00:	08000a73 	.word	0x08000a73
 8000a04:	08000a73 	.word	0x08000a73
 8000a08:	08000a21 	.word	0x08000a21
 8000a0c:	08000a35 	.word	0x08000a35
 8000a10:	4a79      	ldr	r2, [pc, #484]	; (8000bf8 <HAL_GPIO_Init+0x2b4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d013      	beq.n	8000a3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a16:	e02c      	b.n	8000a72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	623b      	str	r3, [r7, #32]
          break;
 8000a1e:	e029      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	3304      	adds	r3, #4
 8000a26:	623b      	str	r3, [r7, #32]
          break;
 8000a28:	e024      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	3308      	adds	r3, #8
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e01f      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	330c      	adds	r3, #12
 8000a3a:	623b      	str	r3, [r7, #32]
          break;
 8000a3c:	e01a      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d102      	bne.n	8000a4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a46:	2304      	movs	r3, #4
 8000a48:	623b      	str	r3, [r7, #32]
          break;
 8000a4a:	e013      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d105      	bne.n	8000a60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a54:	2308      	movs	r3, #8
 8000a56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	611a      	str	r2, [r3, #16]
          break;
 8000a5e:	e009      	b.n	8000a74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a60:	2308      	movs	r3, #8
 8000a62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	615a      	str	r2, [r3, #20]
          break;
 8000a6a:	e003      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x130>
          break;
 8000a72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	2bff      	cmp	r3, #255	; 0xff
 8000a78:	d801      	bhi.n	8000a7e <HAL_GPIO_Init+0x13a>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	e001      	b.n	8000a82 <HAL_GPIO_Init+0x13e>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	3304      	adds	r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d802      	bhi.n	8000a90 <HAL_GPIO_Init+0x14c>
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	e002      	b.n	8000a96 <HAL_GPIO_Init+0x152>
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	3b08      	subs	r3, #8
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	6a39      	ldr	r1, [r7, #32]
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f000 80b1 	beq.w	8000c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <HAL_GPIO_Init+0x2b8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a4c      	ldr	r2, [pc, #304]	; (8000bfc <HAL_GPIO_Init+0x2b8>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_GPIO_Init+0x2b8>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000adc:	4a48      	ldr	r2, [pc, #288]	; (8000c00 <HAL_GPIO_Init+0x2bc>)
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aec:	f003 0303 	and.w	r3, r3, #3
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <HAL_GPIO_Init+0x2c0>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d013      	beq.n	8000b30 <HAL_GPIO_Init+0x1ec>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <HAL_GPIO_Init+0x2c4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d00d      	beq.n	8000b2c <HAL_GPIO_Init+0x1e8>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a3e      	ldr	r2, [pc, #248]	; (8000c0c <HAL_GPIO_Init+0x2c8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d007      	beq.n	8000b28 <HAL_GPIO_Init+0x1e4>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a3d      	ldr	r2, [pc, #244]	; (8000c10 <HAL_GPIO_Init+0x2cc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d101      	bne.n	8000b24 <HAL_GPIO_Init+0x1e0>
 8000b20:	2303      	movs	r3, #3
 8000b22:	e006      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b24:	2304      	movs	r3, #4
 8000b26:	e004      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b28:	2302      	movs	r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e000      	b.n	8000b32 <HAL_GPIO_Init+0x1ee>
 8000b30:	2300      	movs	r3, #0
 8000b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b34:	f002 0203 	and.w	r2, r2, #3
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4093      	lsls	r3, r2
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b42:	492f      	ldr	r1, [pc, #188]	; (8000c00 <HAL_GPIO_Init+0x2bc>)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	3302      	adds	r3, #2
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d006      	beq.n	8000b6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	492c      	ldr	r1, [pc, #176]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	608b      	str	r3, [r1, #8]
 8000b68:	e006      	b.n	8000b78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4928      	ldr	r1, [pc, #160]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b84:	4b23      	ldr	r3, [pc, #140]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	4922      	ldr	r1, [pc, #136]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	60cb      	str	r3, [r1, #12]
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	491e      	ldr	r1, [pc, #120]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d006      	beq.n	8000bba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	4918      	ldr	r1, [pc, #96]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	604b      	str	r3, [r1, #4]
 8000bb8:	e006      	b.n	8000bc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bbc:	685a      	ldr	r2, [r3, #4]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	4914      	ldr	r1, [pc, #80]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d021      	beq.n	8000c18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	490e      	ldr	r1, [pc, #56]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	600b      	str	r3, [r1, #0]
 8000be0:	e021      	b.n	8000c26 <HAL_GPIO_Init+0x2e2>
 8000be2:	bf00      	nop
 8000be4:	10320000 	.word	0x10320000
 8000be8:	10310000 	.word	0x10310000
 8000bec:	10220000 	.word	0x10220000
 8000bf0:	10210000 	.word	0x10210000
 8000bf4:	10120000 	.word	0x10120000
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010000 	.word	0x40010000
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	40011400 	.word	0x40011400
 8000c14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_GPIO_Init+0x304>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4909      	ldr	r1, [pc, #36]	; (8000c48 <HAL_GPIO_Init+0x304>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	3301      	adds	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	fa22 f303 	lsr.w	r3, r2, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f47f ae8e 	bne.w	8000958 <HAL_GPIO_Init+0x14>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	372c      	adds	r7, #44	; 0x2c
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	40010400 	.word	0x40010400

08000c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e272      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 8087 	beq.w	8000d7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c6c:	4b92      	ldr	r3, [pc, #584]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 030c 	and.w	r3, r3, #12
 8000c74:	2b04      	cmp	r3, #4
 8000c76:	d00c      	beq.n	8000c92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c78:	4b8f      	ldr	r3, [pc, #572]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 030c 	and.w	r3, r3, #12
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d112      	bne.n	8000caa <HAL_RCC_OscConfig+0x5e>
 8000c84:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c90:	d10b      	bne.n	8000caa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c92:	4b89      	ldr	r3, [pc, #548]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d06c      	beq.n	8000d78 <HAL_RCC_OscConfig+0x12c>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d168      	bne.n	8000d78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e24c      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cb2:	d106      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x76>
 8000cb4:	4b80      	ldr	r3, [pc, #512]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a7f      	ldr	r2, [pc, #508]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e02e      	b.n	8000d20 <HAL_RCC_OscConfig+0xd4>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x98>
 8000cca:	4b7b      	ldr	r3, [pc, #492]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a7a      	ldr	r2, [pc, #488]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	4b78      	ldr	r3, [pc, #480]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a77      	ldr	r2, [pc, #476]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e01d      	b.n	8000d20 <HAL_RCC_OscConfig+0xd4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cec:	d10c      	bne.n	8000d08 <HAL_RCC_OscConfig+0xbc>
 8000cee:	4b72      	ldr	r3, [pc, #456]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a71      	ldr	r2, [pc, #452]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b6f      	ldr	r3, [pc, #444]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a6e      	ldr	r2, [pc, #440]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e00b      	b.n	8000d20 <HAL_RCC_OscConfig+0xd4>
 8000d08:	4b6b      	ldr	r3, [pc, #428]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a6a      	ldr	r2, [pc, #424]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	4b68      	ldr	r3, [pc, #416]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a67      	ldr	r2, [pc, #412]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d013      	beq.n	8000d50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fd1e 	bl	8000768 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d30:	f7ff fd1a 	bl	8000768 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b64      	cmp	r3, #100	; 0x64
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e200      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d42:	4b5d      	ldr	r3, [pc, #372]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f0      	beq.n	8000d30 <HAL_RCC_OscConfig+0xe4>
 8000d4e:	e014      	b.n	8000d7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d50:	f7ff fd0a 	bl	8000768 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fd06 	bl	8000768 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	; 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e1ec      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d6a:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f0      	bne.n	8000d58 <HAL_RCC_OscConfig+0x10c>
 8000d76:	e000      	b.n	8000d7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d063      	beq.n	8000e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d86:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00b      	beq.n	8000daa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d92:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d11c      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x18c>
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d116      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000daa:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x176>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d001      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e1c0      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4939      	ldr	r1, [pc, #228]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd6:	e03a      	b.n	8000e4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d020      	beq.n	8000e22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de0:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <HAL_RCC_OscConfig+0x270>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de6:	f7ff fcbf 	bl	8000768 <HAL_GetTick>
 8000dea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dee:	f7ff fcbb 	bl	8000768 <HAL_GetTick>
 8000df2:	4602      	mov	r2, r0
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e1a1      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f0      	beq.n	8000dee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4927      	ldr	r1, [pc, #156]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	600b      	str	r3, [r1, #0]
 8000e20:	e015      	b.n	8000e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <HAL_RCC_OscConfig+0x270>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc9e 	bl	8000768 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2e:	e008      	b.n	8000e42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc9a 	bl	8000768 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d901      	bls.n	8000e42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e180      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f0      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d03a      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d019      	beq.n	8000e96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_RCC_OscConfig+0x274>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e68:	f7ff fc7e 	bl	8000768 <HAL_GetTick>
 8000e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e70:	f7ff fc7a 	bl	8000768 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e160      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d0f0      	beq.n	8000e70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f000 face 	bl	8001430 <RCC_Delay>
 8000e94:	e01c      	b.n	8000ed0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_RCC_OscConfig+0x274>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fc64 	bl	8000768 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea2:	e00f      	b.n	8000ec4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fc60 	bl	8000768 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d908      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e146      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
 8000eb6:	bf00      	nop
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	42420000 	.word	0x42420000
 8000ec0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ec4:	4b92      	ldr	r3, [pc, #584]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e9      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80a6 	beq.w	800102a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee2:	4b8b      	ldr	r3, [pc, #556]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10d      	bne.n	8000f0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b88      	ldr	r3, [pc, #544]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a87      	ldr	r2, [pc, #540]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b85      	ldr	r3, [pc, #532]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f06:	2301      	movs	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b82      	ldr	r3, [pc, #520]	; (8001114 <HAL_RCC_OscConfig+0x4c8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d118      	bne.n	8000f48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f16:	4b7f      	ldr	r3, [pc, #508]	; (8001114 <HAL_RCC_OscConfig+0x4c8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7e      	ldr	r2, [pc, #504]	; (8001114 <HAL_RCC_OscConfig+0x4c8>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fc21 	bl	8000768 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2a:	f7ff fc1d 	bl	8000768 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e103      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3c:	4b75      	ldr	r3, [pc, #468]	; (8001114 <HAL_RCC_OscConfig+0x4c8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x312>
 8000f50:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	4a6e      	ldr	r2, [pc, #440]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6213      	str	r3, [r2, #32]
 8000f5c:	e02d      	b.n	8000fba <HAL_RCC_OscConfig+0x36e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x334>
 8000f66:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	4a69      	ldr	r2, [pc, #420]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	6213      	str	r3, [r2, #32]
 8000f72:	4b67      	ldr	r3, [pc, #412]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4a66      	ldr	r2, [pc, #408]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	f023 0304 	bic.w	r3, r3, #4
 8000f7c:	6213      	str	r3, [r2, #32]
 8000f7e:	e01c      	b.n	8000fba <HAL_RCC_OscConfig+0x36e>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x356>
 8000f88:	4b61      	ldr	r3, [pc, #388]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a60      	ldr	r2, [pc, #384]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	f043 0304 	orr.w	r3, r3, #4
 8000f92:	6213      	str	r3, [r2, #32]
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f96:	6a1b      	ldr	r3, [r3, #32]
 8000f98:	4a5d      	ldr	r2, [pc, #372]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6213      	str	r3, [r2, #32]
 8000fa0:	e00b      	b.n	8000fba <HAL_RCC_OscConfig+0x36e>
 8000fa2:	4b5b      	ldr	r3, [pc, #364]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	4a5a      	ldr	r2, [pc, #360]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6213      	str	r3, [r2, #32]
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a57      	ldr	r2, [pc, #348]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d015      	beq.n	8000fee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fbd1 	bl	8000768 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc8:	e00a      	b.n	8000fe0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fca:	f7ff fbcd 	bl	8000768 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e0b1      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe0:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0ee      	beq.n	8000fca <HAL_RCC_OscConfig+0x37e>
 8000fec:	e014      	b.n	8001018 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fbbb 	bl	8000768 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fbb7 	bl	8000768 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f241 3288 	movw	r2, #5000	; 0x1388
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e09b      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1ee      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001018:	7dfb      	ldrb	r3, [r7, #23]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d105      	bne.n	800102a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a3b      	ldr	r2, [pc, #236]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8087 	beq.w	8001142 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b08      	cmp	r3, #8
 800103e:	d061      	beq.n	8001104 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69db      	ldr	r3, [r3, #28]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d146      	bne.n	80010d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001048:	4b33      	ldr	r3, [pc, #204]	; (8001118 <HAL_RCC_OscConfig+0x4cc>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fb8b 	bl	8000768 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001056:	f7ff fb87 	bl	8000768 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e06d      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f0      	bne.n	8001056 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d108      	bne.n	8001090 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	4921      	ldr	r1, [pc, #132]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a19      	ldr	r1, [r3, #32]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	430b      	orrs	r3, r1
 80010a2:	491b      	ldr	r1, [pc, #108]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <HAL_RCC_OscConfig+0x4cc>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fb5b 	bl	8000768 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fb57 	bl	8000768 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e03d      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x46a>
 80010d4:	e035      	b.n	8001142 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_RCC_OscConfig+0x4cc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fb44 	bl	8000768 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e4:	f7ff fb40 	bl	8000768 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e026      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x498>
 8001102:	e01e      	b.n	8001142 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d107      	bne.n	800111c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e019      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
 8001110:	40021000 	.word	0x40021000
 8001114:	40007000 	.word	0x40007000
 8001118:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_RCC_OscConfig+0x500>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	429a      	cmp	r2, r3
 800112e:	d106      	bne.n	800113e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800113a:	429a      	cmp	r2, r3
 800113c:	d001      	beq.n	8001142 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e0d0      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001164:	4b6a      	ldr	r3, [pc, #424]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d910      	bls.n	8001194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b67      	ldr	r3, [pc, #412]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f023 0207 	bic.w	r2, r3, #7
 800117a:	4965      	ldr	r1, [pc, #404]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b63      	ldr	r3, [pc, #396]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0b8      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a58      	ldr	r2, [pc, #352]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4a52      	ldr	r2, [pc, #328]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80011ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b50      	ldr	r3, [pc, #320]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	494d      	ldr	r1, [pc, #308]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d040      	beq.n	8001270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d115      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e07f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d107      	bne.n	800121e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e073      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e06b      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f023 0203 	bic.w	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4936      	ldr	r1, [pc, #216]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001240:	f7ff fa92 	bl	8000768 <HAL_GetTick>
 8001244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	e00a      	b.n	800125e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001248:	f7ff fa8e 	bl	8000768 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	; 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e053      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 020c 	and.w	r2, r3, #12
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	429a      	cmp	r2, r3
 800126e:	d1eb      	bne.n	8001248 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001270:	4b27      	ldr	r3, [pc, #156]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d210      	bcs.n	80012a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4922      	ldr	r1, [pc, #136]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e032      	b.n	8001306 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4916      	ldr	r1, [pc, #88]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	490e      	ldr	r1, [pc, #56]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012de:	f000 f821 	bl	8001324 <HAL_RCC_GetSysClockFreq>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	490a      	ldr	r1, [pc, #40]	; (8001318 <HAL_RCC_ClockConfig+0x1c8>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1cc>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <HAL_RCC_ClockConfig+0x1d0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f9f0 	bl	80006e4 <HAL_InitTick>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000
 8001314:	40021000 	.word	0x40021000
 8001318:	080029e0 	.word	0x080029e0
 800131c:	20000000 	.word	0x20000000
 8001320:	20000014 	.word	0x20000014

08001324 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b04      	cmp	r3, #4
 800134c:	d002      	beq.n	8001354 <HAL_RCC_GetSysClockFreq+0x30>
 800134e:	2b08      	cmp	r3, #8
 8001350:	d003      	beq.n	800135a <HAL_RCC_GetSysClockFreq+0x36>
 8001352:	e027      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001356:	613b      	str	r3, [r7, #16]
      break;
 8001358:	e027      	b.n	80013aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	0c9b      	lsrs	r3, r3, #18
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001364:	5cd3      	ldrb	r3, [r2, r3]
 8001366:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d010      	beq.n	8001394 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	0c5b      	lsrs	r3, r3, #17
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800137e:	5cd3      	ldrb	r3, [r2, r3]
 8001380:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_RCC_GetSysClockFreq+0x98>)
 8001386:	fb03 f202 	mul.w	r2, r3, r2
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e004      	b.n	800139e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001398:	fb02 f303 	mul.w	r3, r2, r3
 800139c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	613b      	str	r3, [r7, #16]
      break;
 80013a2:	e002      	b.n	80013aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_RCC_GetSysClockFreq+0x98>)
 80013a6:	613b      	str	r3, [r7, #16]
      break;
 80013a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013aa:	693b      	ldr	r3, [r7, #16]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	007a1200 	.word	0x007a1200
 80013c0:	080029f8 	.word	0x080029f8
 80013c4:	08002a08 	.word	0x08002a08
 80013c8:	003d0900 	.word	0x003d0900

080013cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d0:	4b02      	ldr	r3, [pc, #8]	; (80013dc <HAL_RCC_GetHCLKFreq+0x10>)
 80013d2:	681b      	ldr	r3, [r3, #0]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	20000000 	.word	0x20000000

080013e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013e4:	f7ff fff2 	bl	80013cc <HAL_RCC_GetHCLKFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4903      	ldr	r1, [pc, #12]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	080029f0 	.word	0x080029f0

08001408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800140c:	f7ff ffde 	bl	80013cc <HAL_RCC_GetHCLKFreq>
 8001410:	4602      	mov	r2, r0
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	0adb      	lsrs	r3, r3, #11
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	4903      	ldr	r1, [pc, #12]	; (800142c <HAL_RCC_GetPCLK2Freq+0x24>)
 800141e:	5ccb      	ldrb	r3, [r1, r3]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40021000 	.word	0x40021000
 800142c:	080029f0 	.word	0x080029f0

08001430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001438:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <RCC_Delay+0x34>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <RCC_Delay+0x38>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0a5b      	lsrs	r3, r3, #9
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800144c:	bf00      	nop
  }
  while (Delay --);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	60fa      	str	r2, [r7, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f9      	bne.n	800144c <RCC_Delay+0x1c>
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000000 	.word	0x20000000
 8001468:	10624dd3 	.word	0x10624dd3

0800146c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e04a      	b.n	8001514 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d106      	bne.n	8001498 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7fe ff20 	bl	80002d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f925 	bl	8001700 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80014d4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0208 	orr.w	r2, r2, #8
 80014e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b20      	cmp	r3, #32
 800153a:	d16d      	bne.n	8001618 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_UART_Transmit+0x2c>
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e066      	b.n	800161a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2221      	movs	r2, #33	; 0x21
 8001556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800155a:	f7ff f905 	bl	8000768 <HAL_GetTick>
 800155e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	88fa      	ldrh	r2, [r7, #6]
 8001564:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001574:	d108      	bne.n	8001588 <HAL_UART_Transmit+0x6c>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d104      	bne.n	8001588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	e003      	b.n	8001590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001590:	e02a      	b.n	80015e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2200      	movs	r2, #0
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f840 	bl	8001622 <UART_WaitOnFlagUntilTimeout>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e036      	b.n	800161a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10b      	bne.n	80015ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	3302      	adds	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	e007      	b.n	80015da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1cf      	bne.n	8001592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2200      	movs	r2, #0
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f810 	bl	8001622 <UART_WaitOnFlagUntilTimeout>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e006      	b.n	800161a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2220      	movs	r2, #32
 8001610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001618:	2302      	movs	r3, #2
  }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b090      	sub	sp, #64	; 0x40
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001632:	e050      	b.n	80016d6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163a:	d04c      	beq.n	80016d6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800163c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <UART_WaitOnFlagUntilTimeout+0x30>
 8001642:	f7ff f891 	bl	8000768 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800164e:	429a      	cmp	r2, r3
 8001650:	d241      	bcs.n	80016d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	330c      	adds	r3, #12
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800165a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165c:	e853 3f00 	ldrex	r3, [r3]
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	330c      	adds	r3, #12
 8001670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001672:	637a      	str	r2, [r7, #52]	; 0x34
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001676:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800167a:	e841 2300 	strex	r3, r2, [r1]
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e5      	bne.n	8001652 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3314      	adds	r3, #20
 800168c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	e853 3f00 	ldrex	r3, [r3]
 8001694:	613b      	str	r3, [r7, #16]
   return(result);
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	f023 0301 	bic.w	r3, r3, #1
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3314      	adds	r3, #20
 80016a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016a6:	623a      	str	r2, [r7, #32]
 80016a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016aa:	69f9      	ldr	r1, [r7, #28]
 80016ac:	6a3a      	ldr	r2, [r7, #32]
 80016ae:	e841 2300 	strex	r3, r2, [r1]
 80016b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1e5      	bne.n	8001686 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2220      	movs	r2, #32
 80016be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2220      	movs	r2, #32
 80016c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e00f      	b.n	80016f6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4013      	ands	r3, r2
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	bf0c      	ite	eq
 80016e6:	2301      	moveq	r3, #1
 80016e8:	2300      	movne	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d09f      	beq.n	8001634 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3740      	adds	r7, #64	; 0x40
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	4313      	orrs	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800173a:	f023 030c 	bic.w	r3, r3, #12
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	68b9      	ldr	r1, [r7, #8]
 8001744:	430b      	orrs	r3, r1
 8001746:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699a      	ldr	r2, [r3, #24]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2c      	ldr	r2, [pc, #176]	; (8001814 <UART_SetConfig+0x114>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d103      	bne.n	8001770 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001768:	f7ff fe4e 	bl	8001408 <HAL_RCC_GetPCLK2Freq>
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	e002      	b.n	8001776 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001770:	f7ff fe36 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 8001774:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	009a      	lsls	r2, r3, #2
 8001780:	441a      	add	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	4a22      	ldr	r2, [pc, #136]	; (8001818 <UART_SetConfig+0x118>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	0119      	lsls	r1, r3, #4
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	009a      	lsls	r2, r3, #2
 80017a0:	441a      	add	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <UART_SetConfig+0x118>)
 80017ae:	fba3 0302 	umull	r0, r3, r3, r2
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2064      	movs	r0, #100	; 0x64
 80017b6:	fb00 f303 	mul.w	r3, r0, r3
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	011b      	lsls	r3, r3, #4
 80017be:	3332      	adds	r3, #50	; 0x32
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <UART_SetConfig+0x118>)
 80017c2:	fba2 2303 	umull	r2, r3, r2, r3
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	4419      	add	r1, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	009a      	lsls	r2, r3, #2
 80017d8:	441a      	add	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <UART_SetConfig+0x118>)
 80017e6:	fba3 0302 	umull	r0, r3, r3, r2
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2064      	movs	r0, #100	; 0x64
 80017ee:	fb00 f303 	mul.w	r3, r0, r3
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	3332      	adds	r3, #50	; 0x32
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <UART_SetConfig+0x118>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	f003 020f 	and.w	r2, r3, #15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	440a      	add	r2, r1
 800180a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013800 	.word	0x40013800
 8001818:	51eb851f 	.word	0x51eb851f

0800181c <__errno>:
 800181c:	4b01      	ldr	r3, [pc, #4]	; (8001824 <__errno+0x8>)
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000001c 	.word	0x2000001c

08001828 <__libc_init_array>:
 8001828:	b570      	push	{r4, r5, r6, lr}
 800182a:	2600      	movs	r6, #0
 800182c:	4d0c      	ldr	r5, [pc, #48]	; (8001860 <__libc_init_array+0x38>)
 800182e:	4c0d      	ldr	r4, [pc, #52]	; (8001864 <__libc_init_array+0x3c>)
 8001830:	1b64      	subs	r4, r4, r5
 8001832:	10a4      	asrs	r4, r4, #2
 8001834:	42a6      	cmp	r6, r4
 8001836:	d109      	bne.n	800184c <__libc_init_array+0x24>
 8001838:	f001 f890 	bl	800295c <_init>
 800183c:	2600      	movs	r6, #0
 800183e:	4d0a      	ldr	r5, [pc, #40]	; (8001868 <__libc_init_array+0x40>)
 8001840:	4c0a      	ldr	r4, [pc, #40]	; (800186c <__libc_init_array+0x44>)
 8001842:	1b64      	subs	r4, r4, r5
 8001844:	10a4      	asrs	r4, r4, #2
 8001846:	42a6      	cmp	r6, r4
 8001848:	d105      	bne.n	8001856 <__libc_init_array+0x2e>
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001850:	4798      	blx	r3
 8001852:	3601      	adds	r6, #1
 8001854:	e7ee      	b.n	8001834 <__libc_init_array+0xc>
 8001856:	f855 3b04 	ldr.w	r3, [r5], #4
 800185a:	4798      	blx	r3
 800185c:	3601      	adds	r6, #1
 800185e:	e7f2      	b.n	8001846 <__libc_init_array+0x1e>
 8001860:	08002aa4 	.word	0x08002aa4
 8001864:	08002aa4 	.word	0x08002aa4
 8001868:	08002aa4 	.word	0x08002aa4
 800186c:	08002aa8 	.word	0x08002aa8

08001870 <malloc>:
 8001870:	4b02      	ldr	r3, [pc, #8]	; (800187c <malloc+0xc>)
 8001872:	4601      	mov	r1, r0
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	f000 b873 	b.w	8001960 <_malloc_r>
 800187a:	bf00      	nop
 800187c:	2000001c 	.word	0x2000001c

08001880 <memset>:
 8001880:	4603      	mov	r3, r0
 8001882:	4402      	add	r2, r0
 8001884:	4293      	cmp	r3, r2
 8001886:	d100      	bne.n	800188a <memset+0xa>
 8001888:	4770      	bx	lr
 800188a:	f803 1b01 	strb.w	r1, [r3], #1
 800188e:	e7f9      	b.n	8001884 <memset+0x4>

08001890 <_free_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	4605      	mov	r5, r0
 8001894:	2900      	cmp	r1, #0
 8001896:	d040      	beq.n	800191a <_free_r+0x8a>
 8001898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800189c:	1f0c      	subs	r4, r1, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bfb8      	it	lt
 80018a2:	18e4      	addlt	r4, r4, r3
 80018a4:	f000 fc5e 	bl	8002164 <__malloc_lock>
 80018a8:	4a1c      	ldr	r2, [pc, #112]	; (800191c <_free_r+0x8c>)
 80018aa:	6813      	ldr	r3, [r2, #0]
 80018ac:	b933      	cbnz	r3, 80018bc <_free_r+0x2c>
 80018ae:	6063      	str	r3, [r4, #4]
 80018b0:	6014      	str	r4, [r2, #0]
 80018b2:	4628      	mov	r0, r5
 80018b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018b8:	f000 bc5a 	b.w	8002170 <__malloc_unlock>
 80018bc:	42a3      	cmp	r3, r4
 80018be:	d908      	bls.n	80018d2 <_free_r+0x42>
 80018c0:	6820      	ldr	r0, [r4, #0]
 80018c2:	1821      	adds	r1, r4, r0
 80018c4:	428b      	cmp	r3, r1
 80018c6:	bf01      	itttt	eq
 80018c8:	6819      	ldreq	r1, [r3, #0]
 80018ca:	685b      	ldreq	r3, [r3, #4]
 80018cc:	1809      	addeq	r1, r1, r0
 80018ce:	6021      	streq	r1, [r4, #0]
 80018d0:	e7ed      	b.n	80018ae <_free_r+0x1e>
 80018d2:	461a      	mov	r2, r3
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	b10b      	cbz	r3, 80018dc <_free_r+0x4c>
 80018d8:	42a3      	cmp	r3, r4
 80018da:	d9fa      	bls.n	80018d2 <_free_r+0x42>
 80018dc:	6811      	ldr	r1, [r2, #0]
 80018de:	1850      	adds	r0, r2, r1
 80018e0:	42a0      	cmp	r0, r4
 80018e2:	d10b      	bne.n	80018fc <_free_r+0x6c>
 80018e4:	6820      	ldr	r0, [r4, #0]
 80018e6:	4401      	add	r1, r0
 80018e8:	1850      	adds	r0, r2, r1
 80018ea:	4283      	cmp	r3, r0
 80018ec:	6011      	str	r1, [r2, #0]
 80018ee:	d1e0      	bne.n	80018b2 <_free_r+0x22>
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4401      	add	r1, r0
 80018f6:	6011      	str	r1, [r2, #0]
 80018f8:	6053      	str	r3, [r2, #4]
 80018fa:	e7da      	b.n	80018b2 <_free_r+0x22>
 80018fc:	d902      	bls.n	8001904 <_free_r+0x74>
 80018fe:	230c      	movs	r3, #12
 8001900:	602b      	str	r3, [r5, #0]
 8001902:	e7d6      	b.n	80018b2 <_free_r+0x22>
 8001904:	6820      	ldr	r0, [r4, #0]
 8001906:	1821      	adds	r1, r4, r0
 8001908:	428b      	cmp	r3, r1
 800190a:	bf01      	itttt	eq
 800190c:	6819      	ldreq	r1, [r3, #0]
 800190e:	685b      	ldreq	r3, [r3, #4]
 8001910:	1809      	addeq	r1, r1, r0
 8001912:	6021      	streq	r1, [r4, #0]
 8001914:	6063      	str	r3, [r4, #4]
 8001916:	6054      	str	r4, [r2, #4]
 8001918:	e7cb      	b.n	80018b2 <_free_r+0x22>
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	200000ec 	.word	0x200000ec

08001920 <sbrk_aligned>:
 8001920:	b570      	push	{r4, r5, r6, lr}
 8001922:	4e0e      	ldr	r6, [pc, #56]	; (800195c <sbrk_aligned+0x3c>)
 8001924:	460c      	mov	r4, r1
 8001926:	6831      	ldr	r1, [r6, #0]
 8001928:	4605      	mov	r5, r0
 800192a:	b911      	cbnz	r1, 8001932 <sbrk_aligned+0x12>
 800192c:	f000 f92e 	bl	8001b8c <_sbrk_r>
 8001930:	6030      	str	r0, [r6, #0]
 8001932:	4621      	mov	r1, r4
 8001934:	4628      	mov	r0, r5
 8001936:	f000 f929 	bl	8001b8c <_sbrk_r>
 800193a:	1c43      	adds	r3, r0, #1
 800193c:	d00a      	beq.n	8001954 <sbrk_aligned+0x34>
 800193e:	1cc4      	adds	r4, r0, #3
 8001940:	f024 0403 	bic.w	r4, r4, #3
 8001944:	42a0      	cmp	r0, r4
 8001946:	d007      	beq.n	8001958 <sbrk_aligned+0x38>
 8001948:	1a21      	subs	r1, r4, r0
 800194a:	4628      	mov	r0, r5
 800194c:	f000 f91e 	bl	8001b8c <_sbrk_r>
 8001950:	3001      	adds	r0, #1
 8001952:	d101      	bne.n	8001958 <sbrk_aligned+0x38>
 8001954:	f04f 34ff 	mov.w	r4, #4294967295
 8001958:	4620      	mov	r0, r4
 800195a:	bd70      	pop	{r4, r5, r6, pc}
 800195c:	200000f0 	.word	0x200000f0

08001960 <_malloc_r>:
 8001960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001964:	1ccd      	adds	r5, r1, #3
 8001966:	f025 0503 	bic.w	r5, r5, #3
 800196a:	3508      	adds	r5, #8
 800196c:	2d0c      	cmp	r5, #12
 800196e:	bf38      	it	cc
 8001970:	250c      	movcc	r5, #12
 8001972:	2d00      	cmp	r5, #0
 8001974:	4607      	mov	r7, r0
 8001976:	db01      	blt.n	800197c <_malloc_r+0x1c>
 8001978:	42a9      	cmp	r1, r5
 800197a:	d905      	bls.n	8001988 <_malloc_r+0x28>
 800197c:	230c      	movs	r3, #12
 800197e:	2600      	movs	r6, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4630      	mov	r0, r6
 8001984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001988:	4e2e      	ldr	r6, [pc, #184]	; (8001a44 <_malloc_r+0xe4>)
 800198a:	f000 fbeb 	bl	8002164 <__malloc_lock>
 800198e:	6833      	ldr	r3, [r6, #0]
 8001990:	461c      	mov	r4, r3
 8001992:	bb34      	cbnz	r4, 80019e2 <_malloc_r+0x82>
 8001994:	4629      	mov	r1, r5
 8001996:	4638      	mov	r0, r7
 8001998:	f7ff ffc2 	bl	8001920 <sbrk_aligned>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	4604      	mov	r4, r0
 80019a0:	d14d      	bne.n	8001a3e <_malloc_r+0xde>
 80019a2:	6834      	ldr	r4, [r6, #0]
 80019a4:	4626      	mov	r6, r4
 80019a6:	2e00      	cmp	r6, #0
 80019a8:	d140      	bne.n	8001a2c <_malloc_r+0xcc>
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	4631      	mov	r1, r6
 80019ae:	4638      	mov	r0, r7
 80019b0:	eb04 0803 	add.w	r8, r4, r3
 80019b4:	f000 f8ea 	bl	8001b8c <_sbrk_r>
 80019b8:	4580      	cmp	r8, r0
 80019ba:	d13a      	bne.n	8001a32 <_malloc_r+0xd2>
 80019bc:	6821      	ldr	r1, [r4, #0]
 80019be:	3503      	adds	r5, #3
 80019c0:	1a6d      	subs	r5, r5, r1
 80019c2:	f025 0503 	bic.w	r5, r5, #3
 80019c6:	3508      	adds	r5, #8
 80019c8:	2d0c      	cmp	r5, #12
 80019ca:	bf38      	it	cc
 80019cc:	250c      	movcc	r5, #12
 80019ce:	4638      	mov	r0, r7
 80019d0:	4629      	mov	r1, r5
 80019d2:	f7ff ffa5 	bl	8001920 <sbrk_aligned>
 80019d6:	3001      	adds	r0, #1
 80019d8:	d02b      	beq.n	8001a32 <_malloc_r+0xd2>
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	442b      	add	r3, r5
 80019de:	6023      	str	r3, [r4, #0]
 80019e0:	e00e      	b.n	8001a00 <_malloc_r+0xa0>
 80019e2:	6822      	ldr	r2, [r4, #0]
 80019e4:	1b52      	subs	r2, r2, r5
 80019e6:	d41e      	bmi.n	8001a26 <_malloc_r+0xc6>
 80019e8:	2a0b      	cmp	r2, #11
 80019ea:	d916      	bls.n	8001a1a <_malloc_r+0xba>
 80019ec:	1961      	adds	r1, r4, r5
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	6025      	str	r5, [r4, #0]
 80019f2:	bf18      	it	ne
 80019f4:	6059      	strne	r1, [r3, #4]
 80019f6:	6863      	ldr	r3, [r4, #4]
 80019f8:	bf08      	it	eq
 80019fa:	6031      	streq	r1, [r6, #0]
 80019fc:	5162      	str	r2, [r4, r5]
 80019fe:	604b      	str	r3, [r1, #4]
 8001a00:	4638      	mov	r0, r7
 8001a02:	f104 060b 	add.w	r6, r4, #11
 8001a06:	f000 fbb3 	bl	8002170 <__malloc_unlock>
 8001a0a:	f026 0607 	bic.w	r6, r6, #7
 8001a0e:	1d23      	adds	r3, r4, #4
 8001a10:	1af2      	subs	r2, r6, r3
 8001a12:	d0b6      	beq.n	8001982 <_malloc_r+0x22>
 8001a14:	1b9b      	subs	r3, r3, r6
 8001a16:	50a3      	str	r3, [r4, r2]
 8001a18:	e7b3      	b.n	8001982 <_malloc_r+0x22>
 8001a1a:	6862      	ldr	r2, [r4, #4]
 8001a1c:	42a3      	cmp	r3, r4
 8001a1e:	bf0c      	ite	eq
 8001a20:	6032      	streq	r2, [r6, #0]
 8001a22:	605a      	strne	r2, [r3, #4]
 8001a24:	e7ec      	b.n	8001a00 <_malloc_r+0xa0>
 8001a26:	4623      	mov	r3, r4
 8001a28:	6864      	ldr	r4, [r4, #4]
 8001a2a:	e7b2      	b.n	8001992 <_malloc_r+0x32>
 8001a2c:	4634      	mov	r4, r6
 8001a2e:	6876      	ldr	r6, [r6, #4]
 8001a30:	e7b9      	b.n	80019a6 <_malloc_r+0x46>
 8001a32:	230c      	movs	r3, #12
 8001a34:	4638      	mov	r0, r7
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	f000 fb9a 	bl	8002170 <__malloc_unlock>
 8001a3c:	e7a1      	b.n	8001982 <_malloc_r+0x22>
 8001a3e:	6025      	str	r5, [r4, #0]
 8001a40:	e7de      	b.n	8001a00 <_malloc_r+0xa0>
 8001a42:	bf00      	nop
 8001a44:	200000ec 	.word	0x200000ec

08001a48 <iprintf>:
 8001a48:	b40f      	push	{r0, r1, r2, r3}
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <iprintf+0x2c>)
 8001a4c:	b513      	push	{r0, r1, r4, lr}
 8001a4e:	681c      	ldr	r4, [r3, #0]
 8001a50:	b124      	cbz	r4, 8001a5c <iprintf+0x14>
 8001a52:	69a3      	ldr	r3, [r4, #24]
 8001a54:	b913      	cbnz	r3, 8001a5c <iprintf+0x14>
 8001a56:	4620      	mov	r0, r4
 8001a58:	f000 fa7e 	bl	8001f58 <__sinit>
 8001a5c:	ab05      	add	r3, sp, #20
 8001a5e:	4620      	mov	r0, r4
 8001a60:	9a04      	ldr	r2, [sp, #16]
 8001a62:	68a1      	ldr	r1, [r4, #8]
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	f000 fbb1 	bl	80021cc <_vfiprintf_r>
 8001a6a:	b002      	add	sp, #8
 8001a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a70:	b004      	add	sp, #16
 8001a72:	4770      	bx	lr
 8001a74:	2000001c 	.word	0x2000001c

08001a78 <putchar>:
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <putchar+0x24>)
 8001a7c:	4605      	mov	r5, r0
 8001a7e:	681c      	ldr	r4, [r3, #0]
 8001a80:	b124      	cbz	r4, 8001a8c <putchar+0x14>
 8001a82:	69a3      	ldr	r3, [r4, #24]
 8001a84:	b913      	cbnz	r3, 8001a8c <putchar+0x14>
 8001a86:	4620      	mov	r0, r4
 8001a88:	f000 fa66 	bl	8001f58 <__sinit>
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4620      	mov	r0, r4
 8001a90:	68a2      	ldr	r2, [r4, #8]
 8001a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a96:	f000 be5f 	b.w	8002758 <_putc_r>
 8001a9a:	bf00      	nop
 8001a9c:	2000001c 	.word	0x2000001c

08001aa0 <_puts_r>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	460e      	mov	r6, r1
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	b118      	cbz	r0, 8001ab0 <_puts_r+0x10>
 8001aa8:	6983      	ldr	r3, [r0, #24]
 8001aaa:	b90b      	cbnz	r3, 8001ab0 <_puts_r+0x10>
 8001aac:	f000 fa54 	bl	8001f58 <__sinit>
 8001ab0:	69ab      	ldr	r3, [r5, #24]
 8001ab2:	68ac      	ldr	r4, [r5, #8]
 8001ab4:	b913      	cbnz	r3, 8001abc <_puts_r+0x1c>
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f000 fa4e 	bl	8001f58 <__sinit>
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <_puts_r+0xd0>)
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	d120      	bne.n	8001b04 <_puts_r+0x64>
 8001ac2:	686c      	ldr	r4, [r5, #4]
 8001ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ac6:	07db      	lsls	r3, r3, #31
 8001ac8:	d405      	bmi.n	8001ad6 <_puts_r+0x36>
 8001aca:	89a3      	ldrh	r3, [r4, #12]
 8001acc:	0598      	lsls	r0, r3, #22
 8001ace:	d402      	bmi.n	8001ad6 <_puts_r+0x36>
 8001ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ad2:	f000 fadf 	bl	8002094 <__retarget_lock_acquire_recursive>
 8001ad6:	89a3      	ldrh	r3, [r4, #12]
 8001ad8:	0719      	lsls	r1, r3, #28
 8001ada:	d51d      	bpl.n	8001b18 <_puts_r+0x78>
 8001adc:	6923      	ldr	r3, [r4, #16]
 8001ade:	b1db      	cbz	r3, 8001b18 <_puts_r+0x78>
 8001ae0:	3e01      	subs	r6, #1
 8001ae2:	68a3      	ldr	r3, [r4, #8]
 8001ae4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60a3      	str	r3, [r4, #8]
 8001aec:	bb39      	cbnz	r1, 8001b3e <_puts_r+0x9e>
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da38      	bge.n	8001b64 <_puts_r+0xc4>
 8001af2:	4622      	mov	r2, r4
 8001af4:	210a      	movs	r1, #10
 8001af6:	4628      	mov	r0, r5
 8001af8:	f000 f858 	bl	8001bac <__swbuf_r>
 8001afc:	3001      	adds	r0, #1
 8001afe:	d011      	beq.n	8001b24 <_puts_r+0x84>
 8001b00:	250a      	movs	r5, #10
 8001b02:	e011      	b.n	8001b28 <_puts_r+0x88>
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <_puts_r+0xd4>)
 8001b06:	429c      	cmp	r4, r3
 8001b08:	d101      	bne.n	8001b0e <_puts_r+0x6e>
 8001b0a:	68ac      	ldr	r4, [r5, #8]
 8001b0c:	e7da      	b.n	8001ac4 <_puts_r+0x24>
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <_puts_r+0xd8>)
 8001b10:	429c      	cmp	r4, r3
 8001b12:	bf08      	it	eq
 8001b14:	68ec      	ldreq	r4, [r5, #12]
 8001b16:	e7d5      	b.n	8001ac4 <_puts_r+0x24>
 8001b18:	4621      	mov	r1, r4
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f000 f898 	bl	8001c50 <__swsetup_r>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d0dd      	beq.n	8001ae0 <_puts_r+0x40>
 8001b24:	f04f 35ff 	mov.w	r5, #4294967295
 8001b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b2a:	07da      	lsls	r2, r3, #31
 8001b2c:	d405      	bmi.n	8001b3a <_puts_r+0x9a>
 8001b2e:	89a3      	ldrh	r3, [r4, #12]
 8001b30:	059b      	lsls	r3, r3, #22
 8001b32:	d402      	bmi.n	8001b3a <_puts_r+0x9a>
 8001b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b36:	f000 faae 	bl	8002096 <__retarget_lock_release_recursive>
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da04      	bge.n	8001b4c <_puts_r+0xac>
 8001b42:	69a2      	ldr	r2, [r4, #24]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dc06      	bgt.n	8001b56 <_puts_r+0xb6>
 8001b48:	290a      	cmp	r1, #10
 8001b4a:	d004      	beq.n	8001b56 <_puts_r+0xb6>
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	1c5a      	adds	r2, r3, #1
 8001b50:	6022      	str	r2, [r4, #0]
 8001b52:	7019      	strb	r1, [r3, #0]
 8001b54:	e7c5      	b.n	8001ae2 <_puts_r+0x42>
 8001b56:	4622      	mov	r2, r4
 8001b58:	4628      	mov	r0, r5
 8001b5a:	f000 f827 	bl	8001bac <__swbuf_r>
 8001b5e:	3001      	adds	r0, #1
 8001b60:	d1bf      	bne.n	8001ae2 <_puts_r+0x42>
 8001b62:	e7df      	b.n	8001b24 <_puts_r+0x84>
 8001b64:	250a      	movs	r5, #10
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	6022      	str	r2, [r4, #0]
 8001b6c:	701d      	strb	r5, [r3, #0]
 8001b6e:	e7db      	b.n	8001b28 <_puts_r+0x88>
 8001b70:	08002a30 	.word	0x08002a30
 8001b74:	08002a50 	.word	0x08002a50
 8001b78:	08002a10 	.word	0x08002a10

08001b7c <puts>:
 8001b7c:	4b02      	ldr	r3, [pc, #8]	; (8001b88 <puts+0xc>)
 8001b7e:	4601      	mov	r1, r0
 8001b80:	6818      	ldr	r0, [r3, #0]
 8001b82:	f7ff bf8d 	b.w	8001aa0 <_puts_r>
 8001b86:	bf00      	nop
 8001b88:	2000001c 	.word	0x2000001c

08001b8c <_sbrk_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4d05      	ldr	r5, [pc, #20]	; (8001ba8 <_sbrk_r+0x1c>)
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	602b      	str	r3, [r5, #0]
 8001b98:	f7fe fc88 	bl	80004ac <_sbrk>
 8001b9c:	1c43      	adds	r3, r0, #1
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk_r+0x1a>
 8001ba0:	682b      	ldr	r3, [r5, #0]
 8001ba2:	b103      	cbz	r3, 8001ba6 <_sbrk_r+0x1a>
 8001ba4:	6023      	str	r3, [r4, #0]
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
 8001ba8:	200000f8 	.word	0x200000f8

08001bac <__swbuf_r>:
 8001bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bae:	460e      	mov	r6, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	4605      	mov	r5, r0
 8001bb4:	b118      	cbz	r0, 8001bbe <__swbuf_r+0x12>
 8001bb6:	6983      	ldr	r3, [r0, #24]
 8001bb8:	b90b      	cbnz	r3, 8001bbe <__swbuf_r+0x12>
 8001bba:	f000 f9cd 	bl	8001f58 <__sinit>
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <__swbuf_r+0x98>)
 8001bc0:	429c      	cmp	r4, r3
 8001bc2:	d12b      	bne.n	8001c1c <__swbuf_r+0x70>
 8001bc4:	686c      	ldr	r4, [r5, #4]
 8001bc6:	69a3      	ldr	r3, [r4, #24]
 8001bc8:	60a3      	str	r3, [r4, #8]
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	071a      	lsls	r2, r3, #28
 8001bce:	d52f      	bpl.n	8001c30 <__swbuf_r+0x84>
 8001bd0:	6923      	ldr	r3, [r4, #16]
 8001bd2:	b36b      	cbz	r3, 8001c30 <__swbuf_r+0x84>
 8001bd4:	6923      	ldr	r3, [r4, #16]
 8001bd6:	6820      	ldr	r0, [r4, #0]
 8001bd8:	b2f6      	uxtb	r6, r6
 8001bda:	1ac0      	subs	r0, r0, r3
 8001bdc:	6963      	ldr	r3, [r4, #20]
 8001bde:	4637      	mov	r7, r6
 8001be0:	4283      	cmp	r3, r0
 8001be2:	dc04      	bgt.n	8001bee <__swbuf_r+0x42>
 8001be4:	4621      	mov	r1, r4
 8001be6:	4628      	mov	r0, r5
 8001be8:	f000 f922 	bl	8001e30 <_fflush_r>
 8001bec:	bb30      	cbnz	r0, 8001c3c <__swbuf_r+0x90>
 8001bee:	68a3      	ldr	r3, [r4, #8]
 8001bf0:	3001      	adds	r0, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60a3      	str	r3, [r4, #8]
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	6022      	str	r2, [r4, #0]
 8001bfc:	701e      	strb	r6, [r3, #0]
 8001bfe:	6963      	ldr	r3, [r4, #20]
 8001c00:	4283      	cmp	r3, r0
 8001c02:	d004      	beq.n	8001c0e <__swbuf_r+0x62>
 8001c04:	89a3      	ldrh	r3, [r4, #12]
 8001c06:	07db      	lsls	r3, r3, #31
 8001c08:	d506      	bpl.n	8001c18 <__swbuf_r+0x6c>
 8001c0a:	2e0a      	cmp	r6, #10
 8001c0c:	d104      	bne.n	8001c18 <__swbuf_r+0x6c>
 8001c0e:	4621      	mov	r1, r4
 8001c10:	4628      	mov	r0, r5
 8001c12:	f000 f90d 	bl	8001e30 <_fflush_r>
 8001c16:	b988      	cbnz	r0, 8001c3c <__swbuf_r+0x90>
 8001c18:	4638      	mov	r0, r7
 8001c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <__swbuf_r+0x9c>)
 8001c1e:	429c      	cmp	r4, r3
 8001c20:	d101      	bne.n	8001c26 <__swbuf_r+0x7a>
 8001c22:	68ac      	ldr	r4, [r5, #8]
 8001c24:	e7cf      	b.n	8001bc6 <__swbuf_r+0x1a>
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <__swbuf_r+0xa0>)
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	bf08      	it	eq
 8001c2c:	68ec      	ldreq	r4, [r5, #12]
 8001c2e:	e7ca      	b.n	8001bc6 <__swbuf_r+0x1a>
 8001c30:	4621      	mov	r1, r4
 8001c32:	4628      	mov	r0, r5
 8001c34:	f000 f80c 	bl	8001c50 <__swsetup_r>
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d0cb      	beq.n	8001bd4 <__swbuf_r+0x28>
 8001c3c:	f04f 37ff 	mov.w	r7, #4294967295
 8001c40:	e7ea      	b.n	8001c18 <__swbuf_r+0x6c>
 8001c42:	bf00      	nop
 8001c44:	08002a30 	.word	0x08002a30
 8001c48:	08002a50 	.word	0x08002a50
 8001c4c:	08002a10 	.word	0x08002a10

08001c50 <__swsetup_r>:
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <__swsetup_r+0xcc>)
 8001c52:	b570      	push	{r4, r5, r6, lr}
 8001c54:	681d      	ldr	r5, [r3, #0]
 8001c56:	4606      	mov	r6, r0
 8001c58:	460c      	mov	r4, r1
 8001c5a:	b125      	cbz	r5, 8001c66 <__swsetup_r+0x16>
 8001c5c:	69ab      	ldr	r3, [r5, #24]
 8001c5e:	b913      	cbnz	r3, 8001c66 <__swsetup_r+0x16>
 8001c60:	4628      	mov	r0, r5
 8001c62:	f000 f979 	bl	8001f58 <__sinit>
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <__swsetup_r+0xd0>)
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	d10f      	bne.n	8001c8c <__swsetup_r+0x3c>
 8001c6c:	686c      	ldr	r4, [r5, #4]
 8001c6e:	89a3      	ldrh	r3, [r4, #12]
 8001c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c74:	0719      	lsls	r1, r3, #28
 8001c76:	d42c      	bmi.n	8001cd2 <__swsetup_r+0x82>
 8001c78:	06dd      	lsls	r5, r3, #27
 8001c7a:	d411      	bmi.n	8001ca0 <__swsetup_r+0x50>
 8001c7c:	2309      	movs	r3, #9
 8001c7e:	6033      	str	r3, [r6, #0]
 8001c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	81a3      	strh	r3, [r4, #12]
 8001c8a:	e03e      	b.n	8001d0a <__swsetup_r+0xba>
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <__swsetup_r+0xd4>)
 8001c8e:	429c      	cmp	r4, r3
 8001c90:	d101      	bne.n	8001c96 <__swsetup_r+0x46>
 8001c92:	68ac      	ldr	r4, [r5, #8]
 8001c94:	e7eb      	b.n	8001c6e <__swsetup_r+0x1e>
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <__swsetup_r+0xd8>)
 8001c98:	429c      	cmp	r4, r3
 8001c9a:	bf08      	it	eq
 8001c9c:	68ec      	ldreq	r4, [r5, #12]
 8001c9e:	e7e6      	b.n	8001c6e <__swsetup_r+0x1e>
 8001ca0:	0758      	lsls	r0, r3, #29
 8001ca2:	d512      	bpl.n	8001cca <__swsetup_r+0x7a>
 8001ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ca6:	b141      	cbz	r1, 8001cba <__swsetup_r+0x6a>
 8001ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cac:	4299      	cmp	r1, r3
 8001cae:	d002      	beq.n	8001cb6 <__swsetup_r+0x66>
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	f7ff fded 	bl	8001890 <_free_r>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001cc0:	81a3      	strh	r3, [r4, #12]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	6063      	str	r3, [r4, #4]
 8001cc6:	6923      	ldr	r3, [r4, #16]
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	81a3      	strh	r3, [r4, #12]
 8001cd2:	6923      	ldr	r3, [r4, #16]
 8001cd4:	b94b      	cbnz	r3, 8001cea <__swsetup_r+0x9a>
 8001cd6:	89a3      	ldrh	r3, [r4, #12]
 8001cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d003      	beq.n	8001cea <__swsetup_r+0x9a>
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	4630      	mov	r0, r6
 8001ce6:	f000 f9fd 	bl	80020e4 <__smakebuf_r>
 8001cea:	89a0      	ldrh	r0, [r4, #12]
 8001cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cf0:	f010 0301 	ands.w	r3, r0, #1
 8001cf4:	d00a      	beq.n	8001d0c <__swsetup_r+0xbc>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60a3      	str	r3, [r4, #8]
 8001cfa:	6963      	ldr	r3, [r4, #20]
 8001cfc:	425b      	negs	r3, r3
 8001cfe:	61a3      	str	r3, [r4, #24]
 8001d00:	6923      	ldr	r3, [r4, #16]
 8001d02:	b943      	cbnz	r3, 8001d16 <__swsetup_r+0xc6>
 8001d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001d08:	d1ba      	bne.n	8001c80 <__swsetup_r+0x30>
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	0781      	lsls	r1, r0, #30
 8001d0e:	bf58      	it	pl
 8001d10:	6963      	ldrpl	r3, [r4, #20]
 8001d12:	60a3      	str	r3, [r4, #8]
 8001d14:	e7f4      	b.n	8001d00 <__swsetup_r+0xb0>
 8001d16:	2000      	movs	r0, #0
 8001d18:	e7f7      	b.n	8001d0a <__swsetup_r+0xba>
 8001d1a:	bf00      	nop
 8001d1c:	2000001c 	.word	0x2000001c
 8001d20:	08002a30 	.word	0x08002a30
 8001d24:	08002a50 	.word	0x08002a50
 8001d28:	08002a10 	.word	0x08002a10

08001d2c <__sflush_r>:
 8001d2c:	898a      	ldrh	r2, [r1, #12]
 8001d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d30:	4605      	mov	r5, r0
 8001d32:	0710      	lsls	r0, r2, #28
 8001d34:	460c      	mov	r4, r1
 8001d36:	d457      	bmi.n	8001de8 <__sflush_r+0xbc>
 8001d38:	684b      	ldr	r3, [r1, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dc04      	bgt.n	8001d48 <__sflush_r+0x1c>
 8001d3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dc01      	bgt.n	8001d48 <__sflush_r+0x1c>
 8001d44:	2000      	movs	r0, #0
 8001d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d4a:	2e00      	cmp	r6, #0
 8001d4c:	d0fa      	beq.n	8001d44 <__sflush_r+0x18>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d54:	682f      	ldr	r7, [r5, #0]
 8001d56:	602b      	str	r3, [r5, #0]
 8001d58:	d032      	beq.n	8001dc0 <__sflush_r+0x94>
 8001d5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d5c:	89a3      	ldrh	r3, [r4, #12]
 8001d5e:	075a      	lsls	r2, r3, #29
 8001d60:	d505      	bpl.n	8001d6e <__sflush_r+0x42>
 8001d62:	6863      	ldr	r3, [r4, #4]
 8001d64:	1ac0      	subs	r0, r0, r3
 8001d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d68:	b10b      	cbz	r3, 8001d6e <__sflush_r+0x42>
 8001d6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d6c:	1ac0      	subs	r0, r0, r3
 8001d6e:	2300      	movs	r3, #0
 8001d70:	4602      	mov	r2, r0
 8001d72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d74:	4628      	mov	r0, r5
 8001d76:	6a21      	ldr	r1, [r4, #32]
 8001d78:	47b0      	blx	r6
 8001d7a:	1c43      	adds	r3, r0, #1
 8001d7c:	89a3      	ldrh	r3, [r4, #12]
 8001d7e:	d106      	bne.n	8001d8e <__sflush_r+0x62>
 8001d80:	6829      	ldr	r1, [r5, #0]
 8001d82:	291d      	cmp	r1, #29
 8001d84:	d82c      	bhi.n	8001de0 <__sflush_r+0xb4>
 8001d86:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <__sflush_r+0x100>)
 8001d88:	40ca      	lsrs	r2, r1
 8001d8a:	07d6      	lsls	r6, r2, #31
 8001d8c:	d528      	bpl.n	8001de0 <__sflush_r+0xb4>
 8001d8e:	2200      	movs	r2, #0
 8001d90:	6062      	str	r2, [r4, #4]
 8001d92:	6922      	ldr	r2, [r4, #16]
 8001d94:	04d9      	lsls	r1, r3, #19
 8001d96:	6022      	str	r2, [r4, #0]
 8001d98:	d504      	bpl.n	8001da4 <__sflush_r+0x78>
 8001d9a:	1c42      	adds	r2, r0, #1
 8001d9c:	d101      	bne.n	8001da2 <__sflush_r+0x76>
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	b903      	cbnz	r3, 8001da4 <__sflush_r+0x78>
 8001da2:	6560      	str	r0, [r4, #84]	; 0x54
 8001da4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001da6:	602f      	str	r7, [r5, #0]
 8001da8:	2900      	cmp	r1, #0
 8001daa:	d0cb      	beq.n	8001d44 <__sflush_r+0x18>
 8001dac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001db0:	4299      	cmp	r1, r3
 8001db2:	d002      	beq.n	8001dba <__sflush_r+0x8e>
 8001db4:	4628      	mov	r0, r5
 8001db6:	f7ff fd6b 	bl	8001890 <_free_r>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	6360      	str	r0, [r4, #52]	; 0x34
 8001dbe:	e7c2      	b.n	8001d46 <__sflush_r+0x1a>
 8001dc0:	6a21      	ldr	r1, [r4, #32]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	47b0      	blx	r6
 8001dc8:	1c41      	adds	r1, r0, #1
 8001dca:	d1c7      	bne.n	8001d5c <__sflush_r+0x30>
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0c4      	beq.n	8001d5c <__sflush_r+0x30>
 8001dd2:	2b1d      	cmp	r3, #29
 8001dd4:	d001      	beq.n	8001dda <__sflush_r+0xae>
 8001dd6:	2b16      	cmp	r3, #22
 8001dd8:	d101      	bne.n	8001dde <__sflush_r+0xb2>
 8001dda:	602f      	str	r7, [r5, #0]
 8001ddc:	e7b2      	b.n	8001d44 <__sflush_r+0x18>
 8001dde:	89a3      	ldrh	r3, [r4, #12]
 8001de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de4:	81a3      	strh	r3, [r4, #12]
 8001de6:	e7ae      	b.n	8001d46 <__sflush_r+0x1a>
 8001de8:	690f      	ldr	r7, [r1, #16]
 8001dea:	2f00      	cmp	r7, #0
 8001dec:	d0aa      	beq.n	8001d44 <__sflush_r+0x18>
 8001dee:	0793      	lsls	r3, r2, #30
 8001df0:	bf18      	it	ne
 8001df2:	2300      	movne	r3, #0
 8001df4:	680e      	ldr	r6, [r1, #0]
 8001df6:	bf08      	it	eq
 8001df8:	694b      	ldreq	r3, [r1, #20]
 8001dfa:	1bf6      	subs	r6, r6, r7
 8001dfc:	600f      	str	r7, [r1, #0]
 8001dfe:	608b      	str	r3, [r1, #8]
 8001e00:	2e00      	cmp	r6, #0
 8001e02:	dd9f      	ble.n	8001d44 <__sflush_r+0x18>
 8001e04:	4633      	mov	r3, r6
 8001e06:	463a      	mov	r2, r7
 8001e08:	4628      	mov	r0, r5
 8001e0a:	6a21      	ldr	r1, [r4, #32]
 8001e0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001e10:	47e0      	blx	ip
 8001e12:	2800      	cmp	r0, #0
 8001e14:	dc06      	bgt.n	8001e24 <__sflush_r+0xf8>
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e20:	81a3      	strh	r3, [r4, #12]
 8001e22:	e790      	b.n	8001d46 <__sflush_r+0x1a>
 8001e24:	4407      	add	r7, r0
 8001e26:	1a36      	subs	r6, r6, r0
 8001e28:	e7ea      	b.n	8001e00 <__sflush_r+0xd4>
 8001e2a:	bf00      	nop
 8001e2c:	20400001 	.word	0x20400001

08001e30 <_fflush_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	690b      	ldr	r3, [r1, #16]
 8001e34:	4605      	mov	r5, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	b913      	cbnz	r3, 8001e40 <_fflush_r+0x10>
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	b118      	cbz	r0, 8001e4a <_fflush_r+0x1a>
 8001e42:	6983      	ldr	r3, [r0, #24]
 8001e44:	b90b      	cbnz	r3, 8001e4a <_fflush_r+0x1a>
 8001e46:	f000 f887 	bl	8001f58 <__sinit>
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <_fflush_r+0x6c>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d11b      	bne.n	8001e88 <_fflush_r+0x58>
 8001e50:	686c      	ldr	r4, [r5, #4]
 8001e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0ef      	beq.n	8001e3a <_fflush_r+0xa>
 8001e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e5c:	07d0      	lsls	r0, r2, #31
 8001e5e:	d404      	bmi.n	8001e6a <_fflush_r+0x3a>
 8001e60:	0599      	lsls	r1, r3, #22
 8001e62:	d402      	bmi.n	8001e6a <_fflush_r+0x3a>
 8001e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e66:	f000 f915 	bl	8002094 <__retarget_lock_acquire_recursive>
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	4621      	mov	r1, r4
 8001e6e:	f7ff ff5d 	bl	8001d2c <__sflush_r>
 8001e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e74:	4605      	mov	r5, r0
 8001e76:	07da      	lsls	r2, r3, #31
 8001e78:	d4e0      	bmi.n	8001e3c <_fflush_r+0xc>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	059b      	lsls	r3, r3, #22
 8001e7e:	d4dd      	bmi.n	8001e3c <_fflush_r+0xc>
 8001e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e82:	f000 f908 	bl	8002096 <__retarget_lock_release_recursive>
 8001e86:	e7d9      	b.n	8001e3c <_fflush_r+0xc>
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <_fflush_r+0x70>)
 8001e8a:	429c      	cmp	r4, r3
 8001e8c:	d101      	bne.n	8001e92 <_fflush_r+0x62>
 8001e8e:	68ac      	ldr	r4, [r5, #8]
 8001e90:	e7df      	b.n	8001e52 <_fflush_r+0x22>
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <_fflush_r+0x74>)
 8001e94:	429c      	cmp	r4, r3
 8001e96:	bf08      	it	eq
 8001e98:	68ec      	ldreq	r4, [r5, #12]
 8001e9a:	e7da      	b.n	8001e52 <_fflush_r+0x22>
 8001e9c:	08002a30 	.word	0x08002a30
 8001ea0:	08002a50 	.word	0x08002a50
 8001ea4:	08002a10 	.word	0x08002a10

08001ea8 <std>:
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	b510      	push	{r4, lr}
 8001eac:	4604      	mov	r4, r0
 8001eae:	e9c0 3300 	strd	r3, r3, [r0]
 8001eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001eb6:	6083      	str	r3, [r0, #8]
 8001eb8:	8181      	strh	r1, [r0, #12]
 8001eba:	6643      	str	r3, [r0, #100]	; 0x64
 8001ebc:	81c2      	strh	r2, [r0, #14]
 8001ebe:	6183      	str	r3, [r0, #24]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	305c      	adds	r0, #92	; 0x5c
 8001ec6:	f7ff fcdb 	bl	8001880 <memset>
 8001eca:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <std+0x38>)
 8001ecc:	6224      	str	r4, [r4, #32]
 8001ece:	6263      	str	r3, [r4, #36]	; 0x24
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <std+0x3c>)
 8001ed2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ed4:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <std+0x40>)
 8001ed6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <std+0x44>)
 8001eda:	6323      	str	r3, [r4, #48]	; 0x30
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	bf00      	nop
 8001ee0:	080027e9 	.word	0x080027e9
 8001ee4:	0800280b 	.word	0x0800280b
 8001ee8:	08002843 	.word	0x08002843
 8001eec:	08002867 	.word	0x08002867

08001ef0 <_cleanup_r>:
 8001ef0:	4901      	ldr	r1, [pc, #4]	; (8001ef8 <_cleanup_r+0x8>)
 8001ef2:	f000 b8af 	b.w	8002054 <_fwalk_reent>
 8001ef6:	bf00      	nop
 8001ef8:	08001e31 	.word	0x08001e31

08001efc <__sfmoreglue>:
 8001efc:	2268      	movs	r2, #104	; 0x68
 8001efe:	b570      	push	{r4, r5, r6, lr}
 8001f00:	1e4d      	subs	r5, r1, #1
 8001f02:	4355      	muls	r5, r2
 8001f04:	460e      	mov	r6, r1
 8001f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f0a:	f7ff fd29 	bl	8001960 <_malloc_r>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	b140      	cbz	r0, 8001f24 <__sfmoreglue+0x28>
 8001f12:	2100      	movs	r1, #0
 8001f14:	e9c0 1600 	strd	r1, r6, [r0]
 8001f18:	300c      	adds	r0, #12
 8001f1a:	60a0      	str	r0, [r4, #8]
 8001f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f20:	f7ff fcae 	bl	8001880 <memset>
 8001f24:	4620      	mov	r0, r4
 8001f26:	bd70      	pop	{r4, r5, r6, pc}

08001f28 <__sfp_lock_acquire>:
 8001f28:	4801      	ldr	r0, [pc, #4]	; (8001f30 <__sfp_lock_acquire+0x8>)
 8001f2a:	f000 b8b3 	b.w	8002094 <__retarget_lock_acquire_recursive>
 8001f2e:	bf00      	nop
 8001f30:	200000f5 	.word	0x200000f5

08001f34 <__sfp_lock_release>:
 8001f34:	4801      	ldr	r0, [pc, #4]	; (8001f3c <__sfp_lock_release+0x8>)
 8001f36:	f000 b8ae 	b.w	8002096 <__retarget_lock_release_recursive>
 8001f3a:	bf00      	nop
 8001f3c:	200000f5 	.word	0x200000f5

08001f40 <__sinit_lock_acquire>:
 8001f40:	4801      	ldr	r0, [pc, #4]	; (8001f48 <__sinit_lock_acquire+0x8>)
 8001f42:	f000 b8a7 	b.w	8002094 <__retarget_lock_acquire_recursive>
 8001f46:	bf00      	nop
 8001f48:	200000f6 	.word	0x200000f6

08001f4c <__sinit_lock_release>:
 8001f4c:	4801      	ldr	r0, [pc, #4]	; (8001f54 <__sinit_lock_release+0x8>)
 8001f4e:	f000 b8a2 	b.w	8002096 <__retarget_lock_release_recursive>
 8001f52:	bf00      	nop
 8001f54:	200000f6 	.word	0x200000f6

08001f58 <__sinit>:
 8001f58:	b510      	push	{r4, lr}
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	f7ff fff0 	bl	8001f40 <__sinit_lock_acquire>
 8001f60:	69a3      	ldr	r3, [r4, #24]
 8001f62:	b11b      	cbz	r3, 8001f6c <__sinit+0x14>
 8001f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f68:	f7ff bff0 	b.w	8001f4c <__sinit_lock_release>
 8001f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f70:	6523      	str	r3, [r4, #80]	; 0x50
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <__sinit+0x68>)
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <__sinit+0x6c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	bf08      	it	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	4620      	mov	r0, r4
 8001f82:	bf08      	it	eq
 8001f84:	61a3      	streq	r3, [r4, #24]
 8001f86:	f000 f81f 	bl	8001fc8 <__sfp>
 8001f8a:	6060      	str	r0, [r4, #4]
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f000 f81b 	bl	8001fc8 <__sfp>
 8001f92:	60a0      	str	r0, [r4, #8]
 8001f94:	4620      	mov	r0, r4
 8001f96:	f000 f817 	bl	8001fc8 <__sfp>
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2104      	movs	r1, #4
 8001f9e:	60e0      	str	r0, [r4, #12]
 8001fa0:	6860      	ldr	r0, [r4, #4]
 8001fa2:	f7ff ff81 	bl	8001ea8 <std>
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2109      	movs	r1, #9
 8001faa:	68a0      	ldr	r0, [r4, #8]
 8001fac:	f7ff ff7c 	bl	8001ea8 <std>
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	2112      	movs	r1, #18
 8001fb4:	68e0      	ldr	r0, [r4, #12]
 8001fb6:	f7ff ff77 	bl	8001ea8 <std>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61a3      	str	r3, [r4, #24]
 8001fbe:	e7d1      	b.n	8001f64 <__sinit+0xc>
 8001fc0:	08002a0c 	.word	0x08002a0c
 8001fc4:	08001ef1 	.word	0x08001ef1

08001fc8 <__sfp>:
 8001fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fca:	4607      	mov	r7, r0
 8001fcc:	f7ff ffac 	bl	8001f28 <__sfp_lock_acquire>
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <__sfp+0x84>)
 8001fd2:	681e      	ldr	r6, [r3, #0]
 8001fd4:	69b3      	ldr	r3, [r6, #24]
 8001fd6:	b913      	cbnz	r3, 8001fde <__sfp+0x16>
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f7ff ffbd 	bl	8001f58 <__sinit>
 8001fde:	3648      	adds	r6, #72	; 0x48
 8001fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	d503      	bpl.n	8001ff0 <__sfp+0x28>
 8001fe8:	6833      	ldr	r3, [r6, #0]
 8001fea:	b30b      	cbz	r3, 8002030 <__sfp+0x68>
 8001fec:	6836      	ldr	r6, [r6, #0]
 8001fee:	e7f7      	b.n	8001fe0 <__sfp+0x18>
 8001ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ff4:	b9d5      	cbnz	r5, 800202c <__sfp+0x64>
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <__sfp+0x88>)
 8001ff8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ffc:	60e3      	str	r3, [r4, #12]
 8001ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8002000:	f000 f847 	bl	8002092 <__retarget_lock_init_recursive>
 8002004:	f7ff ff96 	bl	8001f34 <__sfp_lock_release>
 8002008:	2208      	movs	r2, #8
 800200a:	4629      	mov	r1, r5
 800200c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002010:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002014:	6025      	str	r5, [r4, #0]
 8002016:	61a5      	str	r5, [r4, #24]
 8002018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800201c:	f7ff fc30 	bl	8001880 <memset>
 8002020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002028:	4620      	mov	r0, r4
 800202a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800202c:	3468      	adds	r4, #104	; 0x68
 800202e:	e7d9      	b.n	8001fe4 <__sfp+0x1c>
 8002030:	2104      	movs	r1, #4
 8002032:	4638      	mov	r0, r7
 8002034:	f7ff ff62 	bl	8001efc <__sfmoreglue>
 8002038:	4604      	mov	r4, r0
 800203a:	6030      	str	r0, [r6, #0]
 800203c:	2800      	cmp	r0, #0
 800203e:	d1d5      	bne.n	8001fec <__sfp+0x24>
 8002040:	f7ff ff78 	bl	8001f34 <__sfp_lock_release>
 8002044:	230c      	movs	r3, #12
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	e7ee      	b.n	8002028 <__sfp+0x60>
 800204a:	bf00      	nop
 800204c:	08002a0c 	.word	0x08002a0c
 8002050:	ffff0001 	.word	0xffff0001

08002054 <_fwalk_reent>:
 8002054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002058:	4606      	mov	r6, r0
 800205a:	4688      	mov	r8, r1
 800205c:	2700      	movs	r7, #0
 800205e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002066:	f1b9 0901 	subs.w	r9, r9, #1
 800206a:	d505      	bpl.n	8002078 <_fwalk_reent+0x24>
 800206c:	6824      	ldr	r4, [r4, #0]
 800206e:	2c00      	cmp	r4, #0
 8002070:	d1f7      	bne.n	8002062 <_fwalk_reent+0xe>
 8002072:	4638      	mov	r0, r7
 8002074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002078:	89ab      	ldrh	r3, [r5, #12]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d907      	bls.n	800208e <_fwalk_reent+0x3a>
 800207e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002082:	3301      	adds	r3, #1
 8002084:	d003      	beq.n	800208e <_fwalk_reent+0x3a>
 8002086:	4629      	mov	r1, r5
 8002088:	4630      	mov	r0, r6
 800208a:	47c0      	blx	r8
 800208c:	4307      	orrs	r7, r0
 800208e:	3568      	adds	r5, #104	; 0x68
 8002090:	e7e9      	b.n	8002066 <_fwalk_reent+0x12>

08002092 <__retarget_lock_init_recursive>:
 8002092:	4770      	bx	lr

08002094 <__retarget_lock_acquire_recursive>:
 8002094:	4770      	bx	lr

08002096 <__retarget_lock_release_recursive>:
 8002096:	4770      	bx	lr

08002098 <__swhatbuf_r>:
 8002098:	b570      	push	{r4, r5, r6, lr}
 800209a:	460e      	mov	r6, r1
 800209c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a0:	4614      	mov	r4, r2
 80020a2:	2900      	cmp	r1, #0
 80020a4:	461d      	mov	r5, r3
 80020a6:	b096      	sub	sp, #88	; 0x58
 80020a8:	da08      	bge.n	80020bc <__swhatbuf_r+0x24>
 80020aa:	2200      	movs	r2, #0
 80020ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	061a      	lsls	r2, r3, #24
 80020b4:	d410      	bmi.n	80020d8 <__swhatbuf_r+0x40>
 80020b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ba:	e00e      	b.n	80020da <__swhatbuf_r+0x42>
 80020bc:	466a      	mov	r2, sp
 80020be:	f000 fbf9 	bl	80028b4 <_fstat_r>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	dbf1      	blt.n	80020aa <__swhatbuf_r+0x12>
 80020c6:	9a01      	ldr	r2, [sp, #4]
 80020c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020d0:	425a      	negs	r2, r3
 80020d2:	415a      	adcs	r2, r3
 80020d4:	602a      	str	r2, [r5, #0]
 80020d6:	e7ee      	b.n	80020b6 <__swhatbuf_r+0x1e>
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	2000      	movs	r0, #0
 80020dc:	6023      	str	r3, [r4, #0]
 80020de:	b016      	add	sp, #88	; 0x58
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e4 <__smakebuf_r>:
 80020e4:	898b      	ldrh	r3, [r1, #12]
 80020e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020e8:	079d      	lsls	r5, r3, #30
 80020ea:	4606      	mov	r6, r0
 80020ec:	460c      	mov	r4, r1
 80020ee:	d507      	bpl.n	8002100 <__smakebuf_r+0x1c>
 80020f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	2301      	movs	r3, #1
 80020fa:	6163      	str	r3, [r4, #20]
 80020fc:	b002      	add	sp, #8
 80020fe:	bd70      	pop	{r4, r5, r6, pc}
 8002100:	466a      	mov	r2, sp
 8002102:	ab01      	add	r3, sp, #4
 8002104:	f7ff ffc8 	bl	8002098 <__swhatbuf_r>
 8002108:	9900      	ldr	r1, [sp, #0]
 800210a:	4605      	mov	r5, r0
 800210c:	4630      	mov	r0, r6
 800210e:	f7ff fc27 	bl	8001960 <_malloc_r>
 8002112:	b948      	cbnz	r0, 8002128 <__smakebuf_r+0x44>
 8002114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002118:	059a      	lsls	r2, r3, #22
 800211a:	d4ef      	bmi.n	80020fc <__smakebuf_r+0x18>
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	81a3      	strh	r3, [r4, #12]
 8002126:	e7e3      	b.n	80020f0 <__smakebuf_r+0xc>
 8002128:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <__smakebuf_r+0x7c>)
 800212a:	62b3      	str	r3, [r6, #40]	; 0x28
 800212c:	89a3      	ldrh	r3, [r4, #12]
 800212e:	6020      	str	r0, [r4, #0]
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	9b00      	ldr	r3, [sp, #0]
 8002138:	6120      	str	r0, [r4, #16]
 800213a:	6163      	str	r3, [r4, #20]
 800213c:	9b01      	ldr	r3, [sp, #4]
 800213e:	b15b      	cbz	r3, 8002158 <__smakebuf_r+0x74>
 8002140:	4630      	mov	r0, r6
 8002142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002146:	f000 fbc7 	bl	80028d8 <_isatty_r>
 800214a:	b128      	cbz	r0, 8002158 <__smakebuf_r+0x74>
 800214c:	89a3      	ldrh	r3, [r4, #12]
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	81a3      	strh	r3, [r4, #12]
 8002158:	89a0      	ldrh	r0, [r4, #12]
 800215a:	4305      	orrs	r5, r0
 800215c:	81a5      	strh	r5, [r4, #12]
 800215e:	e7cd      	b.n	80020fc <__smakebuf_r+0x18>
 8002160:	08001ef1 	.word	0x08001ef1

08002164 <__malloc_lock>:
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <__malloc_lock+0x8>)
 8002166:	f7ff bf95 	b.w	8002094 <__retarget_lock_acquire_recursive>
 800216a:	bf00      	nop
 800216c:	200000f4 	.word	0x200000f4

08002170 <__malloc_unlock>:
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <__malloc_unlock+0x8>)
 8002172:	f7ff bf90 	b.w	8002096 <__retarget_lock_release_recursive>
 8002176:	bf00      	nop
 8002178:	200000f4 	.word	0x200000f4

0800217c <__sfputc_r>:
 800217c:	6893      	ldr	r3, [r2, #8]
 800217e:	b410      	push	{r4}
 8002180:	3b01      	subs	r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	6093      	str	r3, [r2, #8]
 8002186:	da07      	bge.n	8002198 <__sfputc_r+0x1c>
 8002188:	6994      	ldr	r4, [r2, #24]
 800218a:	42a3      	cmp	r3, r4
 800218c:	db01      	blt.n	8002192 <__sfputc_r+0x16>
 800218e:	290a      	cmp	r1, #10
 8002190:	d102      	bne.n	8002198 <__sfputc_r+0x1c>
 8002192:	bc10      	pop	{r4}
 8002194:	f7ff bd0a 	b.w	8001bac <__swbuf_r>
 8002198:	6813      	ldr	r3, [r2, #0]
 800219a:	1c58      	adds	r0, r3, #1
 800219c:	6010      	str	r0, [r2, #0]
 800219e:	7019      	strb	r1, [r3, #0]
 80021a0:	4608      	mov	r0, r1
 80021a2:	bc10      	pop	{r4}
 80021a4:	4770      	bx	lr

080021a6 <__sfputs_r>:
 80021a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a8:	4606      	mov	r6, r0
 80021aa:	460f      	mov	r7, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	18d5      	adds	r5, r2, r3
 80021b0:	42ac      	cmp	r4, r5
 80021b2:	d101      	bne.n	80021b8 <__sfputs_r+0x12>
 80021b4:	2000      	movs	r0, #0
 80021b6:	e007      	b.n	80021c8 <__sfputs_r+0x22>
 80021b8:	463a      	mov	r2, r7
 80021ba:	4630      	mov	r0, r6
 80021bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021c0:	f7ff ffdc 	bl	800217c <__sfputc_r>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d1f3      	bne.n	80021b0 <__sfputs_r+0xa>
 80021c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021cc <_vfiprintf_r>:
 80021cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d0:	460d      	mov	r5, r1
 80021d2:	4614      	mov	r4, r2
 80021d4:	4698      	mov	r8, r3
 80021d6:	4606      	mov	r6, r0
 80021d8:	b09d      	sub	sp, #116	; 0x74
 80021da:	b118      	cbz	r0, 80021e4 <_vfiprintf_r+0x18>
 80021dc:	6983      	ldr	r3, [r0, #24]
 80021de:	b90b      	cbnz	r3, 80021e4 <_vfiprintf_r+0x18>
 80021e0:	f7ff feba 	bl	8001f58 <__sinit>
 80021e4:	4b89      	ldr	r3, [pc, #548]	; (800240c <_vfiprintf_r+0x240>)
 80021e6:	429d      	cmp	r5, r3
 80021e8:	d11b      	bne.n	8002222 <_vfiprintf_r+0x56>
 80021ea:	6875      	ldr	r5, [r6, #4]
 80021ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021ee:	07d9      	lsls	r1, r3, #31
 80021f0:	d405      	bmi.n	80021fe <_vfiprintf_r+0x32>
 80021f2:	89ab      	ldrh	r3, [r5, #12]
 80021f4:	059a      	lsls	r2, r3, #22
 80021f6:	d402      	bmi.n	80021fe <_vfiprintf_r+0x32>
 80021f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021fa:	f7ff ff4b 	bl	8002094 <__retarget_lock_acquire_recursive>
 80021fe:	89ab      	ldrh	r3, [r5, #12]
 8002200:	071b      	lsls	r3, r3, #28
 8002202:	d501      	bpl.n	8002208 <_vfiprintf_r+0x3c>
 8002204:	692b      	ldr	r3, [r5, #16]
 8002206:	b9eb      	cbnz	r3, 8002244 <_vfiprintf_r+0x78>
 8002208:	4629      	mov	r1, r5
 800220a:	4630      	mov	r0, r6
 800220c:	f7ff fd20 	bl	8001c50 <__swsetup_r>
 8002210:	b1c0      	cbz	r0, 8002244 <_vfiprintf_r+0x78>
 8002212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002214:	07dc      	lsls	r4, r3, #31
 8002216:	d50e      	bpl.n	8002236 <_vfiprintf_r+0x6a>
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	b01d      	add	sp, #116	; 0x74
 800221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002222:	4b7b      	ldr	r3, [pc, #492]	; (8002410 <_vfiprintf_r+0x244>)
 8002224:	429d      	cmp	r5, r3
 8002226:	d101      	bne.n	800222c <_vfiprintf_r+0x60>
 8002228:	68b5      	ldr	r5, [r6, #8]
 800222a:	e7df      	b.n	80021ec <_vfiprintf_r+0x20>
 800222c:	4b79      	ldr	r3, [pc, #484]	; (8002414 <_vfiprintf_r+0x248>)
 800222e:	429d      	cmp	r5, r3
 8002230:	bf08      	it	eq
 8002232:	68f5      	ldreq	r5, [r6, #12]
 8002234:	e7da      	b.n	80021ec <_vfiprintf_r+0x20>
 8002236:	89ab      	ldrh	r3, [r5, #12]
 8002238:	0598      	lsls	r0, r3, #22
 800223a:	d4ed      	bmi.n	8002218 <_vfiprintf_r+0x4c>
 800223c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800223e:	f7ff ff2a 	bl	8002096 <__retarget_lock_release_recursive>
 8002242:	e7e9      	b.n	8002218 <_vfiprintf_r+0x4c>
 8002244:	2300      	movs	r3, #0
 8002246:	9309      	str	r3, [sp, #36]	; 0x24
 8002248:	2320      	movs	r3, #32
 800224a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800224e:	2330      	movs	r3, #48	; 0x30
 8002250:	f04f 0901 	mov.w	r9, #1
 8002254:	f8cd 800c 	str.w	r8, [sp, #12]
 8002258:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002418 <_vfiprintf_r+0x24c>
 800225c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002260:	4623      	mov	r3, r4
 8002262:	469a      	mov	sl, r3
 8002264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002268:	b10a      	cbz	r2, 800226e <_vfiprintf_r+0xa2>
 800226a:	2a25      	cmp	r2, #37	; 0x25
 800226c:	d1f9      	bne.n	8002262 <_vfiprintf_r+0x96>
 800226e:	ebba 0b04 	subs.w	fp, sl, r4
 8002272:	d00b      	beq.n	800228c <_vfiprintf_r+0xc0>
 8002274:	465b      	mov	r3, fp
 8002276:	4622      	mov	r2, r4
 8002278:	4629      	mov	r1, r5
 800227a:	4630      	mov	r0, r6
 800227c:	f7ff ff93 	bl	80021a6 <__sfputs_r>
 8002280:	3001      	adds	r0, #1
 8002282:	f000 80aa 	beq.w	80023da <_vfiprintf_r+0x20e>
 8002286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002288:	445a      	add	r2, fp
 800228a:	9209      	str	r2, [sp, #36]	; 0x24
 800228c:	f89a 3000 	ldrb.w	r3, [sl]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80a2 	beq.w	80023da <_vfiprintf_r+0x20e>
 8002296:	2300      	movs	r3, #0
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022a0:	f10a 0a01 	add.w	sl, sl, #1
 80022a4:	9304      	str	r3, [sp, #16]
 80022a6:	9307      	str	r3, [sp, #28]
 80022a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022ac:	931a      	str	r3, [sp, #104]	; 0x68
 80022ae:	4654      	mov	r4, sl
 80022b0:	2205      	movs	r2, #5
 80022b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022b6:	4858      	ldr	r0, [pc, #352]	; (8002418 <_vfiprintf_r+0x24c>)
 80022b8:	f000 fb30 	bl	800291c <memchr>
 80022bc:	9a04      	ldr	r2, [sp, #16]
 80022be:	b9d8      	cbnz	r0, 80022f8 <_vfiprintf_r+0x12c>
 80022c0:	06d1      	lsls	r1, r2, #27
 80022c2:	bf44      	itt	mi
 80022c4:	2320      	movmi	r3, #32
 80022c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022ca:	0713      	lsls	r3, r2, #28
 80022cc:	bf44      	itt	mi
 80022ce:	232b      	movmi	r3, #43	; 0x2b
 80022d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022d4:	f89a 3000 	ldrb.w	r3, [sl]
 80022d8:	2b2a      	cmp	r3, #42	; 0x2a
 80022da:	d015      	beq.n	8002308 <_vfiprintf_r+0x13c>
 80022dc:	4654      	mov	r4, sl
 80022de:	2000      	movs	r0, #0
 80022e0:	f04f 0c0a 	mov.w	ip, #10
 80022e4:	9a07      	ldr	r2, [sp, #28]
 80022e6:	4621      	mov	r1, r4
 80022e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022ec:	3b30      	subs	r3, #48	; 0x30
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	d94e      	bls.n	8002390 <_vfiprintf_r+0x1c4>
 80022f2:	b1b0      	cbz	r0, 8002322 <_vfiprintf_r+0x156>
 80022f4:	9207      	str	r2, [sp, #28]
 80022f6:	e014      	b.n	8002322 <_vfiprintf_r+0x156>
 80022f8:	eba0 0308 	sub.w	r3, r0, r8
 80022fc:	fa09 f303 	lsl.w	r3, r9, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	46a2      	mov	sl, r4
 8002304:	9304      	str	r3, [sp, #16]
 8002306:	e7d2      	b.n	80022ae <_vfiprintf_r+0xe2>
 8002308:	9b03      	ldr	r3, [sp, #12]
 800230a:	1d19      	adds	r1, r3, #4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	9103      	str	r1, [sp, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	bfbb      	ittet	lt
 8002314:	425b      	neglt	r3, r3
 8002316:	f042 0202 	orrlt.w	r2, r2, #2
 800231a:	9307      	strge	r3, [sp, #28]
 800231c:	9307      	strlt	r3, [sp, #28]
 800231e:	bfb8      	it	lt
 8002320:	9204      	strlt	r2, [sp, #16]
 8002322:	7823      	ldrb	r3, [r4, #0]
 8002324:	2b2e      	cmp	r3, #46	; 0x2e
 8002326:	d10c      	bne.n	8002342 <_vfiprintf_r+0x176>
 8002328:	7863      	ldrb	r3, [r4, #1]
 800232a:	2b2a      	cmp	r3, #42	; 0x2a
 800232c:	d135      	bne.n	800239a <_vfiprintf_r+0x1ce>
 800232e:	9b03      	ldr	r3, [sp, #12]
 8002330:	3402      	adds	r4, #2
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	9203      	str	r2, [sp, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	bfb8      	it	lt
 800233c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002340:	9305      	str	r3, [sp, #20]
 8002342:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800241c <_vfiprintf_r+0x250>
 8002346:	2203      	movs	r2, #3
 8002348:	4650      	mov	r0, sl
 800234a:	7821      	ldrb	r1, [r4, #0]
 800234c:	f000 fae6 	bl	800291c <memchr>
 8002350:	b140      	cbz	r0, 8002364 <_vfiprintf_r+0x198>
 8002352:	2340      	movs	r3, #64	; 0x40
 8002354:	eba0 000a 	sub.w	r0, r0, sl
 8002358:	fa03 f000 	lsl.w	r0, r3, r0
 800235c:	9b04      	ldr	r3, [sp, #16]
 800235e:	3401      	adds	r4, #1
 8002360:	4303      	orrs	r3, r0
 8002362:	9304      	str	r3, [sp, #16]
 8002364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002368:	2206      	movs	r2, #6
 800236a:	482d      	ldr	r0, [pc, #180]	; (8002420 <_vfiprintf_r+0x254>)
 800236c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002370:	f000 fad4 	bl	800291c <memchr>
 8002374:	2800      	cmp	r0, #0
 8002376:	d03f      	beq.n	80023f8 <_vfiprintf_r+0x22c>
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <_vfiprintf_r+0x258>)
 800237a:	bb1b      	cbnz	r3, 80023c4 <_vfiprintf_r+0x1f8>
 800237c:	9b03      	ldr	r3, [sp, #12]
 800237e:	3307      	adds	r3, #7
 8002380:	f023 0307 	bic.w	r3, r3, #7
 8002384:	3308      	adds	r3, #8
 8002386:	9303      	str	r3, [sp, #12]
 8002388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800238a:	443b      	add	r3, r7
 800238c:	9309      	str	r3, [sp, #36]	; 0x24
 800238e:	e767      	b.n	8002260 <_vfiprintf_r+0x94>
 8002390:	460c      	mov	r4, r1
 8002392:	2001      	movs	r0, #1
 8002394:	fb0c 3202 	mla	r2, ip, r2, r3
 8002398:	e7a5      	b.n	80022e6 <_vfiprintf_r+0x11a>
 800239a:	2300      	movs	r3, #0
 800239c:	f04f 0c0a 	mov.w	ip, #10
 80023a0:	4619      	mov	r1, r3
 80023a2:	3401      	adds	r4, #1
 80023a4:	9305      	str	r3, [sp, #20]
 80023a6:	4620      	mov	r0, r4
 80023a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023ac:	3a30      	subs	r2, #48	; 0x30
 80023ae:	2a09      	cmp	r2, #9
 80023b0:	d903      	bls.n	80023ba <_vfiprintf_r+0x1ee>
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0c5      	beq.n	8002342 <_vfiprintf_r+0x176>
 80023b6:	9105      	str	r1, [sp, #20]
 80023b8:	e7c3      	b.n	8002342 <_vfiprintf_r+0x176>
 80023ba:	4604      	mov	r4, r0
 80023bc:	2301      	movs	r3, #1
 80023be:	fb0c 2101 	mla	r1, ip, r1, r2
 80023c2:	e7f0      	b.n	80023a6 <_vfiprintf_r+0x1da>
 80023c4:	ab03      	add	r3, sp, #12
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	462a      	mov	r2, r5
 80023ca:	4630      	mov	r0, r6
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <_vfiprintf_r+0x25c>)
 80023ce:	a904      	add	r1, sp, #16
 80023d0:	f3af 8000 	nop.w
 80023d4:	4607      	mov	r7, r0
 80023d6:	1c78      	adds	r0, r7, #1
 80023d8:	d1d6      	bne.n	8002388 <_vfiprintf_r+0x1bc>
 80023da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023dc:	07d9      	lsls	r1, r3, #31
 80023de:	d405      	bmi.n	80023ec <_vfiprintf_r+0x220>
 80023e0:	89ab      	ldrh	r3, [r5, #12]
 80023e2:	059a      	lsls	r2, r3, #22
 80023e4:	d402      	bmi.n	80023ec <_vfiprintf_r+0x220>
 80023e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023e8:	f7ff fe55 	bl	8002096 <__retarget_lock_release_recursive>
 80023ec:	89ab      	ldrh	r3, [r5, #12]
 80023ee:	065b      	lsls	r3, r3, #25
 80023f0:	f53f af12 	bmi.w	8002218 <_vfiprintf_r+0x4c>
 80023f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023f6:	e711      	b.n	800221c <_vfiprintf_r+0x50>
 80023f8:	ab03      	add	r3, sp, #12
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	462a      	mov	r2, r5
 80023fe:	4630      	mov	r0, r6
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <_vfiprintf_r+0x25c>)
 8002402:	a904      	add	r1, sp, #16
 8002404:	f000 f882 	bl	800250c <_printf_i>
 8002408:	e7e4      	b.n	80023d4 <_vfiprintf_r+0x208>
 800240a:	bf00      	nop
 800240c:	08002a30 	.word	0x08002a30
 8002410:	08002a50 	.word	0x08002a50
 8002414:	08002a10 	.word	0x08002a10
 8002418:	08002a70 	.word	0x08002a70
 800241c:	08002a76 	.word	0x08002a76
 8002420:	08002a7a 	.word	0x08002a7a
 8002424:	00000000 	.word	0x00000000
 8002428:	080021a7 	.word	0x080021a7

0800242c <_printf_common>:
 800242c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002430:	4616      	mov	r6, r2
 8002432:	4699      	mov	r9, r3
 8002434:	688a      	ldr	r2, [r1, #8]
 8002436:	690b      	ldr	r3, [r1, #16]
 8002438:	4607      	mov	r7, r0
 800243a:	4293      	cmp	r3, r2
 800243c:	bfb8      	it	lt
 800243e:	4613      	movlt	r3, r2
 8002440:	6033      	str	r3, [r6, #0]
 8002442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002446:	460c      	mov	r4, r1
 8002448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800244c:	b10a      	cbz	r2, 8002452 <_printf_common+0x26>
 800244e:	3301      	adds	r3, #1
 8002450:	6033      	str	r3, [r6, #0]
 8002452:	6823      	ldr	r3, [r4, #0]
 8002454:	0699      	lsls	r1, r3, #26
 8002456:	bf42      	ittt	mi
 8002458:	6833      	ldrmi	r3, [r6, #0]
 800245a:	3302      	addmi	r3, #2
 800245c:	6033      	strmi	r3, [r6, #0]
 800245e:	6825      	ldr	r5, [r4, #0]
 8002460:	f015 0506 	ands.w	r5, r5, #6
 8002464:	d106      	bne.n	8002474 <_printf_common+0x48>
 8002466:	f104 0a19 	add.w	sl, r4, #25
 800246a:	68e3      	ldr	r3, [r4, #12]
 800246c:	6832      	ldr	r2, [r6, #0]
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	42ab      	cmp	r3, r5
 8002472:	dc28      	bgt.n	80024c6 <_printf_common+0x9a>
 8002474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002478:	1e13      	subs	r3, r2, #0
 800247a:	6822      	ldr	r2, [r4, #0]
 800247c:	bf18      	it	ne
 800247e:	2301      	movne	r3, #1
 8002480:	0692      	lsls	r2, r2, #26
 8002482:	d42d      	bmi.n	80024e0 <_printf_common+0xb4>
 8002484:	4649      	mov	r1, r9
 8002486:	4638      	mov	r0, r7
 8002488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800248c:	47c0      	blx	r8
 800248e:	3001      	adds	r0, #1
 8002490:	d020      	beq.n	80024d4 <_printf_common+0xa8>
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	68e5      	ldr	r5, [r4, #12]
 8002496:	f003 0306 	and.w	r3, r3, #6
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf18      	it	ne
 800249e:	2500      	movne	r5, #0
 80024a0:	6832      	ldr	r2, [r6, #0]
 80024a2:	f04f 0600 	mov.w	r6, #0
 80024a6:	68a3      	ldr	r3, [r4, #8]
 80024a8:	bf08      	it	eq
 80024aa:	1aad      	subeq	r5, r5, r2
 80024ac:	6922      	ldr	r2, [r4, #16]
 80024ae:	bf08      	it	eq
 80024b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024b4:	4293      	cmp	r3, r2
 80024b6:	bfc4      	itt	gt
 80024b8:	1a9b      	subgt	r3, r3, r2
 80024ba:	18ed      	addgt	r5, r5, r3
 80024bc:	341a      	adds	r4, #26
 80024be:	42b5      	cmp	r5, r6
 80024c0:	d11a      	bne.n	80024f8 <_printf_common+0xcc>
 80024c2:	2000      	movs	r0, #0
 80024c4:	e008      	b.n	80024d8 <_printf_common+0xac>
 80024c6:	2301      	movs	r3, #1
 80024c8:	4652      	mov	r2, sl
 80024ca:	4649      	mov	r1, r9
 80024cc:	4638      	mov	r0, r7
 80024ce:	47c0      	blx	r8
 80024d0:	3001      	adds	r0, #1
 80024d2:	d103      	bne.n	80024dc <_printf_common+0xb0>
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024dc:	3501      	adds	r5, #1
 80024de:	e7c4      	b.n	800246a <_printf_common+0x3e>
 80024e0:	2030      	movs	r0, #48	; 0x30
 80024e2:	18e1      	adds	r1, r4, r3
 80024e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80024ee:	4422      	add	r2, r4
 80024f0:	3302      	adds	r3, #2
 80024f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80024f6:	e7c5      	b.n	8002484 <_printf_common+0x58>
 80024f8:	2301      	movs	r3, #1
 80024fa:	4622      	mov	r2, r4
 80024fc:	4649      	mov	r1, r9
 80024fe:	4638      	mov	r0, r7
 8002500:	47c0      	blx	r8
 8002502:	3001      	adds	r0, #1
 8002504:	d0e6      	beq.n	80024d4 <_printf_common+0xa8>
 8002506:	3601      	adds	r6, #1
 8002508:	e7d9      	b.n	80024be <_printf_common+0x92>
	...

0800250c <_printf_i>:
 800250c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002510:	7e0f      	ldrb	r7, [r1, #24]
 8002512:	4691      	mov	r9, r2
 8002514:	2f78      	cmp	r7, #120	; 0x78
 8002516:	4680      	mov	r8, r0
 8002518:	460c      	mov	r4, r1
 800251a:	469a      	mov	sl, r3
 800251c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800251e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002522:	d807      	bhi.n	8002534 <_printf_i+0x28>
 8002524:	2f62      	cmp	r7, #98	; 0x62
 8002526:	d80a      	bhi.n	800253e <_printf_i+0x32>
 8002528:	2f00      	cmp	r7, #0
 800252a:	f000 80d9 	beq.w	80026e0 <_printf_i+0x1d4>
 800252e:	2f58      	cmp	r7, #88	; 0x58
 8002530:	f000 80a4 	beq.w	800267c <_printf_i+0x170>
 8002534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800253c:	e03a      	b.n	80025b4 <_printf_i+0xa8>
 800253e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002542:	2b15      	cmp	r3, #21
 8002544:	d8f6      	bhi.n	8002534 <_printf_i+0x28>
 8002546:	a101      	add	r1, pc, #4	; (adr r1, 800254c <_printf_i+0x40>)
 8002548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800254c:	080025a5 	.word	0x080025a5
 8002550:	080025b9 	.word	0x080025b9
 8002554:	08002535 	.word	0x08002535
 8002558:	08002535 	.word	0x08002535
 800255c:	08002535 	.word	0x08002535
 8002560:	08002535 	.word	0x08002535
 8002564:	080025b9 	.word	0x080025b9
 8002568:	08002535 	.word	0x08002535
 800256c:	08002535 	.word	0x08002535
 8002570:	08002535 	.word	0x08002535
 8002574:	08002535 	.word	0x08002535
 8002578:	080026c7 	.word	0x080026c7
 800257c:	080025e9 	.word	0x080025e9
 8002580:	080026a9 	.word	0x080026a9
 8002584:	08002535 	.word	0x08002535
 8002588:	08002535 	.word	0x08002535
 800258c:	080026e9 	.word	0x080026e9
 8002590:	08002535 	.word	0x08002535
 8002594:	080025e9 	.word	0x080025e9
 8002598:	08002535 	.word	0x08002535
 800259c:	08002535 	.word	0x08002535
 80025a0:	080026b1 	.word	0x080026b1
 80025a4:	682b      	ldr	r3, [r5, #0]
 80025a6:	1d1a      	adds	r2, r3, #4
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	602a      	str	r2, [r5, #0]
 80025ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0a4      	b.n	8002702 <_printf_i+0x1f6>
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	6829      	ldr	r1, [r5, #0]
 80025bc:	0606      	lsls	r6, r0, #24
 80025be:	f101 0304 	add.w	r3, r1, #4
 80025c2:	d50a      	bpl.n	80025da <_printf_i+0xce>
 80025c4:	680e      	ldr	r6, [r1, #0]
 80025c6:	602b      	str	r3, [r5, #0]
 80025c8:	2e00      	cmp	r6, #0
 80025ca:	da03      	bge.n	80025d4 <_printf_i+0xc8>
 80025cc:	232d      	movs	r3, #45	; 0x2d
 80025ce:	4276      	negs	r6, r6
 80025d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025d4:	230a      	movs	r3, #10
 80025d6:	485e      	ldr	r0, [pc, #376]	; (8002750 <_printf_i+0x244>)
 80025d8:	e019      	b.n	800260e <_printf_i+0x102>
 80025da:	680e      	ldr	r6, [r1, #0]
 80025dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	bf18      	it	ne
 80025e4:	b236      	sxthne	r6, r6
 80025e6:	e7ef      	b.n	80025c8 <_printf_i+0xbc>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	6820      	ldr	r0, [r4, #0]
 80025ec:	1d19      	adds	r1, r3, #4
 80025ee:	6029      	str	r1, [r5, #0]
 80025f0:	0601      	lsls	r1, r0, #24
 80025f2:	d501      	bpl.n	80025f8 <_printf_i+0xec>
 80025f4:	681e      	ldr	r6, [r3, #0]
 80025f6:	e002      	b.n	80025fe <_printf_i+0xf2>
 80025f8:	0646      	lsls	r6, r0, #25
 80025fa:	d5fb      	bpl.n	80025f4 <_printf_i+0xe8>
 80025fc:	881e      	ldrh	r6, [r3, #0]
 80025fe:	2f6f      	cmp	r7, #111	; 0x6f
 8002600:	bf0c      	ite	eq
 8002602:	2308      	moveq	r3, #8
 8002604:	230a      	movne	r3, #10
 8002606:	4852      	ldr	r0, [pc, #328]	; (8002750 <_printf_i+0x244>)
 8002608:	2100      	movs	r1, #0
 800260a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800260e:	6865      	ldr	r5, [r4, #4]
 8002610:	2d00      	cmp	r5, #0
 8002612:	bfa8      	it	ge
 8002614:	6821      	ldrge	r1, [r4, #0]
 8002616:	60a5      	str	r5, [r4, #8]
 8002618:	bfa4      	itt	ge
 800261a:	f021 0104 	bicge.w	r1, r1, #4
 800261e:	6021      	strge	r1, [r4, #0]
 8002620:	b90e      	cbnz	r6, 8002626 <_printf_i+0x11a>
 8002622:	2d00      	cmp	r5, #0
 8002624:	d04d      	beq.n	80026c2 <_printf_i+0x1b6>
 8002626:	4615      	mov	r5, r2
 8002628:	fbb6 f1f3 	udiv	r1, r6, r3
 800262c:	fb03 6711 	mls	r7, r3, r1, r6
 8002630:	5dc7      	ldrb	r7, [r0, r7]
 8002632:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002636:	4637      	mov	r7, r6
 8002638:	42bb      	cmp	r3, r7
 800263a:	460e      	mov	r6, r1
 800263c:	d9f4      	bls.n	8002628 <_printf_i+0x11c>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d10b      	bne.n	800265a <_printf_i+0x14e>
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	07de      	lsls	r6, r3, #31
 8002646:	d508      	bpl.n	800265a <_printf_i+0x14e>
 8002648:	6923      	ldr	r3, [r4, #16]
 800264a:	6861      	ldr	r1, [r4, #4]
 800264c:	4299      	cmp	r1, r3
 800264e:	bfde      	ittt	le
 8002650:	2330      	movle	r3, #48	; 0x30
 8002652:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002656:	f105 35ff 	addle.w	r5, r5, #4294967295
 800265a:	1b52      	subs	r2, r2, r5
 800265c:	6122      	str	r2, [r4, #16]
 800265e:	464b      	mov	r3, r9
 8002660:	4621      	mov	r1, r4
 8002662:	4640      	mov	r0, r8
 8002664:	f8cd a000 	str.w	sl, [sp]
 8002668:	aa03      	add	r2, sp, #12
 800266a:	f7ff fedf 	bl	800242c <_printf_common>
 800266e:	3001      	adds	r0, #1
 8002670:	d14c      	bne.n	800270c <_printf_i+0x200>
 8002672:	f04f 30ff 	mov.w	r0, #4294967295
 8002676:	b004      	add	sp, #16
 8002678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800267c:	4834      	ldr	r0, [pc, #208]	; (8002750 <_printf_i+0x244>)
 800267e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002682:	6829      	ldr	r1, [r5, #0]
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	f851 6b04 	ldr.w	r6, [r1], #4
 800268a:	6029      	str	r1, [r5, #0]
 800268c:	061d      	lsls	r5, r3, #24
 800268e:	d514      	bpl.n	80026ba <_printf_i+0x1ae>
 8002690:	07df      	lsls	r7, r3, #31
 8002692:	bf44      	itt	mi
 8002694:	f043 0320 	orrmi.w	r3, r3, #32
 8002698:	6023      	strmi	r3, [r4, #0]
 800269a:	b91e      	cbnz	r6, 80026a4 <_printf_i+0x198>
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	f023 0320 	bic.w	r3, r3, #32
 80026a2:	6023      	str	r3, [r4, #0]
 80026a4:	2310      	movs	r3, #16
 80026a6:	e7af      	b.n	8002608 <_printf_i+0xfc>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	f043 0320 	orr.w	r3, r3, #32
 80026ae:	6023      	str	r3, [r4, #0]
 80026b0:	2378      	movs	r3, #120	; 0x78
 80026b2:	4828      	ldr	r0, [pc, #160]	; (8002754 <_printf_i+0x248>)
 80026b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026b8:	e7e3      	b.n	8002682 <_printf_i+0x176>
 80026ba:	0659      	lsls	r1, r3, #25
 80026bc:	bf48      	it	mi
 80026be:	b2b6      	uxthmi	r6, r6
 80026c0:	e7e6      	b.n	8002690 <_printf_i+0x184>
 80026c2:	4615      	mov	r5, r2
 80026c4:	e7bb      	b.n	800263e <_printf_i+0x132>
 80026c6:	682b      	ldr	r3, [r5, #0]
 80026c8:	6826      	ldr	r6, [r4, #0]
 80026ca:	1d18      	adds	r0, r3, #4
 80026cc:	6961      	ldr	r1, [r4, #20]
 80026ce:	6028      	str	r0, [r5, #0]
 80026d0:	0635      	lsls	r5, r6, #24
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	d501      	bpl.n	80026da <_printf_i+0x1ce>
 80026d6:	6019      	str	r1, [r3, #0]
 80026d8:	e002      	b.n	80026e0 <_printf_i+0x1d4>
 80026da:	0670      	lsls	r0, r6, #25
 80026dc:	d5fb      	bpl.n	80026d6 <_printf_i+0x1ca>
 80026de:	8019      	strh	r1, [r3, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	4615      	mov	r5, r2
 80026e4:	6123      	str	r3, [r4, #16]
 80026e6:	e7ba      	b.n	800265e <_printf_i+0x152>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	2100      	movs	r1, #0
 80026ec:	1d1a      	adds	r2, r3, #4
 80026ee:	602a      	str	r2, [r5, #0]
 80026f0:	681d      	ldr	r5, [r3, #0]
 80026f2:	6862      	ldr	r2, [r4, #4]
 80026f4:	4628      	mov	r0, r5
 80026f6:	f000 f911 	bl	800291c <memchr>
 80026fa:	b108      	cbz	r0, 8002700 <_printf_i+0x1f4>
 80026fc:	1b40      	subs	r0, r0, r5
 80026fe:	6060      	str	r0, [r4, #4]
 8002700:	6863      	ldr	r3, [r4, #4]
 8002702:	6123      	str	r3, [r4, #16]
 8002704:	2300      	movs	r3, #0
 8002706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800270a:	e7a8      	b.n	800265e <_printf_i+0x152>
 800270c:	462a      	mov	r2, r5
 800270e:	4649      	mov	r1, r9
 8002710:	4640      	mov	r0, r8
 8002712:	6923      	ldr	r3, [r4, #16]
 8002714:	47d0      	blx	sl
 8002716:	3001      	adds	r0, #1
 8002718:	d0ab      	beq.n	8002672 <_printf_i+0x166>
 800271a:	6823      	ldr	r3, [r4, #0]
 800271c:	079b      	lsls	r3, r3, #30
 800271e:	d413      	bmi.n	8002748 <_printf_i+0x23c>
 8002720:	68e0      	ldr	r0, [r4, #12]
 8002722:	9b03      	ldr	r3, [sp, #12]
 8002724:	4298      	cmp	r0, r3
 8002726:	bfb8      	it	lt
 8002728:	4618      	movlt	r0, r3
 800272a:	e7a4      	b.n	8002676 <_printf_i+0x16a>
 800272c:	2301      	movs	r3, #1
 800272e:	4632      	mov	r2, r6
 8002730:	4649      	mov	r1, r9
 8002732:	4640      	mov	r0, r8
 8002734:	47d0      	blx	sl
 8002736:	3001      	adds	r0, #1
 8002738:	d09b      	beq.n	8002672 <_printf_i+0x166>
 800273a:	3501      	adds	r5, #1
 800273c:	68e3      	ldr	r3, [r4, #12]
 800273e:	9903      	ldr	r1, [sp, #12]
 8002740:	1a5b      	subs	r3, r3, r1
 8002742:	42ab      	cmp	r3, r5
 8002744:	dcf2      	bgt.n	800272c <_printf_i+0x220>
 8002746:	e7eb      	b.n	8002720 <_printf_i+0x214>
 8002748:	2500      	movs	r5, #0
 800274a:	f104 0619 	add.w	r6, r4, #25
 800274e:	e7f5      	b.n	800273c <_printf_i+0x230>
 8002750:	08002a81 	.word	0x08002a81
 8002754:	08002a92 	.word	0x08002a92

08002758 <_putc_r>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	460d      	mov	r5, r1
 800275c:	4614      	mov	r4, r2
 800275e:	4606      	mov	r6, r0
 8002760:	b118      	cbz	r0, 800276a <_putc_r+0x12>
 8002762:	6983      	ldr	r3, [r0, #24]
 8002764:	b90b      	cbnz	r3, 800276a <_putc_r+0x12>
 8002766:	f7ff fbf7 	bl	8001f58 <__sinit>
 800276a:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <_putc_r+0x84>)
 800276c:	429c      	cmp	r4, r3
 800276e:	d124      	bne.n	80027ba <_putc_r+0x62>
 8002770:	6874      	ldr	r4, [r6, #4]
 8002772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002774:	07d8      	lsls	r0, r3, #31
 8002776:	d405      	bmi.n	8002784 <_putc_r+0x2c>
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	0599      	lsls	r1, r3, #22
 800277c:	d402      	bmi.n	8002784 <_putc_r+0x2c>
 800277e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002780:	f7ff fc88 	bl	8002094 <__retarget_lock_acquire_recursive>
 8002784:	68a3      	ldr	r3, [r4, #8]
 8002786:	3b01      	subs	r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	60a3      	str	r3, [r4, #8]
 800278c:	da05      	bge.n	800279a <_putc_r+0x42>
 800278e:	69a2      	ldr	r2, [r4, #24]
 8002790:	4293      	cmp	r3, r2
 8002792:	db1c      	blt.n	80027ce <_putc_r+0x76>
 8002794:	b2eb      	uxtb	r3, r5
 8002796:	2b0a      	cmp	r3, #10
 8002798:	d019      	beq.n	80027ce <_putc_r+0x76>
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	6022      	str	r2, [r4, #0]
 80027a0:	701d      	strb	r5, [r3, #0]
 80027a2:	b2ed      	uxtb	r5, r5
 80027a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027a6:	07da      	lsls	r2, r3, #31
 80027a8:	d405      	bmi.n	80027b6 <_putc_r+0x5e>
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	059b      	lsls	r3, r3, #22
 80027ae:	d402      	bmi.n	80027b6 <_putc_r+0x5e>
 80027b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027b2:	f7ff fc70 	bl	8002096 <__retarget_lock_release_recursive>
 80027b6:	4628      	mov	r0, r5
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <_putc_r+0x88>)
 80027bc:	429c      	cmp	r4, r3
 80027be:	d101      	bne.n	80027c4 <_putc_r+0x6c>
 80027c0:	68b4      	ldr	r4, [r6, #8]
 80027c2:	e7d6      	b.n	8002772 <_putc_r+0x1a>
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <_putc_r+0x8c>)
 80027c6:	429c      	cmp	r4, r3
 80027c8:	bf08      	it	eq
 80027ca:	68f4      	ldreq	r4, [r6, #12]
 80027cc:	e7d1      	b.n	8002772 <_putc_r+0x1a>
 80027ce:	4629      	mov	r1, r5
 80027d0:	4622      	mov	r2, r4
 80027d2:	4630      	mov	r0, r6
 80027d4:	f7ff f9ea 	bl	8001bac <__swbuf_r>
 80027d8:	4605      	mov	r5, r0
 80027da:	e7e3      	b.n	80027a4 <_putc_r+0x4c>
 80027dc:	08002a30 	.word	0x08002a30
 80027e0:	08002a50 	.word	0x08002a50
 80027e4:	08002a10 	.word	0x08002a10

080027e8 <__sread>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	460c      	mov	r4, r1
 80027ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f0:	f000 f8a2 	bl	8002938 <_read_r>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	bfab      	itete	ge
 80027f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027fa:	89a3      	ldrhlt	r3, [r4, #12]
 80027fc:	181b      	addge	r3, r3, r0
 80027fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002802:	bfac      	ite	ge
 8002804:	6563      	strge	r3, [r4, #84]	; 0x54
 8002806:	81a3      	strhlt	r3, [r4, #12]
 8002808:	bd10      	pop	{r4, pc}

0800280a <__swrite>:
 800280a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280e:	461f      	mov	r7, r3
 8002810:	898b      	ldrh	r3, [r1, #12]
 8002812:	4605      	mov	r5, r0
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	460c      	mov	r4, r1
 8002818:	4616      	mov	r6, r2
 800281a:	d505      	bpl.n	8002828 <__swrite+0x1e>
 800281c:	2302      	movs	r3, #2
 800281e:	2200      	movs	r2, #0
 8002820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002824:	f000 f868 	bl	80028f8 <_lseek_r>
 8002828:	89a3      	ldrh	r3, [r4, #12]
 800282a:	4632      	mov	r2, r6
 800282c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002830:	81a3      	strh	r3, [r4, #12]
 8002832:	4628      	mov	r0, r5
 8002834:	463b      	mov	r3, r7
 8002836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800283a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800283e:	f000 b817 	b.w	8002870 <_write_r>

08002842 <__sseek>:
 8002842:	b510      	push	{r4, lr}
 8002844:	460c      	mov	r4, r1
 8002846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800284a:	f000 f855 	bl	80028f8 <_lseek_r>
 800284e:	1c43      	adds	r3, r0, #1
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	bf15      	itete	ne
 8002854:	6560      	strne	r0, [r4, #84]	; 0x54
 8002856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800285a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800285e:	81a3      	strheq	r3, [r4, #12]
 8002860:	bf18      	it	ne
 8002862:	81a3      	strhne	r3, [r4, #12]
 8002864:	bd10      	pop	{r4, pc}

08002866 <__sclose>:
 8002866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800286a:	f000 b813 	b.w	8002894 <_close_r>
	...

08002870 <_write_r>:
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	2200      	movs	r2, #0
 800287a:	4d05      	ldr	r5, [pc, #20]	; (8002890 <_write_r+0x20>)
 800287c:	602a      	str	r2, [r5, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	f7fd fe80 	bl	8000584 <_write>
 8002884:	1c43      	adds	r3, r0, #1
 8002886:	d102      	bne.n	800288e <_write_r+0x1e>
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	b103      	cbz	r3, 800288e <_write_r+0x1e>
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	bd38      	pop	{r3, r4, r5, pc}
 8002890:	200000f8 	.word	0x200000f8

08002894 <_close_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	2300      	movs	r3, #0
 8002898:	4d05      	ldr	r5, [pc, #20]	; (80028b0 <_close_r+0x1c>)
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	602b      	str	r3, [r5, #0]
 80028a0:	f7fd fdd4 	bl	800044c <_close>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_close_r+0x1a>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_close_r+0x1a>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	200000f8 	.word	0x200000f8

080028b4 <_fstat_r>:
 80028b4:	b538      	push	{r3, r4, r5, lr}
 80028b6:	2300      	movs	r3, #0
 80028b8:	4d06      	ldr	r5, [pc, #24]	; (80028d4 <_fstat_r+0x20>)
 80028ba:	4604      	mov	r4, r0
 80028bc:	4608      	mov	r0, r1
 80028be:	4611      	mov	r1, r2
 80028c0:	602b      	str	r3, [r5, #0]
 80028c2:	f7fd fdce 	bl	8000462 <_fstat>
 80028c6:	1c43      	adds	r3, r0, #1
 80028c8:	d102      	bne.n	80028d0 <_fstat_r+0x1c>
 80028ca:	682b      	ldr	r3, [r5, #0]
 80028cc:	b103      	cbz	r3, 80028d0 <_fstat_r+0x1c>
 80028ce:	6023      	str	r3, [r4, #0]
 80028d0:	bd38      	pop	{r3, r4, r5, pc}
 80028d2:	bf00      	nop
 80028d4:	200000f8 	.word	0x200000f8

080028d8 <_isatty_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	2300      	movs	r3, #0
 80028dc:	4d05      	ldr	r5, [pc, #20]	; (80028f4 <_isatty_r+0x1c>)
 80028de:	4604      	mov	r4, r0
 80028e0:	4608      	mov	r0, r1
 80028e2:	602b      	str	r3, [r5, #0]
 80028e4:	f7fd fdcc 	bl	8000480 <_isatty>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	d102      	bne.n	80028f2 <_isatty_r+0x1a>
 80028ec:	682b      	ldr	r3, [r5, #0]
 80028ee:	b103      	cbz	r3, 80028f2 <_isatty_r+0x1a>
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	200000f8 	.word	0x200000f8

080028f8 <_lseek_r>:
 80028f8:	b538      	push	{r3, r4, r5, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	2200      	movs	r2, #0
 8002902:	4d05      	ldr	r5, [pc, #20]	; (8002918 <_lseek_r+0x20>)
 8002904:	602a      	str	r2, [r5, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	f7fd fdc4 	bl	8000494 <_lseek>
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	d102      	bne.n	8002916 <_lseek_r+0x1e>
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	b103      	cbz	r3, 8002916 <_lseek_r+0x1e>
 8002914:	6023      	str	r3, [r4, #0]
 8002916:	bd38      	pop	{r3, r4, r5, pc}
 8002918:	200000f8 	.word	0x200000f8

0800291c <memchr>:
 800291c:	4603      	mov	r3, r0
 800291e:	b510      	push	{r4, lr}
 8002920:	b2c9      	uxtb	r1, r1
 8002922:	4402      	add	r2, r0
 8002924:	4293      	cmp	r3, r2
 8002926:	4618      	mov	r0, r3
 8002928:	d101      	bne.n	800292e <memchr+0x12>
 800292a:	2000      	movs	r0, #0
 800292c:	e003      	b.n	8002936 <memchr+0x1a>
 800292e:	7804      	ldrb	r4, [r0, #0]
 8002930:	3301      	adds	r3, #1
 8002932:	428c      	cmp	r4, r1
 8002934:	d1f6      	bne.n	8002924 <memchr+0x8>
 8002936:	bd10      	pop	{r4, pc}

08002938 <_read_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4604      	mov	r4, r0
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	2200      	movs	r2, #0
 8002942:	4d05      	ldr	r5, [pc, #20]	; (8002958 <_read_r+0x20>)
 8002944:	602a      	str	r2, [r5, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	f7fd fd63 	bl	8000412 <_read>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d102      	bne.n	8002956 <_read_r+0x1e>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	b103      	cbz	r3, 8002956 <_read_r+0x1e>
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	bd38      	pop	{r3, r4, r5, pc}
 8002958:	200000f8 	.word	0x200000f8

0800295c <_init>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr

08002968 <_fini>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	bf00      	nop
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr
