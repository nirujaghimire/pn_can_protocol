
pn_can_protocol_2_0_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002da4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff4  08002ff4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff4  08002ff4  00012ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  0800306c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800306c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a110  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0d  00000000  00000000  0002a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018305  00000000  00000000  0002cd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f56  00000000  00000000  00045025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086463  00000000  00000000  0004ef7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d53de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002848  00000000  00000000  000d5430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e98 	.word	0x08002e98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002e98 	.word	0x08002e98

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa88 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84a 	bl	80001f4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f87e 	bl	8000260 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void runTx();
  runTx();
 8000164:	f002 f94e 	bl	8002404 <runTx>
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f002 f98f 	bl	800249c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018c:	2301      	movs	r3, #1
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000194:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000196:	2300      	movs	r3, #0
 8000198:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fae8 	bl	8001788 <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001be:	f000 f8b1 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2102      	movs	r1, #2
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fd55 	bl	8001c8c <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e8:	f000 f89c 	bl	8000324 <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <MX_CAN_Init+0x64>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <MX_CAN_Init+0x68>)
 80001fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <MX_CAN_Init+0x64>)
 8000200:	2208      	movs	r2, #8
 8000202:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <MX_CAN_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <MX_CAN_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_CAN_Init+0x64>)
 8000212:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000216:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_CAN_Init+0x64>)
 800021a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800021e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <MX_CAN_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_CAN_Init+0x64>)
 8000228:	2201      	movs	r2, #1
 800022a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <MX_CAN_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_CAN_Init+0x64>)
 8000234:	2201      	movs	r2, #1
 8000236:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <MX_CAN_Init+0x64>)
 8000246:	f000 fa93 	bl	8000770 <HAL_CAN_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000250:	f000 f868 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	2000008c 	.word	0x2000008c
 800025c:	40006400 	.word	0x40006400

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 fe86 	bl	8001fa8 <HAL_HalfDuplex_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f83f 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000b4 	.word	0x200000b4
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0320 	and.w	r3, r3, #32
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *data, int len) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	b29a      	uxth	r2, r3
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <_write+0x28>)
 8000310:	f001 fea2 	bl	8002058 <HAL_UART_Transmit>
	return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200000b4 	.word	0x200000b4

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <HAL_MspInit+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <HAL_MspInit+0x40>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <HAL_MspInit+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <HAL_MspInit+0x40>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a07      	ldr	r2, [pc, #28]	; (8000370 <HAL_MspInit+0x40>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_MspInit+0x40>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a20      	ldr	r2, [pc, #128]	; (8000410 <HAL_CAN_MspInit+0x9c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d139      	bne.n	8000408 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 800039a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039e:	61d3      	str	r3, [r2, #28]
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a18      	ldr	r2, [pc, #96]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003da:	f001 f851 	bl	8001480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e4:	2302      	movs	r3, #2
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003f4:	f001 f844 	bl	8001480 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	2014      	movs	r0, #20
 80003fe:	f001 f808 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000402:	2014      	movs	r0, #20
 8000404:	f001 f821 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40006400 	.word	0x40006400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <HAL_UART_MspInit+0x74>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d124      	bne.n	8000486 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x78>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_UART_MspInit+0x78>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_UART_MspInit+0x78>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800046c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000472:	2312      	movs	r3, #18
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	2303      	movs	r3, #3
 8000478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_UART_MspInit+0x7c>)
 8000482:	f000 fffd 	bl	8001480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40013800 	.word	0x40013800
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80004e2:	f000 f905 	bl	80006f0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	canInterrupt();
 80004f0:	f001 ff78 	bl	80023e4 <canInterrupt>
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80004f6:	f000 fc89 	bl	8000e0c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000008c 	.word	0x2000008c

08000504 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
  }

  return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_close>:
  }
  return len;
}

int _close(int file)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000564:	605a      	str	r2, [r3, #4]
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f001 ff3a 	bl	8002448 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	200000fc 	.word	0x200000fc
 8000608:	20000180 	.word	0x20000180

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff fff8 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000634:	4c09      	ldr	r4, [pc, #36]	; (800065c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f001 ff07 	bl	8002454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fd81 	bl	800014c <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000654:	08002ffc 	.word	0x08002ffc
  ldr r2, =_sbss
 8000658:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800065c:	20000180 	.word	0x20000180

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 fec1 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fe56 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fed9 	bl	8001466 <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 fea1 	bl	8001412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	20000100 	.word	0x20000100

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000100 	.word	0x20000100

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff fff0 	bl	8000714 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d005      	beq.n	800074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_Delay+0x44>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074e:	bf00      	nop
 8000750:	f7ff ffe0 	bl	8000714 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f7      	bhi.n	8000750 <HAL_Delay+0x28>
  {
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e0ed      	b.n	800095e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fdf0 	bl	8000374 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007a4:	f7ff ffb6 	bl	8000714 <HAL_GetTick>
 80007a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007aa:	e012      	b.n	80007d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ac:	f7ff ffb2 	bl	8000714 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d90b      	bls.n	80007d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2205      	movs	r2, #5
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e0c5      	b.n	800095e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0e5      	beq.n	80007ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0202 	bic.w	r2, r2, #2
 80007ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007f0:	f7ff ff90 	bl	8000714 <HAL_GetTick>
 80007f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007f6:	e012      	b.n	800081e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007f8:	f7ff ff8c 	bl	8000714 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d90b      	bls.n	800081e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2205      	movs	r2, #5
 8000816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e09f      	b.n	800095e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1e5      	bne.n	80007f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7e1b      	ldrb	r3, [r3, #24]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d108      	bne.n	8000846 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e007      	b.n	8000856 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7e5b      	ldrb	r3, [r3, #25]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d108      	bne.n	8000870 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e007      	b.n	8000880 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800087e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7e9b      	ldrb	r3, [r3, #26]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d108      	bne.n	800089a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f042 0220 	orr.w	r2, r2, #32
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e007      	b.n	80008aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0220 	bic.w	r2, r2, #32
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7edb      	ldrb	r3, [r3, #27]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d108      	bne.n	80008c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 0210 	bic.w	r2, r2, #16
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e007      	b.n	80008d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0210 	orr.w	r2, r2, #16
 80008d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7f1b      	ldrb	r3, [r3, #28]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d108      	bne.n	80008ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f042 0208 	orr.w	r2, r2, #8
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e007      	b.n	80008fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0208 	bic.w	r2, r2, #8
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7f5b      	ldrb	r3, [r3, #29]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d108      	bne.n	8000918 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0204 	orr.w	r2, r2, #4
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e007      	b.n	8000928 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 0204 	bic.w	r2, r2, #4
 8000926:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	ea42 0103 	orr.w	r1, r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000966:	b480      	push	{r7}
 8000968:	b087      	sub	sp, #28
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800097c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800097e:	7cfb      	ldrb	r3, [r7, #19]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d003      	beq.n	800098c <HAL_CAN_ConfigFilter+0x26>
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	2b02      	cmp	r3, #2
 8000988:	f040 80aa 	bne.w	8000ae0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f003 031f 	and.w	r3, r3, #31
 80009a4:	2201      	movs	r2, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d123      	bne.n	8000a0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	401a      	ands	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3248      	adds	r2, #72	; 0x48
 80009ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a04:	6979      	ldr	r1, [r7, #20]
 8000a06:	3348      	adds	r3, #72	; 0x48
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	440b      	add	r3, r1
 8000a0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d122      	bne.n	8000a5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3248      	adds	r2, #72	; 0x48
 8000a3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a52:	6979      	ldr	r1, [r7, #20]
 8000a54:	3348      	adds	r3, #72	; 0x48
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d109      	bne.n	8000a78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d109      	bne.n	8000aa4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000aa2:	e007      	b.n	8000ab4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ad2:	f023 0201 	bic.w	r2, r3, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e006      	b.n	8000aee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
  }
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d12e      	bne.n	8000b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0201 	bic.w	r2, r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b24:	f7ff fdf6 	bl	8000714 <HAL_GetTick>
 8000b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b2a:	e012      	b.n	8000b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b2c:	f7ff fdf2 	bl	8000714 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b0a      	cmp	r3, #10
 8000b38:	d90b      	bls.n	8000b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2205      	movs	r2, #5
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e012      	b.n	8000b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1e5      	bne.n	8000b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
  }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b96:	7dfb      	ldrb	r3, [r7, #23]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d003      	beq.n	8000ba4 <HAL_CAN_GetRxMessage+0x24>
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	f040 8103 	bne.w	8000daa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10e      	bne.n	8000bc8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d116      	bne.n	8000be6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0f7      	b.n	8000db8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d107      	bne.n	8000be6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	e0e8      	b.n	8000db8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	331b      	adds	r3, #27
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	4413      	add	r3, r2
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0204 	and.w	r2, r3, #4
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d10c      	bne.n	8000c1e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	331b      	adds	r3, #27
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	4413      	add	r3, r2
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	0d5b      	lsrs	r3, r3, #21
 8000c14:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	e00b      	b.n	8000c36 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	331b      	adds	r3, #27
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	331b      	adds	r3, #27
 8000c3e:	011b      	lsls	r3, r3, #4
 8000c40:	4413      	add	r3, r2
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0202 	and.w	r2, r3, #2
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	331b      	adds	r3, #27
 8000c54:	011b      	lsls	r3, r3, #4
 8000c56:	4413      	add	r3, r2
 8000c58:	3304      	adds	r3, #4
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d003      	beq.n	8000c6c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2208      	movs	r2, #8
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	e00b      	b.n	8000c84 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	331b      	adds	r3, #27
 8000c74:	011b      	lsls	r3, r3, #4
 8000c76:	4413      	add	r3, r2
 8000c78:	3304      	adds	r3, #4
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 020f 	and.w	r2, r3, #15
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	331b      	adds	r3, #27
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	3304      	adds	r3, #4
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	331b      	adds	r3, #27
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4413      	add	r3, r2
 8000ca8:	3304      	adds	r3, #4
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4413      	add	r3, r2
 8000cbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	011b      	lsls	r3, r3, #4
 8000cd2:	4413      	add	r3, r2
 8000cd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	0a1a      	lsrs	r2, r3, #8
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	4413      	add	r3, r2
 8000cee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	0c1a      	lsrs	r2, r3, #16
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	4413      	add	r3, r2
 8000d08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	0e1a      	lsrs	r2, r3, #24
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3303      	adds	r3, #3
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	3304      	adds	r3, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	011b      	lsls	r3, r3, #4
 8000d38:	4413      	add	r3, r2
 8000d3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	0a1a      	lsrs	r2, r3, #8
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3305      	adds	r3, #5
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	4413      	add	r3, r2
 8000d54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	0c1a      	lsrs	r2, r3, #16
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	3306      	adds	r3, #6
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0e1a      	lsrs	r2, r3, #24
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	3307      	adds	r3, #7
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 0220 	orr.w	r2, r2, #32
 8000da4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e006      	b.n	8000db8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
  }
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d002      	beq.n	8000de0 <HAL_CAN_ActivateNotification+0x1e>
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d109      	bne.n	8000df4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6959      	ldr	r1, [r3, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	e006      	b.n	8000e02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
  }
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d07c      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d023      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2201      	movs	r2, #1
 8000e62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 f983 	bl	800117a <HAL_CAN_TxMailbox0CompleteCallback>
 8000e74:	e016      	b.n	8000ea4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
 8000e88:	e00c      	b.n	8000ea4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d004      	beq.n	8000e9e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e9c:	e002      	b.n	8000ea4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f986 	bl	80011b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d024      	beq.n	8000ef8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 f962 	bl	800118c <HAL_CAN_TxMailbox1CompleteCallback>
 8000ec8:	e016      	b.n	8000ef8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d004      	beq.n	8000ede <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
 8000edc:	e00c      	b.n	8000ef8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef0:	e002      	b.n	8000ef8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f965 	bl	80011c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d024      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f941 	bl	800119e <HAL_CAN_TxMailbox2CompleteCallback>
 8000f1c:	e016      	b.n	8000f4c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	e00c      	b.n	8000f4c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	e002      	b.n	8000f4c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f944 	bl	80011d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00c      	beq.n	8000f70 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d007      	beq.n	8000f70 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2208      	movs	r2, #8
 8000f8a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f933 	bl	80011f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f92:	6a3b      	ldr	r3, [r7, #32]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d009      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f91b 	bl	80011e6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	f003 0310 	and.w	r3, r3, #16
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2210      	movs	r2, #16
 8000fd2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	f003 0320 	and.w	r3, r3, #32
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2208      	movs	r2, #8
 8000fee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f913 	bl	800121c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	f003 0310 	and.w	r3, r3, #16
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d009      	beq.n	8001014 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	691b      	ldr	r3, [r3, #16]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f8fb 	bl	800120a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001014:	6a3b      	ldr	r3, [r7, #32]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0310 	and.w	r3, r3, #16
 8001024:	2b00      	cmp	r3, #0
 8001026:	d006      	beq.n	8001036 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2210      	movs	r2, #16
 800102e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f8fc 	bl	800122e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2208      	movs	r2, #8
 8001050:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f8f4 	bl	8001240 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d07b      	beq.n	800115a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d072      	beq.n	8001152 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001072:	2b00      	cmp	r3, #0
 8001074:	d008      	beq.n	8001088 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800108e:	2b00      	cmp	r3, #0
 8001090:	d008      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	f043 0302 	orr.w	r3, r3, #2
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d043      	beq.n	8001152 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d03e      	beq.n	8001152 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010da:	2b60      	cmp	r3, #96	; 0x60
 80010dc:	d02b      	beq.n	8001136 <HAL_CAN_IRQHandler+0x32a>
 80010de:	2b60      	cmp	r3, #96	; 0x60
 80010e0:	d82e      	bhi.n	8001140 <HAL_CAN_IRQHandler+0x334>
 80010e2:	2b50      	cmp	r3, #80	; 0x50
 80010e4:	d022      	beq.n	800112c <HAL_CAN_IRQHandler+0x320>
 80010e6:	2b50      	cmp	r3, #80	; 0x50
 80010e8:	d82a      	bhi.n	8001140 <HAL_CAN_IRQHandler+0x334>
 80010ea:	2b40      	cmp	r3, #64	; 0x40
 80010ec:	d019      	beq.n	8001122 <HAL_CAN_IRQHandler+0x316>
 80010ee:	2b40      	cmp	r3, #64	; 0x40
 80010f0:	d826      	bhi.n	8001140 <HAL_CAN_IRQHandler+0x334>
 80010f2:	2b30      	cmp	r3, #48	; 0x30
 80010f4:	d010      	beq.n	8001118 <HAL_CAN_IRQHandler+0x30c>
 80010f6:	2b30      	cmp	r3, #48	; 0x30
 80010f8:	d822      	bhi.n	8001140 <HAL_CAN_IRQHandler+0x334>
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d002      	beq.n	8001104 <HAL_CAN_IRQHandler+0x2f8>
 80010fe:	2b20      	cmp	r3, #32
 8001100:	d005      	beq.n	800110e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001102:	e01d      	b.n	8001140 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	f043 0308 	orr.w	r3, r3, #8
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800110c:	e019      	b.n	8001142 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	f043 0310 	orr.w	r3, r3, #16
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001116:	e014      	b.n	8001142 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	f043 0320 	orr.w	r3, r3, #32
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001120:	e00f      	b.n	8001142 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800112a:	e00a      	b.n	8001142 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001134:	e005      	b.n	8001142 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800113e:	e000      	b.n	8001142 <HAL_CAN_IRQHandler+0x336>
            break;
 8001140:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001150:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2204      	movs	r2, #4
 8001158:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	2b00      	cmp	r3, #0
 800115e:	d008      	beq.n	8001172 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	431a      	orrs	r2, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f870 	bl	8001252 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	db0b      	blt.n	80012f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f003 021f 	and.w	r2, r3, #31
 80012e0:	4906      	ldr	r1, [pc, #24]	; (80012fc <__NVIC_EnableIRQ+0x34>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	2001      	movs	r0, #1
 80012ea:	fa00 f202 	lsl.w	r2, r0, r2
 80012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100

08001300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	6039      	str	r1, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	2b00      	cmp	r3, #0
 8001312:	db0a      	blt.n	800132a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	490c      	ldr	r1, [pc, #48]	; (800134c <__NVIC_SetPriority+0x4c>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	0112      	lsls	r2, r2, #4
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	440b      	add	r3, r1
 8001324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001328:	e00a      	b.n	8001340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4908      	ldr	r1, [pc, #32]	; (8001350 <__NVIC_SetPriority+0x50>)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	3b04      	subs	r3, #4
 8001338:	0112      	lsls	r2, r2, #4
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	440b      	add	r3, r1
 800133e:	761a      	strb	r2, [r3, #24]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f1c3 0307 	rsb	r3, r3, #7
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf28      	it	cs
 8001372:	2304      	movcs	r3, #4
 8001374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3304      	adds	r3, #4
 800137a:	2b06      	cmp	r3, #6
 800137c:	d902      	bls.n	8001384 <NVIC_EncodePriority+0x30>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3b03      	subs	r3, #3
 8001382:	e000      	b.n	8001386 <NVIC_EncodePriority+0x32>
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	f04f 32ff 	mov.w	r2, #4294967295
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	401a      	ands	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	4313      	orrs	r3, r2
         );
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff90 	bl	8001300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff2d 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff42 	bl	80012ac <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff90 	bl	8001354 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5f 	bl	8001300 <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff35 	bl	80012c8 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b08b      	sub	sp, #44	; 0x2c
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001492:	e169      	b.n	8001768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001494:	2201      	movs	r2, #1
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	f040 8158 	bne.w	8001762 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a9a      	ldr	r2, [pc, #616]	; (8001720 <HAL_GPIO_Init+0x2a0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d05e      	beq.n	800157a <HAL_GPIO_Init+0xfa>
 80014bc:	4a98      	ldr	r2, [pc, #608]	; (8001720 <HAL_GPIO_Init+0x2a0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d875      	bhi.n	80015ae <HAL_GPIO_Init+0x12e>
 80014c2:	4a98      	ldr	r2, [pc, #608]	; (8001724 <HAL_GPIO_Init+0x2a4>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d058      	beq.n	800157a <HAL_GPIO_Init+0xfa>
 80014c8:	4a96      	ldr	r2, [pc, #600]	; (8001724 <HAL_GPIO_Init+0x2a4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d86f      	bhi.n	80015ae <HAL_GPIO_Init+0x12e>
 80014ce:	4a96      	ldr	r2, [pc, #600]	; (8001728 <HAL_GPIO_Init+0x2a8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d052      	beq.n	800157a <HAL_GPIO_Init+0xfa>
 80014d4:	4a94      	ldr	r2, [pc, #592]	; (8001728 <HAL_GPIO_Init+0x2a8>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d869      	bhi.n	80015ae <HAL_GPIO_Init+0x12e>
 80014da:	4a94      	ldr	r2, [pc, #592]	; (800172c <HAL_GPIO_Init+0x2ac>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d04c      	beq.n	800157a <HAL_GPIO_Init+0xfa>
 80014e0:	4a92      	ldr	r2, [pc, #584]	; (800172c <HAL_GPIO_Init+0x2ac>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d863      	bhi.n	80015ae <HAL_GPIO_Init+0x12e>
 80014e6:	4a92      	ldr	r2, [pc, #584]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d046      	beq.n	800157a <HAL_GPIO_Init+0xfa>
 80014ec:	4a90      	ldr	r2, [pc, #576]	; (8001730 <HAL_GPIO_Init+0x2b0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d85d      	bhi.n	80015ae <HAL_GPIO_Init+0x12e>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d82a      	bhi.n	800154c <HAL_GPIO_Init+0xcc>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d859      	bhi.n	80015ae <HAL_GPIO_Init+0x12e>
 80014fa:	a201      	add	r2, pc, #4	; (adr r2, 8001500 <HAL_GPIO_Init+0x80>)
 80014fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001500:	0800157b 	.word	0x0800157b
 8001504:	08001555 	.word	0x08001555
 8001508:	08001567 	.word	0x08001567
 800150c:	080015a9 	.word	0x080015a9
 8001510:	080015af 	.word	0x080015af
 8001514:	080015af 	.word	0x080015af
 8001518:	080015af 	.word	0x080015af
 800151c:	080015af 	.word	0x080015af
 8001520:	080015af 	.word	0x080015af
 8001524:	080015af 	.word	0x080015af
 8001528:	080015af 	.word	0x080015af
 800152c:	080015af 	.word	0x080015af
 8001530:	080015af 	.word	0x080015af
 8001534:	080015af 	.word	0x080015af
 8001538:	080015af 	.word	0x080015af
 800153c:	080015af 	.word	0x080015af
 8001540:	080015af 	.word	0x080015af
 8001544:	0800155d 	.word	0x0800155d
 8001548:	08001571 	.word	0x08001571
 800154c:	4a79      	ldr	r2, [pc, #484]	; (8001734 <HAL_GPIO_Init+0x2b4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001552:	e02c      	b.n	80015ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e029      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	3304      	adds	r3, #4
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	e024      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	3308      	adds	r3, #8
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e01f      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	330c      	adds	r3, #12
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e01a      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001582:	2304      	movs	r3, #4
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e013      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d105      	bne.n	800159c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001590:	2308      	movs	r3, #8
 8001592:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	611a      	str	r2, [r3, #16]
          break;
 800159a:	e009      	b.n	80015b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800159c:	2308      	movs	r3, #8
 800159e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69fa      	ldr	r2, [r7, #28]
 80015a4:	615a      	str	r2, [r3, #20]
          break;
 80015a6:	e003      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
          break;
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x130>
          break;
 80015ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	2bff      	cmp	r3, #255	; 0xff
 80015b4:	d801      	bhi.n	80015ba <HAL_GPIO_Init+0x13a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	e001      	b.n	80015be <HAL_GPIO_Init+0x13e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3304      	adds	r3, #4
 80015be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2bff      	cmp	r3, #255	; 0xff
 80015c4:	d802      	bhi.n	80015cc <HAL_GPIO_Init+0x14c>
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	e002      	b.n	80015d2 <HAL_GPIO_Init+0x152>
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3b08      	subs	r3, #8
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	210f      	movs	r1, #15
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	401a      	ands	r2, r3
 80015e4:	6a39      	ldr	r1, [r7, #32]
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 80b1 	beq.w	8001762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_GPIO_Init+0x2b8>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a4c      	ldr	r2, [pc, #304]	; (8001738 <HAL_GPIO_Init+0x2b8>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <HAL_GPIO_Init+0x2b8>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001618:	4a48      	ldr	r2, [pc, #288]	; (800173c <HAL_GPIO_Init+0x2bc>)
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a40      	ldr	r2, [pc, #256]	; (8001740 <HAL_GPIO_Init+0x2c0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d013      	beq.n	800166c <HAL_GPIO_Init+0x1ec>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a3f      	ldr	r2, [pc, #252]	; (8001744 <HAL_GPIO_Init+0x2c4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x1e8>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a3e      	ldr	r2, [pc, #248]	; (8001748 <HAL_GPIO_Init+0x2c8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x1e4>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a3d      	ldr	r2, [pc, #244]	; (800174c <HAL_GPIO_Init+0x2cc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x1e0>
 800165c:	2303      	movs	r3, #3
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x1ee>
 8001660:	2304      	movs	r3, #4
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x1ee>
 8001664:	2302      	movs	r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x1ee>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x1ee>
 800166c:	2300      	movs	r3, #0
 800166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167e:	492f      	ldr	r1, [pc, #188]	; (800173c <HAL_GPIO_Init+0x2bc>)
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	492c      	ldr	r1, [pc, #176]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4928      	ldr	r1, [pc, #160]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d006      	beq.n	80016ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	4922      	ldr	r1, [pc, #136]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60cb      	str	r3, [r1, #12]
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	43db      	mvns	r3, r3
 80016d6:	491e      	ldr	r1, [pc, #120]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016d8:	4013      	ands	r3, r2
 80016da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4918      	ldr	r1, [pc, #96]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4914      	ldr	r1, [pc, #80]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 8001700:	4013      	ands	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d021      	beq.n	8001754 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
 800171c:	e021      	b.n	8001762 <HAL_GPIO_Init+0x2e2>
 800171e:	bf00      	nop
 8001720:	10320000 	.word	0x10320000
 8001724:	10310000 	.word	0x10310000
 8001728:	10220000 	.word	0x10220000
 800172c:	10210000 	.word	0x10210000
 8001730:	10120000 	.word	0x10120000
 8001734:	10110000 	.word	0x10110000
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	40010800 	.word	0x40010800
 8001744:	40010c00 	.word	0x40010c00
 8001748:	40011000 	.word	0x40011000
 800174c:	40011400 	.word	0x40011400
 8001750:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_GPIO_Init+0x304>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	43db      	mvns	r3, r3
 800175c:	4909      	ldr	r1, [pc, #36]	; (8001784 <HAL_GPIO_Init+0x304>)
 800175e:	4013      	ands	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	3301      	adds	r3, #1
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	fa22 f303 	lsr.w	r3, r2, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	f47f ae8e 	bne.w	8001494 <HAL_GPIO_Init+0x14>
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	372c      	adds	r7, #44	; 0x2c
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40010400 	.word	0x40010400

08001788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e272      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a8:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d00c      	beq.n	80017ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b4:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d112      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5e>
 80017c0:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d10b      	bne.n	80017e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d06c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x12c>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d168      	bne.n	80018b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e24c      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ee:	d106      	bne.n	80017fe <HAL_RCC_OscConfig+0x76>
 80017f0:	4b80      	ldr	r3, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a7f      	ldr	r2, [pc, #508]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e02e      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a7a      	ldr	r2, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b78      	ldr	r3, [pc, #480]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a77      	ldr	r2, [pc, #476]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xbc>
 800182a:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a71      	ldr	r2, [pc, #452]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xd4>
 8001844:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6a      	ldr	r2, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7fe ff56 	bl	8000714 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7fe ff52 	bl	8000714 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e200      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b5d      	ldr	r3, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xe4>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7fe ff42 	bl	8000714 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7fe ff3e 	bl	8000714 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1ec      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x10c>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x18c>
 80018da:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1c0      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4939      	ldr	r1, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001922:	f7fe fef7 	bl	8000714 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7fe fef3 	bl	8000714 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1a1      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4927      	ldr	r1, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_RCC_OscConfig+0x270>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7fe fed6 	bl	8000714 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7fe fed2 	bl	8000714 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e180      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d03a      	beq.n	8001a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d019      	beq.n	80019d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7fe feb6 	bl	8000714 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7fe feb2 	bl	8000714 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e160      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f000 face 	bl	8001f6c <RCC_Delay>
 80019d0:	e01c      	b.n	8001a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_OscConfig+0x274>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7fe fe9c 	bl	8000714 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019de:	e00f      	b.n	8001a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7fe fe98 	bl	8000714 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d908      	bls.n	8001a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e146      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
 80019f8:	42420000 	.word	0x42420000
 80019fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e9      	bne.n	80019e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80a6 	beq.w	8001b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4b8b      	ldr	r3, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10d      	bne.n	8001a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a87      	ldr	r2, [pc, #540]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b85      	ldr	r3, [pc, #532]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_OscConfig+0x4c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d118      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b7f      	ldr	r3, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x4c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a7e      	ldr	r2, [pc, #504]	; (8001c50 <HAL_RCC_OscConfig+0x4c8>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7fe fe59 	bl	8000714 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a66:	f7fe fe55 	bl	8000714 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b64      	cmp	r3, #100	; 0x64
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e103      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x4c8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <HAL_RCC_OscConfig+0x312>
 8001a8c:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e02d      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	4a69      	ldr	r2, [pc, #420]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f023 0301 	bic.w	r3, r3, #1
 8001aac:	6213      	str	r3, [r2, #32]
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a66      	ldr	r2, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 0304 	bic.w	r3, r3, #4
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	e01c      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x356>
 8001ac4:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4b5e      	ldr	r3, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a5d      	ldr	r2, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e00b      	b.n	8001af6 <HAL_RCC_OscConfig+0x36e>
 8001ade:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	4a5a      	ldr	r2, [pc, #360]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6213      	str	r3, [r2, #32]
 8001aea:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f023 0304 	bic.w	r3, r3, #4
 8001af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7fe fe09 	bl	8000714 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7fe fe05 	bl	8000714 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0b1      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0ee      	beq.n	8001b06 <HAL_RCC_OscConfig+0x37e>
 8001b28:	e014      	b.n	8001b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7fe fdf3 	bl	8000714 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7fe fdef 	bl	8000714 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e09b      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d105      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5a:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8087 	beq.w	8001c7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d061      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d146      	bne.n	8001c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x4cc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7fe fdc3 	bl	8000714 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe fdbf 	bl	8000714 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e06d      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4921      	ldr	r1, [pc, #132]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a19      	ldr	r1, [r3, #32]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	491b      	ldr	r1, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x4cc>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7fe fd93 	bl	8000714 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe fd8f 	bl	8000714 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e03d      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x46a>
 8001c10:	e035      	b.n	8001c7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x4cc>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7fe fd7c 	bl	8000714 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe fd78 	bl	8000714 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e026      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x498>
 8001c3e:	e01e      	b.n	8001c7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e019      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_RCC_OscConfig+0x500>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000

08001c8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0d0      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d910      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 0207 	bic.w	r2, r3, #7
 8001cb6:	4965      	ldr	r1, [pc, #404]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0b8      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	4a58      	ldr	r2, [pc, #352]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	494d      	ldr	r1, [pc, #308]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d040      	beq.n	8001dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d115      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e07f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4a:	4b41      	ldr	r3, [pc, #260]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e073      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e06b      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f023 0203 	bic.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4936      	ldr	r1, [pc, #216]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d7c:	f7fe fcca 	bl	8000714 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7fe fcc6 	bl	8000714 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e053      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1eb      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d210      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 0207 	bic.w	r2, r3, #7
 8001dc2:	4922      	ldr	r1, [pc, #136]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e032      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4916      	ldr	r1, [pc, #88]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	490e      	ldr	r1, [pc, #56]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1a:	f000 f821 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	490a      	ldr	r1, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2c:	5ccb      	ldrb	r3, [r1, r3]
 8001e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1cc>)
 8001e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1d0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fc28 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08002f64 	.word	0x08002f64
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x30>
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d003      	beq.n	8001e96 <HAL_RCC_GetSysClockFreq+0x36>
 8001e8e:	e027      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e92:	613b      	str	r3, [r7, #16]
      break;
 8001e94:	e027      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	0c9b      	lsrs	r3, r3, #18
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0c5b      	lsrs	r3, r3, #17
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ec2:	fb03 f202 	mul.w	r2, r3, r2
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e004      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	613b      	str	r3, [r7, #16]
      break;
 8001ede:	e002      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ee2:	613b      	str	r3, [r7, #16]
      break;
 8001ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ee6:	693b      	ldr	r3, [r7, #16]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	007a1200 	.word	0x007a1200
 8001efc:	08002f7c 	.word	0x08002f7c
 8001f00:	08002f8c 	.word	0x08002f8c
 8001f04:	003d0900 	.word	0x003d0900

08001f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f20:	f7ff fff2 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4903      	ldr	r1, [pc, #12]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08002f74 	.word	0x08002f74

08001f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	0adb      	lsrs	r3, r3, #11
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4903      	ldr	r1, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08002f74 	.word	0x08002f74

08001f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <RCC_Delay+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <RCC_Delay+0x38>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a5b      	lsrs	r3, r3, #9
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f88:	bf00      	nop
  }
  while (Delay --);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <RCC_Delay+0x1c>
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e04a      	b.n	8002050 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fa24 	bl	800041c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f925 	bl	800223c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002010:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0208 	orr.w	r2, r2, #8
 8002020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	4613      	mov	r3, r2
 8002066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b20      	cmp	r3, #32
 8002076:	d16d      	bne.n	8002154 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_UART_Transmit+0x2c>
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e066      	b.n	8002156 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2221      	movs	r2, #33	; 0x21
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002096:	f7fe fb3d 	bl	8000714 <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	88fa      	ldrh	r2, [r7, #6]
 80020a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b0:	d108      	bne.n	80020c4 <HAL_UART_Transmit+0x6c>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	e003      	b.n	80020cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020cc:	e02a      	b.n	8002124 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f840 	bl	800215e <UART_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e036      	b.n	8002156 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10b      	bne.n	8002106 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	3302      	adds	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e007      	b.n	8002116 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	781a      	ldrb	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3301      	adds	r3, #1
 8002114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1cf      	bne.n	80020ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f810 	bl	800215e <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e006      	b.n	8002156 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b090      	sub	sp, #64	; 0x40
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216e:	e050      	b.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002176:	d04c      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <UART_WaitOnFlagUntilTimeout+0x30>
 800217e:	f7fe fac9 	bl	8000714 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800218a:	429a      	cmp	r2, r3
 800218c:	d241      	bcs.n	8002212 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	330c      	adds	r3, #12
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	e853 3f00 	ldrex	r3, [r3]
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80021a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	330c      	adds	r3, #12
 80021ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ae:	637a      	str	r2, [r7, #52]	; 0x34
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021b6:	e841 2300 	strex	r3, r2, [r1]
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e5      	bne.n	800218e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3314      	adds	r3, #20
 80021c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	e853 3f00 	ldrex	r3, [r3]
 80021d0:	613b      	str	r3, [r7, #16]
   return(result);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3314      	adds	r3, #20
 80021e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021e2:	623a      	str	r2, [r7, #32]
 80021e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e6:	69f9      	ldr	r1, [r7, #28]
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	e841 2300 	strex	r3, r2, [r1]
 80021ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e5      	bne.n	80021c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e00f      	b.n	8002232 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d09f      	beq.n	8002170 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3740      	adds	r7, #64	; 0x40
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002276:	f023 030c 	bic.w	r3, r3, #12
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	430b      	orrs	r3, r1
 8002282:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <UART_SetConfig+0x114>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022a4:	f7ff fe4e 	bl	8001f44 <HAL_RCC_GetPCLK2Freq>
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	e002      	b.n	80022b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022ac:	f7ff fe36 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 80022b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009a      	lsls	r2, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c8:	4a22      	ldr	r2, [pc, #136]	; (8002354 <UART_SetConfig+0x118>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	0119      	lsls	r1, r3, #4
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <UART_SetConfig+0x118>)
 80022ea:	fba3 0302 	umull	r0, r3, r3, r2
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2064      	movs	r0, #100	; 0x64
 80022f2:	fb00 f303 	mul.w	r3, r0, r3
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	3332      	adds	r3, #50	; 0x32
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <UART_SetConfig+0x118>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	4419      	add	r1, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	441a      	add	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <UART_SetConfig+0x118>)
 8002322:	fba3 0302 	umull	r0, r3, r3, r2
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2064      	movs	r0, #100	; 0x64
 800232a:	fb00 f303 	mul.w	r3, r0, r3
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	3332      	adds	r3, #50	; 0x32
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <UART_SetConfig+0x118>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	440a      	add	r2, r1
 8002346:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002348:	bf00      	nop
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013800 	.word	0x40013800
 8002354:	51eb851f 	.word	0x51eb851f

08002358 <canInit>:

}

////////////////////////////////////////
extern CAN_HandleTypeDef hcan;
static void canInit() {
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;

	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 800235e:	2301      	movs	r3, #1
 8002360:	623b      	str	r3, [r7, #32]
	can_filter.FilterBank = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
	can_filter.FilterIdHigh = 0x0;
 800236a:	2300      	movs	r3, #0
 800236c:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x0;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800237a:	2300      	movs	r3, #0
 800237c:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800237e:	2301      	movs	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
	can_filter.SlaveStartFilterBank = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &can_filter);
 8002386:	463b      	mov	r3, r7
 8002388:	4619      	mov	r1, r3
 800238a:	4812      	ldr	r0, [pc, #72]	; (80023d4 <canInit+0x7c>)
 800238c:	f7fe faeb 	bl	8000966 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8002390:	2102      	movs	r1, #2
 8002392:	4810      	ldr	r0, [pc, #64]	; (80023d4 <canInit+0x7c>)
 8002394:	f7fe fd15 	bl	8000dc2 <HAL_CAN_ActivateNotification>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <canInit+0x4c>
			!= HAL_OK)
		printf("CAN RX Interrupt Activate : Failed\n");
 800239e:	480e      	ldr	r0, [pc, #56]	; (80023d8 <canInit+0x80>)
 80023a0:	f000 f9ce 	bl	8002740 <puts>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80023a4:	2101      	movs	r1, #1
 80023a6:	480b      	ldr	r0, [pc, #44]	; (80023d4 <canInit+0x7c>)
 80023a8:	f7fe fd0b 	bl	8000dc2 <HAL_CAN_ActivateNotification>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <canInit+0x60>
		printf("CAN TX Interrupt Activate : Failed\n");
 80023b2:	480a      	ldr	r0, [pc, #40]	; (80023dc <canInit+0x84>)
 80023b4:	f000 f9c4 	bl	8002740 <puts>
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80023b8:	4806      	ldr	r0, [pc, #24]	; (80023d4 <canInit+0x7c>)
 80023ba:	f7fe fb9d 	bl	8000af8 <HAL_CAN_Start>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <canInit+0x72>
		printf("CAN Start : Failed\n");
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <canInit+0x88>)
 80023c6:	f000 f9bb 	bl	8002740 <puts>
}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000008c 	.word	0x2000008c
 80023d8:	08002eb0 	.word	0x08002eb0
 80023dc:	08002ed4 	.word	0x08002ed4
 80023e0:	08002ef8 	.word	0x08002ef8

080023e4 <canInterrupt>:

static CAN_RxHeaderTypeDef rx_header;
static uint8_t bytes[8];
void canInterrupt() {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, bytes);
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <canInterrupt+0x14>)
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <canInterrupt+0x18>)
 80023ec:	2100      	movs	r1, #0
 80023ee:	4804      	ldr	r0, [pc, #16]	; (8002400 <canInterrupt+0x1c>)
 80023f0:	f7fe fbc6 	bl	8000b80 <HAL_CAN_GetRxMessage>
//	printf("Interrupt-> 0x%02x : ", (unsigned int) rx_header.ExtId);
//	for (int i = 0; i < rx_header.DLC; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");

}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000120 	.word	0x20000120
 80023fc:	20000104 	.word	0x20000104
 8002400:	2000008c 	.word	0x2000008c

08002404 <runTx>:
	}
	printf("\n");
}

uint8_t tx_bytes[70];
void runTx() {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
	canInit();
 800240a:	f7ff ffa5 	bl	8002358 <canInit>

	for (int i = 0; i < sizeof(tx_bytes); i++)
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	e009      	b.n	8002428 <runTx+0x24>
		tx_bytes[i] = i;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b2d9      	uxtb	r1, r3
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <runTx+0x3c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	460a      	mov	r2, r1
 8002420:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tx_bytes); i++)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3301      	adds	r3, #1
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b45      	cmp	r3, #69	; 0x45
 800242c:	d9f2      	bls.n	8002414 <runTx+0x10>

	printf("----------------------INITIATING-----------------------\n");
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <runTx+0x40>)
 8002430:	f000 f986 	bl	8002740 <puts>
	HAL_Delay(1000);
 8002434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002438:	f7fe f976 	bl	8000728 <HAL_Delay>

	while (1) {
 800243c:	e7fe      	b.n	800243c <runTx+0x38>
 800243e:	bf00      	nop
 8002440:	20000128 	.word	0x20000128
 8002444:	08002f2c 	.word	0x08002f2c

08002448 <__errno>:
 8002448:	4b01      	ldr	r3, [pc, #4]	; (8002450 <__errno+0x8>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000000c 	.word	0x2000000c

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2600      	movs	r6, #0
 8002458:	4d0c      	ldr	r5, [pc, #48]	; (800248c <__libc_init_array+0x38>)
 800245a:	4c0d      	ldr	r4, [pc, #52]	; (8002490 <__libc_init_array+0x3c>)
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	f000 fd18 	bl	8002e98 <_init>
 8002468:	2600      	movs	r6, #0
 800246a:	4d0a      	ldr	r5, [pc, #40]	; (8002494 <__libc_init_array+0x40>)
 800246c:	4c0a      	ldr	r4, [pc, #40]	; (8002498 <__libc_init_array+0x44>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	f855 3b04 	ldr.w	r3, [r5], #4
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	f855 3b04 	ldr.w	r3, [r5], #4
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	08002ff4 	.word	0x08002ff4
 8002490:	08002ff4 	.word	0x08002ff4
 8002494:	08002ff4 	.word	0x08002ff4
 8002498:	08002ff8 	.word	0x08002ff8

0800249c <memset>:
 800249c:	4603      	mov	r3, r0
 800249e:	4402      	add	r2, r0
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	f803 1b01 	strb.w	r1, [r3], #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <_free_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4605      	mov	r5, r0
 80024b0:	2900      	cmp	r1, #0
 80024b2:	d040      	beq.n	8002536 <_free_r+0x8a>
 80024b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024b8:	1f0c      	subs	r4, r1, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bfb8      	it	lt
 80024be:	18e4      	addlt	r4, r4, r3
 80024c0:	f000 fc32 	bl	8002d28 <__malloc_lock>
 80024c4:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <_free_r+0x8c>)
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	b933      	cbnz	r3, 80024d8 <_free_r+0x2c>
 80024ca:	6063      	str	r3, [r4, #4]
 80024cc:	6014      	str	r4, [r2, #0]
 80024ce:	4628      	mov	r0, r5
 80024d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024d4:	f000 bc2e 	b.w	8002d34 <__malloc_unlock>
 80024d8:	42a3      	cmp	r3, r4
 80024da:	d908      	bls.n	80024ee <_free_r+0x42>
 80024dc:	6820      	ldr	r0, [r4, #0]
 80024de:	1821      	adds	r1, r4, r0
 80024e0:	428b      	cmp	r3, r1
 80024e2:	bf01      	itttt	eq
 80024e4:	6819      	ldreq	r1, [r3, #0]
 80024e6:	685b      	ldreq	r3, [r3, #4]
 80024e8:	1809      	addeq	r1, r1, r0
 80024ea:	6021      	streq	r1, [r4, #0]
 80024ec:	e7ed      	b.n	80024ca <_free_r+0x1e>
 80024ee:	461a      	mov	r2, r3
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	b10b      	cbz	r3, 80024f8 <_free_r+0x4c>
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	d9fa      	bls.n	80024ee <_free_r+0x42>
 80024f8:	6811      	ldr	r1, [r2, #0]
 80024fa:	1850      	adds	r0, r2, r1
 80024fc:	42a0      	cmp	r0, r4
 80024fe:	d10b      	bne.n	8002518 <_free_r+0x6c>
 8002500:	6820      	ldr	r0, [r4, #0]
 8002502:	4401      	add	r1, r0
 8002504:	1850      	adds	r0, r2, r1
 8002506:	4283      	cmp	r3, r0
 8002508:	6011      	str	r1, [r2, #0]
 800250a:	d1e0      	bne.n	80024ce <_free_r+0x22>
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4401      	add	r1, r0
 8002512:	6011      	str	r1, [r2, #0]
 8002514:	6053      	str	r3, [r2, #4]
 8002516:	e7da      	b.n	80024ce <_free_r+0x22>
 8002518:	d902      	bls.n	8002520 <_free_r+0x74>
 800251a:	230c      	movs	r3, #12
 800251c:	602b      	str	r3, [r5, #0]
 800251e:	e7d6      	b.n	80024ce <_free_r+0x22>
 8002520:	6820      	ldr	r0, [r4, #0]
 8002522:	1821      	adds	r1, r4, r0
 8002524:	428b      	cmp	r3, r1
 8002526:	bf01      	itttt	eq
 8002528:	6819      	ldreq	r1, [r3, #0]
 800252a:	685b      	ldreq	r3, [r3, #4]
 800252c:	1809      	addeq	r1, r1, r0
 800252e:	6021      	streq	r1, [r4, #0]
 8002530:	6063      	str	r3, [r4, #4]
 8002532:	6054      	str	r4, [r2, #4]
 8002534:	e7cb      	b.n	80024ce <_free_r+0x22>
 8002536:	bd38      	pop	{r3, r4, r5, pc}
 8002538:	20000170 	.word	0x20000170

0800253c <sbrk_aligned>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	4e0e      	ldr	r6, [pc, #56]	; (8002578 <sbrk_aligned+0x3c>)
 8002540:	460c      	mov	r4, r1
 8002542:	6831      	ldr	r1, [r6, #0]
 8002544:	4605      	mov	r5, r0
 8002546:	b911      	cbnz	r1, 800254e <sbrk_aligned+0x12>
 8002548:	f000 f902 	bl	8002750 <_sbrk_r>
 800254c:	6030      	str	r0, [r6, #0]
 800254e:	4621      	mov	r1, r4
 8002550:	4628      	mov	r0, r5
 8002552:	f000 f8fd 	bl	8002750 <_sbrk_r>
 8002556:	1c43      	adds	r3, r0, #1
 8002558:	d00a      	beq.n	8002570 <sbrk_aligned+0x34>
 800255a:	1cc4      	adds	r4, r0, #3
 800255c:	f024 0403 	bic.w	r4, r4, #3
 8002560:	42a0      	cmp	r0, r4
 8002562:	d007      	beq.n	8002574 <sbrk_aligned+0x38>
 8002564:	1a21      	subs	r1, r4, r0
 8002566:	4628      	mov	r0, r5
 8002568:	f000 f8f2 	bl	8002750 <_sbrk_r>
 800256c:	3001      	adds	r0, #1
 800256e:	d101      	bne.n	8002574 <sbrk_aligned+0x38>
 8002570:	f04f 34ff 	mov.w	r4, #4294967295
 8002574:	4620      	mov	r0, r4
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	20000174 	.word	0x20000174

0800257c <_malloc_r>:
 800257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002580:	1ccd      	adds	r5, r1, #3
 8002582:	f025 0503 	bic.w	r5, r5, #3
 8002586:	3508      	adds	r5, #8
 8002588:	2d0c      	cmp	r5, #12
 800258a:	bf38      	it	cc
 800258c:	250c      	movcc	r5, #12
 800258e:	2d00      	cmp	r5, #0
 8002590:	4607      	mov	r7, r0
 8002592:	db01      	blt.n	8002598 <_malloc_r+0x1c>
 8002594:	42a9      	cmp	r1, r5
 8002596:	d905      	bls.n	80025a4 <_malloc_r+0x28>
 8002598:	230c      	movs	r3, #12
 800259a:	2600      	movs	r6, #0
 800259c:	603b      	str	r3, [r7, #0]
 800259e:	4630      	mov	r0, r6
 80025a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a4:	4e2e      	ldr	r6, [pc, #184]	; (8002660 <_malloc_r+0xe4>)
 80025a6:	f000 fbbf 	bl	8002d28 <__malloc_lock>
 80025aa:	6833      	ldr	r3, [r6, #0]
 80025ac:	461c      	mov	r4, r3
 80025ae:	bb34      	cbnz	r4, 80025fe <_malloc_r+0x82>
 80025b0:	4629      	mov	r1, r5
 80025b2:	4638      	mov	r0, r7
 80025b4:	f7ff ffc2 	bl	800253c <sbrk_aligned>
 80025b8:	1c43      	adds	r3, r0, #1
 80025ba:	4604      	mov	r4, r0
 80025bc:	d14d      	bne.n	800265a <_malloc_r+0xde>
 80025be:	6834      	ldr	r4, [r6, #0]
 80025c0:	4626      	mov	r6, r4
 80025c2:	2e00      	cmp	r6, #0
 80025c4:	d140      	bne.n	8002648 <_malloc_r+0xcc>
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	4631      	mov	r1, r6
 80025ca:	4638      	mov	r0, r7
 80025cc:	eb04 0803 	add.w	r8, r4, r3
 80025d0:	f000 f8be 	bl	8002750 <_sbrk_r>
 80025d4:	4580      	cmp	r8, r0
 80025d6:	d13a      	bne.n	800264e <_malloc_r+0xd2>
 80025d8:	6821      	ldr	r1, [r4, #0]
 80025da:	3503      	adds	r5, #3
 80025dc:	1a6d      	subs	r5, r5, r1
 80025de:	f025 0503 	bic.w	r5, r5, #3
 80025e2:	3508      	adds	r5, #8
 80025e4:	2d0c      	cmp	r5, #12
 80025e6:	bf38      	it	cc
 80025e8:	250c      	movcc	r5, #12
 80025ea:	4638      	mov	r0, r7
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7ff ffa5 	bl	800253c <sbrk_aligned>
 80025f2:	3001      	adds	r0, #1
 80025f4:	d02b      	beq.n	800264e <_malloc_r+0xd2>
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	442b      	add	r3, r5
 80025fa:	6023      	str	r3, [r4, #0]
 80025fc:	e00e      	b.n	800261c <_malloc_r+0xa0>
 80025fe:	6822      	ldr	r2, [r4, #0]
 8002600:	1b52      	subs	r2, r2, r5
 8002602:	d41e      	bmi.n	8002642 <_malloc_r+0xc6>
 8002604:	2a0b      	cmp	r2, #11
 8002606:	d916      	bls.n	8002636 <_malloc_r+0xba>
 8002608:	1961      	adds	r1, r4, r5
 800260a:	42a3      	cmp	r3, r4
 800260c:	6025      	str	r5, [r4, #0]
 800260e:	bf18      	it	ne
 8002610:	6059      	strne	r1, [r3, #4]
 8002612:	6863      	ldr	r3, [r4, #4]
 8002614:	bf08      	it	eq
 8002616:	6031      	streq	r1, [r6, #0]
 8002618:	5162      	str	r2, [r4, r5]
 800261a:	604b      	str	r3, [r1, #4]
 800261c:	4638      	mov	r0, r7
 800261e:	f104 060b 	add.w	r6, r4, #11
 8002622:	f000 fb87 	bl	8002d34 <__malloc_unlock>
 8002626:	f026 0607 	bic.w	r6, r6, #7
 800262a:	1d23      	adds	r3, r4, #4
 800262c:	1af2      	subs	r2, r6, r3
 800262e:	d0b6      	beq.n	800259e <_malloc_r+0x22>
 8002630:	1b9b      	subs	r3, r3, r6
 8002632:	50a3      	str	r3, [r4, r2]
 8002634:	e7b3      	b.n	800259e <_malloc_r+0x22>
 8002636:	6862      	ldr	r2, [r4, #4]
 8002638:	42a3      	cmp	r3, r4
 800263a:	bf0c      	ite	eq
 800263c:	6032      	streq	r2, [r6, #0]
 800263e:	605a      	strne	r2, [r3, #4]
 8002640:	e7ec      	b.n	800261c <_malloc_r+0xa0>
 8002642:	4623      	mov	r3, r4
 8002644:	6864      	ldr	r4, [r4, #4]
 8002646:	e7b2      	b.n	80025ae <_malloc_r+0x32>
 8002648:	4634      	mov	r4, r6
 800264a:	6876      	ldr	r6, [r6, #4]
 800264c:	e7b9      	b.n	80025c2 <_malloc_r+0x46>
 800264e:	230c      	movs	r3, #12
 8002650:	4638      	mov	r0, r7
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	f000 fb6e 	bl	8002d34 <__malloc_unlock>
 8002658:	e7a1      	b.n	800259e <_malloc_r+0x22>
 800265a:	6025      	str	r5, [r4, #0]
 800265c:	e7de      	b.n	800261c <_malloc_r+0xa0>
 800265e:	bf00      	nop
 8002660:	20000170 	.word	0x20000170

08002664 <_puts_r>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	460e      	mov	r6, r1
 8002668:	4605      	mov	r5, r0
 800266a:	b118      	cbz	r0, 8002674 <_puts_r+0x10>
 800266c:	6983      	ldr	r3, [r0, #24]
 800266e:	b90b      	cbnz	r3, 8002674 <_puts_r+0x10>
 8002670:	f000 fa54 	bl	8002b1c <__sinit>
 8002674:	69ab      	ldr	r3, [r5, #24]
 8002676:	68ac      	ldr	r4, [r5, #8]
 8002678:	b913      	cbnz	r3, 8002680 <_puts_r+0x1c>
 800267a:	4628      	mov	r0, r5
 800267c:	f000 fa4e 	bl	8002b1c <__sinit>
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <_puts_r+0xd0>)
 8002682:	429c      	cmp	r4, r3
 8002684:	d120      	bne.n	80026c8 <_puts_r+0x64>
 8002686:	686c      	ldr	r4, [r5, #4]
 8002688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800268a:	07db      	lsls	r3, r3, #31
 800268c:	d405      	bmi.n	800269a <_puts_r+0x36>
 800268e:	89a3      	ldrh	r3, [r4, #12]
 8002690:	0598      	lsls	r0, r3, #22
 8002692:	d402      	bmi.n	800269a <_puts_r+0x36>
 8002694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002696:	f000 fadf 	bl	8002c58 <__retarget_lock_acquire_recursive>
 800269a:	89a3      	ldrh	r3, [r4, #12]
 800269c:	0719      	lsls	r1, r3, #28
 800269e:	d51d      	bpl.n	80026dc <_puts_r+0x78>
 80026a0:	6923      	ldr	r3, [r4, #16]
 80026a2:	b1db      	cbz	r3, 80026dc <_puts_r+0x78>
 80026a4:	3e01      	subs	r6, #1
 80026a6:	68a3      	ldr	r3, [r4, #8]
 80026a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60a3      	str	r3, [r4, #8]
 80026b0:	bb39      	cbnz	r1, 8002702 <_puts_r+0x9e>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da38      	bge.n	8002728 <_puts_r+0xc4>
 80026b6:	4622      	mov	r2, r4
 80026b8:	210a      	movs	r1, #10
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f858 	bl	8002770 <__swbuf_r>
 80026c0:	3001      	adds	r0, #1
 80026c2:	d011      	beq.n	80026e8 <_puts_r+0x84>
 80026c4:	250a      	movs	r5, #10
 80026c6:	e011      	b.n	80026ec <_puts_r+0x88>
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <_puts_r+0xd4>)
 80026ca:	429c      	cmp	r4, r3
 80026cc:	d101      	bne.n	80026d2 <_puts_r+0x6e>
 80026ce:	68ac      	ldr	r4, [r5, #8]
 80026d0:	e7da      	b.n	8002688 <_puts_r+0x24>
 80026d2:	4b1a      	ldr	r3, [pc, #104]	; (800273c <_puts_r+0xd8>)
 80026d4:	429c      	cmp	r4, r3
 80026d6:	bf08      	it	eq
 80026d8:	68ec      	ldreq	r4, [r5, #12]
 80026da:	e7d5      	b.n	8002688 <_puts_r+0x24>
 80026dc:	4621      	mov	r1, r4
 80026de:	4628      	mov	r0, r5
 80026e0:	f000 f898 	bl	8002814 <__swsetup_r>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d0dd      	beq.n	80026a4 <_puts_r+0x40>
 80026e8:	f04f 35ff 	mov.w	r5, #4294967295
 80026ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026ee:	07da      	lsls	r2, r3, #31
 80026f0:	d405      	bmi.n	80026fe <_puts_r+0x9a>
 80026f2:	89a3      	ldrh	r3, [r4, #12]
 80026f4:	059b      	lsls	r3, r3, #22
 80026f6:	d402      	bmi.n	80026fe <_puts_r+0x9a>
 80026f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026fa:	f000 faae 	bl	8002c5a <__retarget_lock_release_recursive>
 80026fe:	4628      	mov	r0, r5
 8002700:	bd70      	pop	{r4, r5, r6, pc}
 8002702:	2b00      	cmp	r3, #0
 8002704:	da04      	bge.n	8002710 <_puts_r+0xac>
 8002706:	69a2      	ldr	r2, [r4, #24]
 8002708:	429a      	cmp	r2, r3
 800270a:	dc06      	bgt.n	800271a <_puts_r+0xb6>
 800270c:	290a      	cmp	r1, #10
 800270e:	d004      	beq.n	800271a <_puts_r+0xb6>
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	6022      	str	r2, [r4, #0]
 8002716:	7019      	strb	r1, [r3, #0]
 8002718:	e7c5      	b.n	80026a6 <_puts_r+0x42>
 800271a:	4622      	mov	r2, r4
 800271c:	4628      	mov	r0, r5
 800271e:	f000 f827 	bl	8002770 <__swbuf_r>
 8002722:	3001      	adds	r0, #1
 8002724:	d1bf      	bne.n	80026a6 <_puts_r+0x42>
 8002726:	e7df      	b.n	80026e8 <_puts_r+0x84>
 8002728:	250a      	movs	r5, #10
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	6022      	str	r2, [r4, #0]
 8002730:	701d      	strb	r5, [r3, #0]
 8002732:	e7db      	b.n	80026ec <_puts_r+0x88>
 8002734:	08002fb4 	.word	0x08002fb4
 8002738:	08002fd4 	.word	0x08002fd4
 800273c:	08002f94 	.word	0x08002f94

08002740 <puts>:
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <puts+0xc>)
 8002742:	4601      	mov	r1, r0
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	f7ff bf8d 	b.w	8002664 <_puts_r>
 800274a:	bf00      	nop
 800274c:	2000000c 	.word	0x2000000c

08002750 <_sbrk_r>:
 8002750:	b538      	push	{r3, r4, r5, lr}
 8002752:	2300      	movs	r3, #0
 8002754:	4d05      	ldr	r5, [pc, #20]	; (800276c <_sbrk_r+0x1c>)
 8002756:	4604      	mov	r4, r0
 8002758:	4608      	mov	r0, r1
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	f7fd ff20 	bl	80005a0 <_sbrk>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_sbrk_r+0x1a>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	b103      	cbz	r3, 800276a <_sbrk_r+0x1a>
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	2000017c 	.word	0x2000017c

08002770 <__swbuf_r>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	460e      	mov	r6, r1
 8002774:	4614      	mov	r4, r2
 8002776:	4605      	mov	r5, r0
 8002778:	b118      	cbz	r0, 8002782 <__swbuf_r+0x12>
 800277a:	6983      	ldr	r3, [r0, #24]
 800277c:	b90b      	cbnz	r3, 8002782 <__swbuf_r+0x12>
 800277e:	f000 f9cd 	bl	8002b1c <__sinit>
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <__swbuf_r+0x98>)
 8002784:	429c      	cmp	r4, r3
 8002786:	d12b      	bne.n	80027e0 <__swbuf_r+0x70>
 8002788:	686c      	ldr	r4, [r5, #4]
 800278a:	69a3      	ldr	r3, [r4, #24]
 800278c:	60a3      	str	r3, [r4, #8]
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	071a      	lsls	r2, r3, #28
 8002792:	d52f      	bpl.n	80027f4 <__swbuf_r+0x84>
 8002794:	6923      	ldr	r3, [r4, #16]
 8002796:	b36b      	cbz	r3, 80027f4 <__swbuf_r+0x84>
 8002798:	6923      	ldr	r3, [r4, #16]
 800279a:	6820      	ldr	r0, [r4, #0]
 800279c:	b2f6      	uxtb	r6, r6
 800279e:	1ac0      	subs	r0, r0, r3
 80027a0:	6963      	ldr	r3, [r4, #20]
 80027a2:	4637      	mov	r7, r6
 80027a4:	4283      	cmp	r3, r0
 80027a6:	dc04      	bgt.n	80027b2 <__swbuf_r+0x42>
 80027a8:	4621      	mov	r1, r4
 80027aa:	4628      	mov	r0, r5
 80027ac:	f000 f922 	bl	80029f4 <_fflush_r>
 80027b0:	bb30      	cbnz	r0, 8002800 <__swbuf_r+0x90>
 80027b2:	68a3      	ldr	r3, [r4, #8]
 80027b4:	3001      	adds	r0, #1
 80027b6:	3b01      	subs	r3, #1
 80027b8:	60a3      	str	r3, [r4, #8]
 80027ba:	6823      	ldr	r3, [r4, #0]
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	6022      	str	r2, [r4, #0]
 80027c0:	701e      	strb	r6, [r3, #0]
 80027c2:	6963      	ldr	r3, [r4, #20]
 80027c4:	4283      	cmp	r3, r0
 80027c6:	d004      	beq.n	80027d2 <__swbuf_r+0x62>
 80027c8:	89a3      	ldrh	r3, [r4, #12]
 80027ca:	07db      	lsls	r3, r3, #31
 80027cc:	d506      	bpl.n	80027dc <__swbuf_r+0x6c>
 80027ce:	2e0a      	cmp	r6, #10
 80027d0:	d104      	bne.n	80027dc <__swbuf_r+0x6c>
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f000 f90d 	bl	80029f4 <_fflush_r>
 80027da:	b988      	cbnz	r0, 8002800 <__swbuf_r+0x90>
 80027dc:	4638      	mov	r0, r7
 80027de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <__swbuf_r+0x9c>)
 80027e2:	429c      	cmp	r4, r3
 80027e4:	d101      	bne.n	80027ea <__swbuf_r+0x7a>
 80027e6:	68ac      	ldr	r4, [r5, #8]
 80027e8:	e7cf      	b.n	800278a <__swbuf_r+0x1a>
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <__swbuf_r+0xa0>)
 80027ec:	429c      	cmp	r4, r3
 80027ee:	bf08      	it	eq
 80027f0:	68ec      	ldreq	r4, [r5, #12]
 80027f2:	e7ca      	b.n	800278a <__swbuf_r+0x1a>
 80027f4:	4621      	mov	r1, r4
 80027f6:	4628      	mov	r0, r5
 80027f8:	f000 f80c 	bl	8002814 <__swsetup_r>
 80027fc:	2800      	cmp	r0, #0
 80027fe:	d0cb      	beq.n	8002798 <__swbuf_r+0x28>
 8002800:	f04f 37ff 	mov.w	r7, #4294967295
 8002804:	e7ea      	b.n	80027dc <__swbuf_r+0x6c>
 8002806:	bf00      	nop
 8002808:	08002fb4 	.word	0x08002fb4
 800280c:	08002fd4 	.word	0x08002fd4
 8002810:	08002f94 	.word	0x08002f94

08002814 <__swsetup_r>:
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <__swsetup_r+0xcc>)
 8002816:	b570      	push	{r4, r5, r6, lr}
 8002818:	681d      	ldr	r5, [r3, #0]
 800281a:	4606      	mov	r6, r0
 800281c:	460c      	mov	r4, r1
 800281e:	b125      	cbz	r5, 800282a <__swsetup_r+0x16>
 8002820:	69ab      	ldr	r3, [r5, #24]
 8002822:	b913      	cbnz	r3, 800282a <__swsetup_r+0x16>
 8002824:	4628      	mov	r0, r5
 8002826:	f000 f979 	bl	8002b1c <__sinit>
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <__swsetup_r+0xd0>)
 800282c:	429c      	cmp	r4, r3
 800282e:	d10f      	bne.n	8002850 <__swsetup_r+0x3c>
 8002830:	686c      	ldr	r4, [r5, #4]
 8002832:	89a3      	ldrh	r3, [r4, #12]
 8002834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002838:	0719      	lsls	r1, r3, #28
 800283a:	d42c      	bmi.n	8002896 <__swsetup_r+0x82>
 800283c:	06dd      	lsls	r5, r3, #27
 800283e:	d411      	bmi.n	8002864 <__swsetup_r+0x50>
 8002840:	2309      	movs	r3, #9
 8002842:	6033      	str	r3, [r6, #0]
 8002844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	81a3      	strh	r3, [r4, #12]
 800284e:	e03e      	b.n	80028ce <__swsetup_r+0xba>
 8002850:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <__swsetup_r+0xd4>)
 8002852:	429c      	cmp	r4, r3
 8002854:	d101      	bne.n	800285a <__swsetup_r+0x46>
 8002856:	68ac      	ldr	r4, [r5, #8]
 8002858:	e7eb      	b.n	8002832 <__swsetup_r+0x1e>
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <__swsetup_r+0xd8>)
 800285c:	429c      	cmp	r4, r3
 800285e:	bf08      	it	eq
 8002860:	68ec      	ldreq	r4, [r5, #12]
 8002862:	e7e6      	b.n	8002832 <__swsetup_r+0x1e>
 8002864:	0758      	lsls	r0, r3, #29
 8002866:	d512      	bpl.n	800288e <__swsetup_r+0x7a>
 8002868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800286a:	b141      	cbz	r1, 800287e <__swsetup_r+0x6a>
 800286c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002870:	4299      	cmp	r1, r3
 8002872:	d002      	beq.n	800287a <__swsetup_r+0x66>
 8002874:	4630      	mov	r0, r6
 8002876:	f7ff fe19 	bl	80024ac <_free_r>
 800287a:	2300      	movs	r3, #0
 800287c:	6363      	str	r3, [r4, #52]	; 0x34
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002884:	81a3      	strh	r3, [r4, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	6063      	str	r3, [r4, #4]
 800288a:	6923      	ldr	r3, [r4, #16]
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	89a3      	ldrh	r3, [r4, #12]
 8002890:	f043 0308 	orr.w	r3, r3, #8
 8002894:	81a3      	strh	r3, [r4, #12]
 8002896:	6923      	ldr	r3, [r4, #16]
 8002898:	b94b      	cbnz	r3, 80028ae <__swsetup_r+0x9a>
 800289a:	89a3      	ldrh	r3, [r4, #12]
 800289c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a4:	d003      	beq.n	80028ae <__swsetup_r+0x9a>
 80028a6:	4621      	mov	r1, r4
 80028a8:	4630      	mov	r0, r6
 80028aa:	f000 f9fd 	bl	8002ca8 <__smakebuf_r>
 80028ae:	89a0      	ldrh	r0, [r4, #12]
 80028b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028b4:	f010 0301 	ands.w	r3, r0, #1
 80028b8:	d00a      	beq.n	80028d0 <__swsetup_r+0xbc>
 80028ba:	2300      	movs	r3, #0
 80028bc:	60a3      	str	r3, [r4, #8]
 80028be:	6963      	ldr	r3, [r4, #20]
 80028c0:	425b      	negs	r3, r3
 80028c2:	61a3      	str	r3, [r4, #24]
 80028c4:	6923      	ldr	r3, [r4, #16]
 80028c6:	b943      	cbnz	r3, 80028da <__swsetup_r+0xc6>
 80028c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80028cc:	d1ba      	bne.n	8002844 <__swsetup_r+0x30>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	0781      	lsls	r1, r0, #30
 80028d2:	bf58      	it	pl
 80028d4:	6963      	ldrpl	r3, [r4, #20]
 80028d6:	60a3      	str	r3, [r4, #8]
 80028d8:	e7f4      	b.n	80028c4 <__swsetup_r+0xb0>
 80028da:	2000      	movs	r0, #0
 80028dc:	e7f7      	b.n	80028ce <__swsetup_r+0xba>
 80028de:	bf00      	nop
 80028e0:	2000000c 	.word	0x2000000c
 80028e4:	08002fb4 	.word	0x08002fb4
 80028e8:	08002fd4 	.word	0x08002fd4
 80028ec:	08002f94 	.word	0x08002f94

080028f0 <__sflush_r>:
 80028f0:	898a      	ldrh	r2, [r1, #12]
 80028f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f4:	4605      	mov	r5, r0
 80028f6:	0710      	lsls	r0, r2, #28
 80028f8:	460c      	mov	r4, r1
 80028fa:	d457      	bmi.n	80029ac <__sflush_r+0xbc>
 80028fc:	684b      	ldr	r3, [r1, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	dc04      	bgt.n	800290c <__sflush_r+0x1c>
 8002902:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	dc01      	bgt.n	800290c <__sflush_r+0x1c>
 8002908:	2000      	movs	r0, #0
 800290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800290c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800290e:	2e00      	cmp	r6, #0
 8002910:	d0fa      	beq.n	8002908 <__sflush_r+0x18>
 8002912:	2300      	movs	r3, #0
 8002914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002918:	682f      	ldr	r7, [r5, #0]
 800291a:	602b      	str	r3, [r5, #0]
 800291c:	d032      	beq.n	8002984 <__sflush_r+0x94>
 800291e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002920:	89a3      	ldrh	r3, [r4, #12]
 8002922:	075a      	lsls	r2, r3, #29
 8002924:	d505      	bpl.n	8002932 <__sflush_r+0x42>
 8002926:	6863      	ldr	r3, [r4, #4]
 8002928:	1ac0      	subs	r0, r0, r3
 800292a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800292c:	b10b      	cbz	r3, 8002932 <__sflush_r+0x42>
 800292e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002930:	1ac0      	subs	r0, r0, r3
 8002932:	2300      	movs	r3, #0
 8002934:	4602      	mov	r2, r0
 8002936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002938:	4628      	mov	r0, r5
 800293a:	6a21      	ldr	r1, [r4, #32]
 800293c:	47b0      	blx	r6
 800293e:	1c43      	adds	r3, r0, #1
 8002940:	89a3      	ldrh	r3, [r4, #12]
 8002942:	d106      	bne.n	8002952 <__sflush_r+0x62>
 8002944:	6829      	ldr	r1, [r5, #0]
 8002946:	291d      	cmp	r1, #29
 8002948:	d82c      	bhi.n	80029a4 <__sflush_r+0xb4>
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <__sflush_r+0x100>)
 800294c:	40ca      	lsrs	r2, r1
 800294e:	07d6      	lsls	r6, r2, #31
 8002950:	d528      	bpl.n	80029a4 <__sflush_r+0xb4>
 8002952:	2200      	movs	r2, #0
 8002954:	6062      	str	r2, [r4, #4]
 8002956:	6922      	ldr	r2, [r4, #16]
 8002958:	04d9      	lsls	r1, r3, #19
 800295a:	6022      	str	r2, [r4, #0]
 800295c:	d504      	bpl.n	8002968 <__sflush_r+0x78>
 800295e:	1c42      	adds	r2, r0, #1
 8002960:	d101      	bne.n	8002966 <__sflush_r+0x76>
 8002962:	682b      	ldr	r3, [r5, #0]
 8002964:	b903      	cbnz	r3, 8002968 <__sflush_r+0x78>
 8002966:	6560      	str	r0, [r4, #84]	; 0x54
 8002968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800296a:	602f      	str	r7, [r5, #0]
 800296c:	2900      	cmp	r1, #0
 800296e:	d0cb      	beq.n	8002908 <__sflush_r+0x18>
 8002970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002974:	4299      	cmp	r1, r3
 8002976:	d002      	beq.n	800297e <__sflush_r+0x8e>
 8002978:	4628      	mov	r0, r5
 800297a:	f7ff fd97 	bl	80024ac <_free_r>
 800297e:	2000      	movs	r0, #0
 8002980:	6360      	str	r0, [r4, #52]	; 0x34
 8002982:	e7c2      	b.n	800290a <__sflush_r+0x1a>
 8002984:	6a21      	ldr	r1, [r4, #32]
 8002986:	2301      	movs	r3, #1
 8002988:	4628      	mov	r0, r5
 800298a:	47b0      	blx	r6
 800298c:	1c41      	adds	r1, r0, #1
 800298e:	d1c7      	bne.n	8002920 <__sflush_r+0x30>
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0c4      	beq.n	8002920 <__sflush_r+0x30>
 8002996:	2b1d      	cmp	r3, #29
 8002998:	d001      	beq.n	800299e <__sflush_r+0xae>
 800299a:	2b16      	cmp	r3, #22
 800299c:	d101      	bne.n	80029a2 <__sflush_r+0xb2>
 800299e:	602f      	str	r7, [r5, #0]
 80029a0:	e7b2      	b.n	8002908 <__sflush_r+0x18>
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029a8:	81a3      	strh	r3, [r4, #12]
 80029aa:	e7ae      	b.n	800290a <__sflush_r+0x1a>
 80029ac:	690f      	ldr	r7, [r1, #16]
 80029ae:	2f00      	cmp	r7, #0
 80029b0:	d0aa      	beq.n	8002908 <__sflush_r+0x18>
 80029b2:	0793      	lsls	r3, r2, #30
 80029b4:	bf18      	it	ne
 80029b6:	2300      	movne	r3, #0
 80029b8:	680e      	ldr	r6, [r1, #0]
 80029ba:	bf08      	it	eq
 80029bc:	694b      	ldreq	r3, [r1, #20]
 80029be:	1bf6      	subs	r6, r6, r7
 80029c0:	600f      	str	r7, [r1, #0]
 80029c2:	608b      	str	r3, [r1, #8]
 80029c4:	2e00      	cmp	r6, #0
 80029c6:	dd9f      	ble.n	8002908 <__sflush_r+0x18>
 80029c8:	4633      	mov	r3, r6
 80029ca:	463a      	mov	r2, r7
 80029cc:	4628      	mov	r0, r5
 80029ce:	6a21      	ldr	r1, [r4, #32]
 80029d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80029d4:	47e0      	blx	ip
 80029d6:	2800      	cmp	r0, #0
 80029d8:	dc06      	bgt.n	80029e8 <__sflush_r+0xf8>
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e4:	81a3      	strh	r3, [r4, #12]
 80029e6:	e790      	b.n	800290a <__sflush_r+0x1a>
 80029e8:	4407      	add	r7, r0
 80029ea:	1a36      	subs	r6, r6, r0
 80029ec:	e7ea      	b.n	80029c4 <__sflush_r+0xd4>
 80029ee:	bf00      	nop
 80029f0:	20400001 	.word	0x20400001

080029f4 <_fflush_r>:
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	690b      	ldr	r3, [r1, #16]
 80029f8:	4605      	mov	r5, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	b913      	cbnz	r3, 8002a04 <_fflush_r+0x10>
 80029fe:	2500      	movs	r5, #0
 8002a00:	4628      	mov	r0, r5
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
 8002a04:	b118      	cbz	r0, 8002a0e <_fflush_r+0x1a>
 8002a06:	6983      	ldr	r3, [r0, #24]
 8002a08:	b90b      	cbnz	r3, 8002a0e <_fflush_r+0x1a>
 8002a0a:	f000 f887 	bl	8002b1c <__sinit>
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <_fflush_r+0x6c>)
 8002a10:	429c      	cmp	r4, r3
 8002a12:	d11b      	bne.n	8002a4c <_fflush_r+0x58>
 8002a14:	686c      	ldr	r4, [r5, #4]
 8002a16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ef      	beq.n	80029fe <_fflush_r+0xa>
 8002a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a20:	07d0      	lsls	r0, r2, #31
 8002a22:	d404      	bmi.n	8002a2e <_fflush_r+0x3a>
 8002a24:	0599      	lsls	r1, r3, #22
 8002a26:	d402      	bmi.n	8002a2e <_fflush_r+0x3a>
 8002a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a2a:	f000 f915 	bl	8002c58 <__retarget_lock_acquire_recursive>
 8002a2e:	4628      	mov	r0, r5
 8002a30:	4621      	mov	r1, r4
 8002a32:	f7ff ff5d 	bl	80028f0 <__sflush_r>
 8002a36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a38:	4605      	mov	r5, r0
 8002a3a:	07da      	lsls	r2, r3, #31
 8002a3c:	d4e0      	bmi.n	8002a00 <_fflush_r+0xc>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	059b      	lsls	r3, r3, #22
 8002a42:	d4dd      	bmi.n	8002a00 <_fflush_r+0xc>
 8002a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a46:	f000 f908 	bl	8002c5a <__retarget_lock_release_recursive>
 8002a4a:	e7d9      	b.n	8002a00 <_fflush_r+0xc>
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <_fflush_r+0x70>)
 8002a4e:	429c      	cmp	r4, r3
 8002a50:	d101      	bne.n	8002a56 <_fflush_r+0x62>
 8002a52:	68ac      	ldr	r4, [r5, #8]
 8002a54:	e7df      	b.n	8002a16 <_fflush_r+0x22>
 8002a56:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <_fflush_r+0x74>)
 8002a58:	429c      	cmp	r4, r3
 8002a5a:	bf08      	it	eq
 8002a5c:	68ec      	ldreq	r4, [r5, #12]
 8002a5e:	e7da      	b.n	8002a16 <_fflush_r+0x22>
 8002a60:	08002fb4 	.word	0x08002fb4
 8002a64:	08002fd4 	.word	0x08002fd4
 8002a68:	08002f94 	.word	0x08002f94

08002a6c <std>:
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	b510      	push	{r4, lr}
 8002a70:	4604      	mov	r4, r0
 8002a72:	e9c0 3300 	strd	r3, r3, [r0]
 8002a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a7a:	6083      	str	r3, [r0, #8]
 8002a7c:	8181      	strh	r1, [r0, #12]
 8002a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a80:	81c2      	strh	r2, [r0, #14]
 8002a82:	6183      	str	r3, [r0, #24]
 8002a84:	4619      	mov	r1, r3
 8002a86:	2208      	movs	r2, #8
 8002a88:	305c      	adds	r0, #92	; 0x5c
 8002a8a:	f7ff fd07 	bl	800249c <memset>
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <std+0x38>)
 8002a90:	6224      	str	r4, [r4, #32]
 8002a92:	6263      	str	r3, [r4, #36]	; 0x24
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <std+0x3c>)
 8002a96:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <std+0x40>)
 8002a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <std+0x44>)
 8002a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	bf00      	nop
 8002aa4:	08002d41 	.word	0x08002d41
 8002aa8:	08002d63 	.word	0x08002d63
 8002aac:	08002d9b 	.word	0x08002d9b
 8002ab0:	08002dbf 	.word	0x08002dbf

08002ab4 <_cleanup_r>:
 8002ab4:	4901      	ldr	r1, [pc, #4]	; (8002abc <_cleanup_r+0x8>)
 8002ab6:	f000 b8af 	b.w	8002c18 <_fwalk_reent>
 8002aba:	bf00      	nop
 8002abc:	080029f5 	.word	0x080029f5

08002ac0 <__sfmoreglue>:
 8002ac0:	2268      	movs	r2, #104	; 0x68
 8002ac2:	b570      	push	{r4, r5, r6, lr}
 8002ac4:	1e4d      	subs	r5, r1, #1
 8002ac6:	4355      	muls	r5, r2
 8002ac8:	460e      	mov	r6, r1
 8002aca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ace:	f7ff fd55 	bl	800257c <_malloc_r>
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	b140      	cbz	r0, 8002ae8 <__sfmoreglue+0x28>
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	e9c0 1600 	strd	r1, r6, [r0]
 8002adc:	300c      	adds	r0, #12
 8002ade:	60a0      	str	r0, [r4, #8]
 8002ae0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ae4:	f7ff fcda 	bl	800249c <memset>
 8002ae8:	4620      	mov	r0, r4
 8002aea:	bd70      	pop	{r4, r5, r6, pc}

08002aec <__sfp_lock_acquire>:
 8002aec:	4801      	ldr	r0, [pc, #4]	; (8002af4 <__sfp_lock_acquire+0x8>)
 8002aee:	f000 b8b3 	b.w	8002c58 <__retarget_lock_acquire_recursive>
 8002af2:	bf00      	nop
 8002af4:	20000179 	.word	0x20000179

08002af8 <__sfp_lock_release>:
 8002af8:	4801      	ldr	r0, [pc, #4]	; (8002b00 <__sfp_lock_release+0x8>)
 8002afa:	f000 b8ae 	b.w	8002c5a <__retarget_lock_release_recursive>
 8002afe:	bf00      	nop
 8002b00:	20000179 	.word	0x20000179

08002b04 <__sinit_lock_acquire>:
 8002b04:	4801      	ldr	r0, [pc, #4]	; (8002b0c <__sinit_lock_acquire+0x8>)
 8002b06:	f000 b8a7 	b.w	8002c58 <__retarget_lock_acquire_recursive>
 8002b0a:	bf00      	nop
 8002b0c:	2000017a 	.word	0x2000017a

08002b10 <__sinit_lock_release>:
 8002b10:	4801      	ldr	r0, [pc, #4]	; (8002b18 <__sinit_lock_release+0x8>)
 8002b12:	f000 b8a2 	b.w	8002c5a <__retarget_lock_release_recursive>
 8002b16:	bf00      	nop
 8002b18:	2000017a 	.word	0x2000017a

08002b1c <__sinit>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	4604      	mov	r4, r0
 8002b20:	f7ff fff0 	bl	8002b04 <__sinit_lock_acquire>
 8002b24:	69a3      	ldr	r3, [r4, #24]
 8002b26:	b11b      	cbz	r3, 8002b30 <__sinit+0x14>
 8002b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b2c:	f7ff bff0 	b.w	8002b10 <__sinit_lock_release>
 8002b30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b34:	6523      	str	r3, [r4, #80]	; 0x50
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <__sinit+0x68>)
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <__sinit+0x6c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b3e:	42a3      	cmp	r3, r4
 8002b40:	bf08      	it	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	4620      	mov	r0, r4
 8002b46:	bf08      	it	eq
 8002b48:	61a3      	streq	r3, [r4, #24]
 8002b4a:	f000 f81f 	bl	8002b8c <__sfp>
 8002b4e:	6060      	str	r0, [r4, #4]
 8002b50:	4620      	mov	r0, r4
 8002b52:	f000 f81b 	bl	8002b8c <__sfp>
 8002b56:	60a0      	str	r0, [r4, #8]
 8002b58:	4620      	mov	r0, r4
 8002b5a:	f000 f817 	bl	8002b8c <__sfp>
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2104      	movs	r1, #4
 8002b62:	60e0      	str	r0, [r4, #12]
 8002b64:	6860      	ldr	r0, [r4, #4]
 8002b66:	f7ff ff81 	bl	8002a6c <std>
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	2109      	movs	r1, #9
 8002b6e:	68a0      	ldr	r0, [r4, #8]
 8002b70:	f7ff ff7c 	bl	8002a6c <std>
 8002b74:	2202      	movs	r2, #2
 8002b76:	2112      	movs	r1, #18
 8002b78:	68e0      	ldr	r0, [r4, #12]
 8002b7a:	f7ff ff77 	bl	8002a6c <std>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61a3      	str	r3, [r4, #24]
 8002b82:	e7d1      	b.n	8002b28 <__sinit+0xc>
 8002b84:	08002f90 	.word	0x08002f90
 8002b88:	08002ab5 	.word	0x08002ab5

08002b8c <__sfp>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	4607      	mov	r7, r0
 8002b90:	f7ff ffac 	bl	8002aec <__sfp_lock_acquire>
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <__sfp+0x84>)
 8002b96:	681e      	ldr	r6, [r3, #0]
 8002b98:	69b3      	ldr	r3, [r6, #24]
 8002b9a:	b913      	cbnz	r3, 8002ba2 <__sfp+0x16>
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f7ff ffbd 	bl	8002b1c <__sinit>
 8002ba2:	3648      	adds	r6, #72	; 0x48
 8002ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	d503      	bpl.n	8002bb4 <__sfp+0x28>
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	b30b      	cbz	r3, 8002bf4 <__sfp+0x68>
 8002bb0:	6836      	ldr	r6, [r6, #0]
 8002bb2:	e7f7      	b.n	8002ba4 <__sfp+0x18>
 8002bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bb8:	b9d5      	cbnz	r5, 8002bf0 <__sfp+0x64>
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <__sfp+0x88>)
 8002bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bc0:	60e3      	str	r3, [r4, #12]
 8002bc2:	6665      	str	r5, [r4, #100]	; 0x64
 8002bc4:	f000 f847 	bl	8002c56 <__retarget_lock_init_recursive>
 8002bc8:	f7ff ff96 	bl	8002af8 <__sfp_lock_release>
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4629      	mov	r1, r5
 8002bd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bd8:	6025      	str	r5, [r4, #0]
 8002bda:	61a5      	str	r5, [r4, #24]
 8002bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002be0:	f7ff fc5c 	bl	800249c <memset>
 8002be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bec:	4620      	mov	r0, r4
 8002bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf0:	3468      	adds	r4, #104	; 0x68
 8002bf2:	e7d9      	b.n	8002ba8 <__sfp+0x1c>
 8002bf4:	2104      	movs	r1, #4
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	f7ff ff62 	bl	8002ac0 <__sfmoreglue>
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	6030      	str	r0, [r6, #0]
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d1d5      	bne.n	8002bb0 <__sfp+0x24>
 8002c04:	f7ff ff78 	bl	8002af8 <__sfp_lock_release>
 8002c08:	230c      	movs	r3, #12
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	e7ee      	b.n	8002bec <__sfp+0x60>
 8002c0e:	bf00      	nop
 8002c10:	08002f90 	.word	0x08002f90
 8002c14:	ffff0001 	.word	0xffff0001

08002c18 <_fwalk_reent>:
 8002c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c1c:	4606      	mov	r6, r0
 8002c1e:	4688      	mov	r8, r1
 8002c20:	2700      	movs	r7, #0
 8002c22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c2a:	f1b9 0901 	subs.w	r9, r9, #1
 8002c2e:	d505      	bpl.n	8002c3c <_fwalk_reent+0x24>
 8002c30:	6824      	ldr	r4, [r4, #0]
 8002c32:	2c00      	cmp	r4, #0
 8002c34:	d1f7      	bne.n	8002c26 <_fwalk_reent+0xe>
 8002c36:	4638      	mov	r0, r7
 8002c38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c3c:	89ab      	ldrh	r3, [r5, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d907      	bls.n	8002c52 <_fwalk_reent+0x3a>
 8002c42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c46:	3301      	adds	r3, #1
 8002c48:	d003      	beq.n	8002c52 <_fwalk_reent+0x3a>
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	47c0      	blx	r8
 8002c50:	4307      	orrs	r7, r0
 8002c52:	3568      	adds	r5, #104	; 0x68
 8002c54:	e7e9      	b.n	8002c2a <_fwalk_reent+0x12>

08002c56 <__retarget_lock_init_recursive>:
 8002c56:	4770      	bx	lr

08002c58 <__retarget_lock_acquire_recursive>:
 8002c58:	4770      	bx	lr

08002c5a <__retarget_lock_release_recursive>:
 8002c5a:	4770      	bx	lr

08002c5c <__swhatbuf_r>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	460e      	mov	r6, r1
 8002c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c64:	4614      	mov	r4, r2
 8002c66:	2900      	cmp	r1, #0
 8002c68:	461d      	mov	r5, r3
 8002c6a:	b096      	sub	sp, #88	; 0x58
 8002c6c:	da08      	bge.n	8002c80 <__swhatbuf_r+0x24>
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002c74:	602a      	str	r2, [r5, #0]
 8002c76:	061a      	lsls	r2, r3, #24
 8002c78:	d410      	bmi.n	8002c9c <__swhatbuf_r+0x40>
 8002c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7e:	e00e      	b.n	8002c9e <__swhatbuf_r+0x42>
 8002c80:	466a      	mov	r2, sp
 8002c82:	f000 f8c3 	bl	8002e0c <_fstat_r>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	dbf1      	blt.n	8002c6e <__swhatbuf_r+0x12>
 8002c8a:	9a01      	ldr	r2, [sp, #4]
 8002c8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c94:	425a      	negs	r2, r3
 8002c96:	415a      	adcs	r2, r3
 8002c98:	602a      	str	r2, [r5, #0]
 8002c9a:	e7ee      	b.n	8002c7a <__swhatbuf_r+0x1e>
 8002c9c:	2340      	movs	r3, #64	; 0x40
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	6023      	str	r3, [r4, #0]
 8002ca2:	b016      	add	sp, #88	; 0x58
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ca8 <__smakebuf_r>:
 8002ca8:	898b      	ldrh	r3, [r1, #12]
 8002caa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cac:	079d      	lsls	r5, r3, #30
 8002cae:	4606      	mov	r6, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	d507      	bpl.n	8002cc4 <__smakebuf_r+0x1c>
 8002cb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	6123      	str	r3, [r4, #16]
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	6163      	str	r3, [r4, #20]
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd70      	pop	{r4, r5, r6, pc}
 8002cc4:	466a      	mov	r2, sp
 8002cc6:	ab01      	add	r3, sp, #4
 8002cc8:	f7ff ffc8 	bl	8002c5c <__swhatbuf_r>
 8002ccc:	9900      	ldr	r1, [sp, #0]
 8002cce:	4605      	mov	r5, r0
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff fc53 	bl	800257c <_malloc_r>
 8002cd6:	b948      	cbnz	r0, 8002cec <__smakebuf_r+0x44>
 8002cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cdc:	059a      	lsls	r2, r3, #22
 8002cde:	d4ef      	bmi.n	8002cc0 <__smakebuf_r+0x18>
 8002ce0:	f023 0303 	bic.w	r3, r3, #3
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	81a3      	strh	r3, [r4, #12]
 8002cea:	e7e3      	b.n	8002cb4 <__smakebuf_r+0xc>
 8002cec:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <__smakebuf_r+0x7c>)
 8002cee:	62b3      	str	r3, [r6, #40]	; 0x28
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	6020      	str	r0, [r4, #0]
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf8:	81a3      	strh	r3, [r4, #12]
 8002cfa:	9b00      	ldr	r3, [sp, #0]
 8002cfc:	6120      	str	r0, [r4, #16]
 8002cfe:	6163      	str	r3, [r4, #20]
 8002d00:	9b01      	ldr	r3, [sp, #4]
 8002d02:	b15b      	cbz	r3, 8002d1c <__smakebuf_r+0x74>
 8002d04:	4630      	mov	r0, r6
 8002d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d0a:	f000 f891 	bl	8002e30 <_isatty_r>
 8002d0e:	b128      	cbz	r0, 8002d1c <__smakebuf_r+0x74>
 8002d10:	89a3      	ldrh	r3, [r4, #12]
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	81a3      	strh	r3, [r4, #12]
 8002d1c:	89a0      	ldrh	r0, [r4, #12]
 8002d1e:	4305      	orrs	r5, r0
 8002d20:	81a5      	strh	r5, [r4, #12]
 8002d22:	e7cd      	b.n	8002cc0 <__smakebuf_r+0x18>
 8002d24:	08002ab5 	.word	0x08002ab5

08002d28 <__malloc_lock>:
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <__malloc_lock+0x8>)
 8002d2a:	f7ff bf95 	b.w	8002c58 <__retarget_lock_acquire_recursive>
 8002d2e:	bf00      	nop
 8002d30:	20000178 	.word	0x20000178

08002d34 <__malloc_unlock>:
 8002d34:	4801      	ldr	r0, [pc, #4]	; (8002d3c <__malloc_unlock+0x8>)
 8002d36:	f7ff bf90 	b.w	8002c5a <__retarget_lock_release_recursive>
 8002d3a:	bf00      	nop
 8002d3c:	20000178 	.word	0x20000178

08002d40 <__sread>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	460c      	mov	r4, r1
 8002d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d48:	f000 f894 	bl	8002e74 <_read_r>
 8002d4c:	2800      	cmp	r0, #0
 8002d4e:	bfab      	itete	ge
 8002d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d52:	89a3      	ldrhlt	r3, [r4, #12]
 8002d54:	181b      	addge	r3, r3, r0
 8002d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d5a:	bfac      	ite	ge
 8002d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d5e:	81a3      	strhlt	r3, [r4, #12]
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <__swrite>:
 8002d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d66:	461f      	mov	r7, r3
 8002d68:	898b      	ldrh	r3, [r1, #12]
 8002d6a:	4605      	mov	r5, r0
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	460c      	mov	r4, r1
 8002d70:	4616      	mov	r6, r2
 8002d72:	d505      	bpl.n	8002d80 <__swrite+0x1e>
 8002d74:	2302      	movs	r3, #2
 8002d76:	2200      	movs	r2, #0
 8002d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7c:	f000 f868 	bl	8002e50 <_lseek_r>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	4632      	mov	r2, r6
 8002d84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d88:	81a3      	strh	r3, [r4, #12]
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d96:	f000 b817 	b.w	8002dc8 <_write_r>

08002d9a <__sseek>:
 8002d9a:	b510      	push	{r4, lr}
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da2:	f000 f855 	bl	8002e50 <_lseek_r>
 8002da6:	1c43      	adds	r3, r0, #1
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	bf15      	itete	ne
 8002dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8002dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002db6:	81a3      	strheq	r3, [r4, #12]
 8002db8:	bf18      	it	ne
 8002dba:	81a3      	strhne	r3, [r4, #12]
 8002dbc:	bd10      	pop	{r4, pc}

08002dbe <__sclose>:
 8002dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dc2:	f000 b813 	b.w	8002dec <_close_r>
	...

08002dc8 <_write_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4604      	mov	r4, r0
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4d05      	ldr	r5, [pc, #20]	; (8002de8 <_write_r+0x20>)
 8002dd4:	602a      	str	r2, [r5, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7fd fa8e 	bl	80002f8 <_write>
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d102      	bne.n	8002de6 <_write_r+0x1e>
 8002de0:	682b      	ldr	r3, [r5, #0]
 8002de2:	b103      	cbz	r3, 8002de6 <_write_r+0x1e>
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
 8002de8:	2000017c 	.word	0x2000017c

08002dec <_close_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	2300      	movs	r3, #0
 8002df0:	4d05      	ldr	r5, [pc, #20]	; (8002e08 <_close_r+0x1c>)
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	f7fd fba1 	bl	800053e <_close>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	d102      	bne.n	8002e06 <_close_r+0x1a>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	b103      	cbz	r3, 8002e06 <_close_r+0x1a>
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	2000017c 	.word	0x2000017c

08002e0c <_fstat_r>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	2300      	movs	r3, #0
 8002e10:	4d06      	ldr	r5, [pc, #24]	; (8002e2c <_fstat_r+0x20>)
 8002e12:	4604      	mov	r4, r0
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	f7fd fb9b 	bl	8000554 <_fstat>
 8002e1e:	1c43      	adds	r3, r0, #1
 8002e20:	d102      	bne.n	8002e28 <_fstat_r+0x1c>
 8002e22:	682b      	ldr	r3, [r5, #0]
 8002e24:	b103      	cbz	r3, 8002e28 <_fstat_r+0x1c>
 8002e26:	6023      	str	r3, [r4, #0]
 8002e28:	bd38      	pop	{r3, r4, r5, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000017c 	.word	0x2000017c

08002e30 <_isatty_r>:
 8002e30:	b538      	push	{r3, r4, r5, lr}
 8002e32:	2300      	movs	r3, #0
 8002e34:	4d05      	ldr	r5, [pc, #20]	; (8002e4c <_isatty_r+0x1c>)
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	602b      	str	r3, [r5, #0]
 8002e3c:	f7fd fb99 	bl	8000572 <_isatty>
 8002e40:	1c43      	adds	r3, r0, #1
 8002e42:	d102      	bne.n	8002e4a <_isatty_r+0x1a>
 8002e44:	682b      	ldr	r3, [r5, #0]
 8002e46:	b103      	cbz	r3, 8002e4a <_isatty_r+0x1a>
 8002e48:	6023      	str	r3, [r4, #0]
 8002e4a:	bd38      	pop	{r3, r4, r5, pc}
 8002e4c:	2000017c 	.word	0x2000017c

08002e50 <_lseek_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4604      	mov	r4, r0
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	2200      	movs	r2, #0
 8002e5a:	4d05      	ldr	r5, [pc, #20]	; (8002e70 <_lseek_r+0x20>)
 8002e5c:	602a      	str	r2, [r5, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7fd fb91 	bl	8000586 <_lseek>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_lseek_r+0x1e>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_lseek_r+0x1e>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	2000017c 	.word	0x2000017c

08002e74 <_read_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4d05      	ldr	r5, [pc, #20]	; (8002e94 <_read_r+0x20>)
 8002e80:	602a      	str	r2, [r5, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f7fd fb3e 	bl	8000504 <_read>
 8002e88:	1c43      	adds	r3, r0, #1
 8002e8a:	d102      	bne.n	8002e92 <_read_r+0x1e>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	b103      	cbz	r3, 8002e92 <_read_r+0x1e>
 8002e90:	6023      	str	r3, [r4, #0]
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
 8002e94:	2000017c 	.word	0x2000017c

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	bf00      	nop
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
