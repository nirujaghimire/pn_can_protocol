
pn_can_protocol_2_0_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003804  08003804  00020470  2**0
                  CONTENTS
  4 .ARM          00000000  08003804  08003804  00020470  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003804  08003804  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0800380c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000470  08003c7c  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08003c7c  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009de3  00000000  00000000  00020499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c45  00000000  00000000  0002a27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001831d  00000000  00000000  0002cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a603  00000000  00000000  000452b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862a9  00000000  00000000  0004f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5b61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a14  00000000  00000000  000d5bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000470 	.word	0x20000470
 8000128:	00000000 	.word	0x00000000
 800012c:	080036a0 	.word	0x080036a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000474 	.word	0x20000474
 8000148:	080036a0 	.word	0x080036a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa86 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84a 	bl	80001f4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f87e 	bl	8000260 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void runTx();
  runTx();
 8000164:	f002 fa24 	bl	80025b0 <runTx>
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f002 faf5 	bl	8002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018c:	2301      	movs	r3, #1
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000194:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000196:	2300      	movs	r3, #0
 8000198:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fa70 	bl	8001698 <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001be:	f000 f8b1 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2102      	movs	r1, #2
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fcdd 	bl	8001b9c <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e8:	f000 f89c 	bl	8000324 <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <MX_CAN_Init+0x64>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <MX_CAN_Init+0x68>)
 80001fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <MX_CAN_Init+0x64>)
 8000200:	2208      	movs	r2, #8
 8000202:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <MX_CAN_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <MX_CAN_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_CAN_Init+0x64>)
 8000212:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000216:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_CAN_Init+0x64>)
 800021a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800021e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <MX_CAN_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_CAN_Init+0x64>)
 8000228:	2201      	movs	r2, #1
 800022a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <MX_CAN_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_CAN_Init+0x64>)
 8000234:	2201      	movs	r2, #1
 8000236:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <MX_CAN_Init+0x64>)
 8000246:	f000 fa6d 	bl	8000724 <HAL_CAN_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000250:	f000 f868 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	2000048c 	.word	0x2000048c
 800025c:	40006400 	.word	0x40006400

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 fe0e 	bl	8001eb8 <HAL_HalfDuplex_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f83f 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200004b4 	.word	0x200004b4
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0320 	and.w	r3, r3, #32
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *data, int len) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	b29a      	uxth	r2, r3
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <_write+0x28>)
 8000310:	f001 fe2a 	bl	8001f68 <HAL_UART_Transmit>
	return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200004b4 	.word	0x200004b4

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <HAL_MspInit+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <HAL_MspInit+0x40>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <HAL_MspInit+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <HAL_MspInit+0x40>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a07      	ldr	r2, [pc, #28]	; (8000370 <HAL_MspInit+0x40>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_MspInit+0x40>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a20      	ldr	r2, [pc, #128]	; (8000410 <HAL_CAN_MspInit+0x9c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d139      	bne.n	8000408 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 800039a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039e:	61d3      	str	r3, [r2, #28]
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a18      	ldr	r2, [pc, #96]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003da:	f000 ffd9 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e4:	2302      	movs	r3, #2
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003f4:	f000 ffcc 	bl	8001390 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	2014      	movs	r0, #20
 80003fe:	f000 ff90 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000402:	2014      	movs	r0, #20
 8000404:	f000 ffa9 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40006400 	.word	0x40006400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <HAL_UART_MspInit+0x74>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d124      	bne.n	8000486 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x78>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_UART_MspInit+0x78>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_UART_MspInit+0x78>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800046c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000472:	2312      	movs	r3, #18
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	2303      	movs	r3, #3
 8000478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_UART_MspInit+0x7c>)
 8000482:	f000 ff85 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40013800 	.word	0x40013800
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f903 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004f2:	f000 fc13 	bl	8000d1c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000048c 	.word	0x2000048c

08000500 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	e00a      	b.n	8000528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000512:	f3af 8000 	nop.w
 8000516:	4601      	mov	r1, r0
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	60ba      	str	r2, [r7, #8]
 800051e:	b2ca      	uxtb	r2, r1
 8000520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf0      	blt.n	8000512 <_read+0x12>
  }

  return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_close>:
  }
  return len;
}

int _close(int file)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000560:	605a      	str	r2, [r3, #4]
  return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <_isatty>:

int _isatty(int file)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	60f8      	str	r0, [r7, #12]
 800058a:	60b9      	str	r1, [r7, #8]
 800058c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
	...

0800059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <_sbrk+0x5c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <_sbrk+0x60>)
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x64>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_sbrk+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d207      	bcs.n	80005dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005cc:	f002 f8a2 	bl	8002714 <__errno>
 80005d0:	4603      	mov	r3, r0
 80005d2:	220c      	movs	r2, #12
 80005d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e009      	b.n	80005f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <_sbrk+0x64>)
 80005ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20005000 	.word	0x20005000
 80005fc:	00000400 	.word	0x00000400
 8000600:	200004fc 	.word	0x200004fc
 8000604:	20000580 	.word	0x20000580

08000608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr

08000614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff fff8 	bl	8000608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061a:	490c      	ldr	r1, [pc, #48]	; (800064c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800061c:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a09      	ldr	r2, [pc, #36]	; (8000654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000630:	4c09      	ldr	r4, [pc, #36]	; (8000658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f002 f86f 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fd83 	bl	800014c <main>
  bx lr
 8000646:	4770      	bx	lr
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8000650:	0800380c 	.word	0x0800380c
  ldr r2, =_sbss
 8000654:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8000658:	2000057c 	.word	0x2000057c

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 fe4b 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	2000      	movs	r0, #0
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff fe58 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fe63 	bl	8001376 <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f000 fe2b 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <HAL_IncTick+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000008 	.word	0x20000008
 800070c:	20000500 	.word	0x20000500

08000710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000500 	.word	0x20000500

08000724 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e0ed      	b.n	8000912 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d102      	bne.n	8000748 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f7ff fe16 	bl	8000374 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0201 	orr.w	r2, r2, #1
 8000756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000758:	f7ff ffda 	bl	8000710 <HAL_GetTick>
 800075c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800075e:	e012      	b.n	8000786 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000760:	f7ff ffd6 	bl	8000710 <HAL_GetTick>
 8000764:	4602      	mov	r2, r0
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	2b0a      	cmp	r3, #10
 800076c:	d90b      	bls.n	8000786 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2205      	movs	r2, #5
 800077e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e0c5      	b.n	8000912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0e5      	beq.n	8000760 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f022 0202 	bic.w	r2, r2, #2
 80007a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007a4:	f7ff ffb4 	bl	8000710 <HAL_GetTick>
 80007a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007aa:	e012      	b.n	80007d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ac:	f7ff ffb0 	bl	8000710 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d90b      	bls.n	80007d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2205      	movs	r2, #5
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e09f      	b.n	8000912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1e5      	bne.n	80007ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7e1b      	ldrb	r3, [r3, #24]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d108      	bne.n	80007fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	e007      	b.n	800080a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7e5b      	ldrb	r3, [r3, #25]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d108      	bne.n	8000824 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e007      	b.n	8000834 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000832:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	7e9b      	ldrb	r3, [r3, #26]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d108      	bne.n	800084e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 0220 	orr.w	r2, r2, #32
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	e007      	b.n	800085e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f022 0220 	bic.w	r2, r2, #32
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7edb      	ldrb	r3, [r3, #27]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d108      	bne.n	8000878 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 0210 	bic.w	r2, r2, #16
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	e007      	b.n	8000888 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f042 0210 	orr.w	r2, r2, #16
 8000886:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	7f1b      	ldrb	r3, [r3, #28]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d108      	bne.n	80008a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f042 0208 	orr.w	r2, r2, #8
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	e007      	b.n	80008b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f022 0208 	bic.w	r2, r2, #8
 80008b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	7f5b      	ldrb	r3, [r3, #29]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d108      	bne.n	80008cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f042 0204 	orr.w	r2, r2, #4
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e007      	b.n	80008dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f022 0204 	bic.w	r2, r2, #4
 80008da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	431a      	orrs	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	ea42 0103 	orr.w	r1, r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	1e5a      	subs	r2, r3, #1
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	430a      	orrs	r2, r1
 8000900:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	3710      	adds	r7, #16
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800091a:	b480      	push	{r7}
 800091c:	b087      	sub	sp, #28
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000930:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000932:	7cfb      	ldrb	r3, [r7, #19]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d003      	beq.n	8000940 <HAL_CAN_ConfigFilter+0x26>
 8000938:	7cfb      	ldrb	r3, [r7, #19]
 800093a:	2b02      	cmp	r3, #2
 800093c:	f040 80aa 	bne.w	8000a94 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000946:	f043 0201 	orr.w	r2, r3, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f003 031f 	and.w	r3, r3, #31
 8000958:	2201      	movs	r2, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d123      	bne.n	80009c2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	43db      	mvns	r3, r3
 8000984:	401a      	ands	r2, r3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800099c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3248      	adds	r2, #72	; 0x48
 80009a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009b8:	6979      	ldr	r1, [r7, #20]
 80009ba:	3348      	adds	r3, #72	; 0x48
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d122      	bne.n	8000a10 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	431a      	orrs	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3248      	adds	r2, #72	; 0x48
 80009f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a06:	6979      	ldr	r1, [r7, #20]
 8000a08:	3348      	adds	r3, #72	; 0x48
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d109      	bne.n	8000a2c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a2a:	e007      	b.n	8000a3c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	431a      	orrs	r2, r3
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d109      	bne.n	8000a58 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a56:	e007      	b.n	8000a68 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	431a      	orrs	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d107      	bne.n	8000a80 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a86:	f023 0201 	bic.w	r2, r3, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e006      	b.n	8000aa2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
  }
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d12e      	bne.n	8000b1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0201 	bic.w	r2, r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ad8:	f7ff fe1a 	bl	8000710 <HAL_GetTick>
 8000adc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ade:	e012      	b.n	8000b06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ae0:	f7ff fe16 	bl	8000710 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d90b      	bls.n	8000b06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2205      	movs	r2, #5
 8000afe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e012      	b.n	8000b2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1e5      	bne.n	8000ae0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e006      	b.n	8000b2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
  }
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b52:	7ffb      	ldrb	r3, [r7, #31]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d003      	beq.n	8000b60 <HAL_CAN_AddTxMessage+0x2c>
 8000b58:	7ffb      	ldrb	r3, [r7, #31]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	f040 80ad 	bne.w	8000cba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10a      	bne.n	8000b80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d105      	bne.n	8000b80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 8095 	beq.w	8000caa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	0e1b      	lsrs	r3, r3, #24
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d10d      	bne.n	8000bb8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ba6:	68f9      	ldr	r1, [r7, #12]
 8000ba8:	6809      	ldr	r1, [r1, #0]
 8000baa:	431a      	orrs	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3318      	adds	r3, #24
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	440b      	add	r3, r1
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	e00f      	b.n	8000bd8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bc2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bc8:	68f9      	ldr	r1, [r7, #12]
 8000bca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000bcc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3318      	adds	r3, #24
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	440b      	add	r3, r1
 8000bd6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6819      	ldr	r1, [r3, #0]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3318      	adds	r3, #24
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	440b      	add	r3, r1
 8000be8:	3304      	adds	r3, #4
 8000bea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	7d1b      	ldrb	r3, [r3, #20]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d111      	bne.n	8000c18 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	4413      	add	r3, r2
 8000c00:	3304      	adds	r3, #4
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	6811      	ldr	r1, [r2, #0]
 8000c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3318      	adds	r3, #24
 8000c10:	011b      	lsls	r3, r3, #4
 8000c12:	440b      	add	r3, r1
 8000c14:	3304      	adds	r3, #4
 8000c16:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3307      	adds	r3, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	061a      	lsls	r2, r3, #24
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3306      	adds	r3, #6
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	041b      	lsls	r3, r3, #16
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3305      	adds	r3, #5
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	021b      	lsls	r3, r3, #8
 8000c32:	4313      	orrs	r3, r2
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	3204      	adds	r2, #4
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	6811      	ldr	r1, [r2, #0]
 8000c40:	ea43 0200 	orr.w	r2, r3, r0
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	440b      	add	r3, r1
 8000c4a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3303      	adds	r3, #3
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	061a      	lsls	r2, r3, #24
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	041b      	lsls	r3, r3, #16
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3301      	adds	r3, #1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	4610      	mov	r0, r2
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	6811      	ldr	r1, [r2, #0]
 8000c76:	ea43 0200 	orr.w	r2, r3, r0
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	440b      	add	r3, r1
 8000c80:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000c84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3318      	adds	r3, #24
 8000c8e:	011b      	lsls	r3, r3, #4
 8000c90:	4413      	add	r3, r2
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68fa      	ldr	r2, [r7, #12]
 8000c96:	6811      	ldr	r1, [r2, #0]
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3318      	adds	r3, #24
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	440b      	add	r3, r1
 8000ca4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e00e      	b.n	8000cc8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e006      	b.n	8000cc8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
  }
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3724      	adds	r7, #36	; 0x24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d002      	beq.n	8000cf0 <HAL_CAN_ActivateNotification+0x1e>
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d109      	bne.n	8000d04 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6959      	ldr	r1, [r3, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e006      	b.n	8000d12 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
  }
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d07c      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d023      	beq.n	8000db4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2201      	movs	r2, #1
 8000d72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f983 	bl	800108a <HAL_CAN_TxMailbox0CompleteCallback>
 8000d84:	e016      	b.n	8000db4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	f003 0304 	and.w	r3, r3, #4
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
 8000d98:	e00c      	b.n	8000db4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
 8000dac:	e002      	b.n	8000db4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f986 	bl	80010c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d024      	beq.n	8000e08 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 f962 	bl	800109c <HAL_CAN_TxMailbox1CompleteCallback>
 8000dd8:	e016      	b.n	8000e08 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
 8000dec:	e00c      	b.n	8000e08 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d004      	beq.n	8000e02 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8000e00:	e002      	b.n	8000e08 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f965 	bl	80010d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d024      	beq.n	8000e5c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 f941 	bl	80010ae <HAL_CAN_TxMailbox2CompleteCallback>
 8000e2c:	e016      	b.n	8000e5c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d004      	beq.n	8000e42 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e40:	e00c      	b.n	8000e5c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d004      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
 8000e54:	e002      	b.n	8000e5c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f944 	bl	80010e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00c      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000e80:	6a3b      	ldr	r3, [r7, #32]
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d006      	beq.n	8000ea2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2208      	movs	r2, #8
 8000e9a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f933 	bl	8001108 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d009      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f91b 	bl	80010f6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	f003 0320 	and.w	r3, r3, #32
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2208      	movs	r2, #8
 8000efe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f913 	bl	800112c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f8fb 	bl	800111a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d006      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 f8fc 	bl	800113e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2208      	movs	r2, #8
 8000f60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f8f4 	bl	8001150 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d07b      	beq.n	800106a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d072      	beq.n	8001062 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000fb4:	6a3b      	ldr	r3, [r7, #32]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d008      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d043      	beq.n	8001062 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d03e      	beq.n	8001062 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000fea:	2b60      	cmp	r3, #96	; 0x60
 8000fec:	d02b      	beq.n	8001046 <HAL_CAN_IRQHandler+0x32a>
 8000fee:	2b60      	cmp	r3, #96	; 0x60
 8000ff0:	d82e      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 8000ff2:	2b50      	cmp	r3, #80	; 0x50
 8000ff4:	d022      	beq.n	800103c <HAL_CAN_IRQHandler+0x320>
 8000ff6:	2b50      	cmp	r3, #80	; 0x50
 8000ff8:	d82a      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 8000ffa:	2b40      	cmp	r3, #64	; 0x40
 8000ffc:	d019      	beq.n	8001032 <HAL_CAN_IRQHandler+0x316>
 8000ffe:	2b40      	cmp	r3, #64	; 0x40
 8001000:	d826      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 8001002:	2b30      	cmp	r3, #48	; 0x30
 8001004:	d010      	beq.n	8001028 <HAL_CAN_IRQHandler+0x30c>
 8001006:	2b30      	cmp	r3, #48	; 0x30
 8001008:	d822      	bhi.n	8001050 <HAL_CAN_IRQHandler+0x334>
 800100a:	2b10      	cmp	r3, #16
 800100c:	d002      	beq.n	8001014 <HAL_CAN_IRQHandler+0x2f8>
 800100e:	2b20      	cmp	r3, #32
 8001010:	d005      	beq.n	800101e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001012:	e01d      	b.n	8001050 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800101c:	e019      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f043 0310 	orr.w	r3, r3, #16
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001026:	e014      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	f043 0320 	orr.w	r3, r3, #32
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001030:	e00f      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800103a:	e00a      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001044:	e005      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800104e:	e000      	b.n	8001052 <HAL_CAN_IRQHandler+0x336>
            break;
 8001050:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699a      	ldr	r2, [r3, #24]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001060:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2204      	movs	r2, #4
 8001068:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f870 	bl	8001162 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr

080010ae <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr

080010d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b083      	sub	sp, #12
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4906      	ldr	r1, [pc, #24]	; (800120c <__NVIC_EnableIRQ+0x34>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff90 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff2d 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff42 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff35 	bl	80011d8 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b08b      	sub	sp, #44	; 0x2c
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e169      	b.n	8001678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a4:	2201      	movs	r2, #1
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	429a      	cmp	r2, r3
 80013be:	f040 8158 	bne.w	8001672 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a9a      	ldr	r2, [pc, #616]	; (8001630 <HAL_GPIO_Init+0x2a0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d05e      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013cc:	4a98      	ldr	r2, [pc, #608]	; (8001630 <HAL_GPIO_Init+0x2a0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d875      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013d2:	4a98      	ldr	r2, [pc, #608]	; (8001634 <HAL_GPIO_Init+0x2a4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d058      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013d8:	4a96      	ldr	r2, [pc, #600]	; (8001634 <HAL_GPIO_Init+0x2a4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d86f      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013de:	4a96      	ldr	r2, [pc, #600]	; (8001638 <HAL_GPIO_Init+0x2a8>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d052      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013e4:	4a94      	ldr	r2, [pc, #592]	; (8001638 <HAL_GPIO_Init+0x2a8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d869      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013ea:	4a94      	ldr	r2, [pc, #592]	; (800163c <HAL_GPIO_Init+0x2ac>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d04c      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013f0:	4a92      	ldr	r2, [pc, #584]	; (800163c <HAL_GPIO_Init+0x2ac>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d863      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 80013f6:	4a92      	ldr	r2, [pc, #584]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d046      	beq.n	800148a <HAL_GPIO_Init+0xfa>
 80013fc:	4a90      	ldr	r2, [pc, #576]	; (8001640 <HAL_GPIO_Init+0x2b0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d85d      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d82a      	bhi.n	800145c <HAL_GPIO_Init+0xcc>
 8001406:	2b12      	cmp	r3, #18
 8001408:	d859      	bhi.n	80014be <HAL_GPIO_Init+0x12e>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <HAL_GPIO_Init+0x80>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	0800148b 	.word	0x0800148b
 8001414:	08001465 	.word	0x08001465
 8001418:	08001477 	.word	0x08001477
 800141c:	080014b9 	.word	0x080014b9
 8001420:	080014bf 	.word	0x080014bf
 8001424:	080014bf 	.word	0x080014bf
 8001428:	080014bf 	.word	0x080014bf
 800142c:	080014bf 	.word	0x080014bf
 8001430:	080014bf 	.word	0x080014bf
 8001434:	080014bf 	.word	0x080014bf
 8001438:	080014bf 	.word	0x080014bf
 800143c:	080014bf 	.word	0x080014bf
 8001440:	080014bf 	.word	0x080014bf
 8001444:	080014bf 	.word	0x080014bf
 8001448:	080014bf 	.word	0x080014bf
 800144c:	080014bf 	.word	0x080014bf
 8001450:	080014bf 	.word	0x080014bf
 8001454:	0800146d 	.word	0x0800146d
 8001458:	08001481 	.word	0x08001481
 800145c:	4a79      	ldr	r2, [pc, #484]	; (8001644 <HAL_GPIO_Init+0x2b4>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d013      	beq.n	800148a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001462:	e02c      	b.n	80014be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	623b      	str	r3, [r7, #32]
          break;
 800146a:	e029      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	3304      	adds	r3, #4
 8001472:	623b      	str	r3, [r7, #32]
          break;
 8001474:	e024      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	3308      	adds	r3, #8
 800147c:	623b      	str	r3, [r7, #32]
          break;
 800147e:	e01f      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	330c      	adds	r3, #12
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e01a      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001492:	2304      	movs	r3, #4
 8001494:	623b      	str	r3, [r7, #32]
          break;
 8001496:	e013      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d105      	bne.n	80014ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a0:	2308      	movs	r3, #8
 80014a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	611a      	str	r2, [r3, #16]
          break;
 80014aa:	e009      	b.n	80014c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ac:	2308      	movs	r3, #8
 80014ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	615a      	str	r2, [r3, #20]
          break;
 80014b6:	e003      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
          break;
 80014bc:	e000      	b.n	80014c0 <HAL_GPIO_Init+0x130>
          break;
 80014be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2bff      	cmp	r3, #255	; 0xff
 80014c4:	d801      	bhi.n	80014ca <HAL_GPIO_Init+0x13a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	e001      	b.n	80014ce <HAL_GPIO_Init+0x13e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3304      	adds	r3, #4
 80014ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d802      	bhi.n	80014dc <HAL_GPIO_Init+0x14c>
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	e002      	b.n	80014e2 <HAL_GPIO_Init+0x152>
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	3b08      	subs	r3, #8
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	210f      	movs	r1, #15
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	fa01 f303 	lsl.w	r3, r1, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	401a      	ands	r2, r3
 80014f4:	6a39      	ldr	r1, [r7, #32]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	fa01 f303 	lsl.w	r3, r1, r3
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80b1 	beq.w	8001672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001510:	4b4d      	ldr	r3, [pc, #308]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a4c      	ldr	r2, [pc, #304]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x2b8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001528:	4a48      	ldr	r2, [pc, #288]	; (800164c <HAL_GPIO_Init+0x2bc>)
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a40      	ldr	r2, [pc, #256]	; (8001650 <HAL_GPIO_Init+0x2c0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d013      	beq.n	800157c <HAL_GPIO_Init+0x1ec>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3f      	ldr	r2, [pc, #252]	; (8001654 <HAL_GPIO_Init+0x2c4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1e8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <HAL_GPIO_Init+0x2c8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1e4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3d      	ldr	r2, [pc, #244]	; (800165c <HAL_GPIO_Init+0x2cc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1e0>
 800156c:	2303      	movs	r3, #3
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001570:	2304      	movs	r3, #4
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x1ee>
 800157c:	2300      	movs	r3, #0
 800157e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4313      	orrs	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158e:	492f      	ldr	r1, [pc, #188]	; (800164c <HAL_GPIO_Init+0x2bc>)
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a8:	4b2d      	ldr	r3, [pc, #180]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	492c      	ldr	r1, [pc, #176]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	608b      	str	r3, [r1, #8]
 80015b4:	e006      	b.n	80015c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	43db      	mvns	r3, r3
 80015be:	4928      	ldr	r1, [pc, #160]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	4922      	ldr	r1, [pc, #136]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	4313      	orrs	r3, r2
 80015da:	60cb      	str	r3, [r1, #12]
 80015dc:	e006      	b.n	80015ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	491e      	ldr	r1, [pc, #120]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4918      	ldr	r1, [pc, #96]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
 8001604:	e006      	b.n	8001614 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	43db      	mvns	r3, r3
 800160e:	4914      	ldr	r1, [pc, #80]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001610:	4013      	ands	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d021      	beq.n	8001664 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	490e      	ldr	r1, [pc, #56]	; (8001660 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	600b      	str	r3, [r1, #0]
 800162c:	e021      	b.n	8001672 <HAL_GPIO_Init+0x2e2>
 800162e:	bf00      	nop
 8001630:	10320000 	.word	0x10320000
 8001634:	10310000 	.word	0x10310000
 8001638:	10220000 	.word	0x10220000
 800163c:	10210000 	.word	0x10210000
 8001640:	10120000 	.word	0x10120000
 8001644:	10110000 	.word	0x10110000
 8001648:	40021000 	.word	0x40021000
 800164c:	40010000 	.word	0x40010000
 8001650:	40010800 	.word	0x40010800
 8001654:	40010c00 	.word	0x40010c00
 8001658:	40011000 	.word	0x40011000
 800165c:	40011400 	.word	0x40011400
 8001660:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_GPIO_Init+0x304>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	43db      	mvns	r3, r3
 800166c:	4909      	ldr	r1, [pc, #36]	; (8001694 <HAL_GPIO_Init+0x304>)
 800166e:	4013      	ands	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	3301      	adds	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	fa22 f303 	lsr.w	r3, r2, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	f47f ae8e 	bne.w	80013a4 <HAL_GPIO_Init+0x14>
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	372c      	adds	r7, #44	; 0x2c
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e272      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	4b92      	ldr	r3, [pc, #584]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d00c      	beq.n	80016de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c4:	4b8f      	ldr	r3, [pc, #572]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d112      	bne.n	80016f6 <HAL_RCC_OscConfig+0x5e>
 80016d0:	4b8c      	ldr	r3, [pc, #560]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016dc:	d10b      	bne.n	80016f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	4b89      	ldr	r3, [pc, #548]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d06c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x12c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d168      	bne.n	80017c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e24c      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x76>
 8001700:	4b80      	ldr	r3, [pc, #512]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a7f      	ldr	r2, [pc, #508]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e02e      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b7b      	ldr	r3, [pc, #492]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7a      	ldr	r2, [pc, #488]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b78      	ldr	r3, [pc, #480]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a77      	ldr	r2, [pc, #476]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0xbc>
 800173a:	4b72      	ldr	r3, [pc, #456]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a71      	ldr	r2, [pc, #452]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6e      	ldr	r2, [pc, #440]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001754:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6a      	ldr	r2, [pc, #424]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a67      	ldr	r2, [pc, #412]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7fe ffcc 	bl	8000710 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7fe ffc8 	bl	8000710 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e200      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b5d      	ldr	r3, [pc, #372]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xe4>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7fe ffb8 	bl	8000710 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7fe ffb4 	bl	8000710 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1ec      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b53      	ldr	r3, [pc, #332]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x10c>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d2:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017de:	4b49      	ldr	r3, [pc, #292]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x18c>
 80017ea:	4b46      	ldr	r3, [pc, #280]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x176>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c0      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4939      	ldr	r1, [pc, #228]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e03a      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x270>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7fe ff6d 	bl	8000710 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7fe ff69 	bl	8000710 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4927      	ldr	r1, [pc, #156]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_RCC_OscConfig+0x270>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7fe ff4c 	bl	8000710 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7fe ff48 	bl	8000710 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e180      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d03a      	beq.n	800191c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d019      	beq.n	80018e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7fe ff2c 	bl	8000710 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7fe ff28 	bl	8000710 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e160      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 face 	bl	8001e7c <RCC_Delay>
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_OscConfig+0x274>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7fe ff12 	bl	8000710 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ee:	e00f      	b.n	8001910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7fe ff0e 	bl	8000710 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d908      	bls.n	8001910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e146      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	42420000 	.word	0x42420000
 800190c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b92      	ldr	r3, [pc, #584]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e9      	bne.n	80018f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a6 	beq.w	8001a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b8b      	ldr	r3, [pc, #556]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10d      	bne.n	8001956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b88      	ldr	r3, [pc, #544]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a87      	ldr	r2, [pc, #540]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b85      	ldr	r3, [pc, #532]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b82      	ldr	r3, [pc, #520]	; (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b7f      	ldr	r3, [pc, #508]	; (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a7e      	ldr	r2, [pc, #504]	; (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7fe fecf 	bl	8000710 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7fe fecb 	bl	8000710 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b64      	cmp	r3, #100	; 0x64
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e103      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x312>
 800199c:	4b6f      	ldr	r3, [pc, #444]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6213      	str	r3, [r2, #32]
 80019a8:	e02d      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019b2:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	e01c      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x356>
 80019d4:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a60      	ldr	r2, [pc, #384]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	4b5e      	ldr	r3, [pc, #376]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a5d      	ldr	r2, [pc, #372]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019ee:	4b5b      	ldr	r3, [pc, #364]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a5a      	ldr	r2, [pc, #360]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	4b58      	ldr	r3, [pc, #352]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a57      	ldr	r2, [pc, #348]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7fe fe7f 	bl	8000710 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7fe fe7b 	bl	8000710 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0b1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ee      	beq.n	8001a16 <HAL_RCC_OscConfig+0x37e>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fe69 	bl	8000710 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7fe fe65 	bl	8000710 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e09b      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	4b40      	ldr	r3, [pc, #256]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ee      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a3b      	ldr	r2, [pc, #236]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d061      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d146      	bne.n	8001b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7fe fe39 	bl	8000710 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe fe35 	bl	8000710 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e06d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4921      	ldr	r1, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a19      	ldr	r1, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	430b      	orrs	r3, r1
 8001aee:	491b      	ldr	r1, [pc, #108]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe fe09 	bl	8000710 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe fe05 	bl	8000710 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e03d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46a>
 8001b20:	e035      	b.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7fe fdf2 	bl	8000710 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7fe fdee 	bl	8000710 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e026      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x498>
 8001b4e:	e01e      	b.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e019      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
 8001b64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_OscConfig+0x500>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d0      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4965      	ldr	r1, [pc, #404]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d040      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e073      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06b      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4936      	ldr	r1, [pc, #216]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7fe fd40 	bl	8000710 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7fe fd3c 	bl	8000710 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e053      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d210      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4922      	ldr	r1, [pc, #136]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	490a      	ldr	r1, [pc, #40]	; (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1cc>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1d0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fc9e 	bl	800068c <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003740 	.word	0x08003740
 8001d68:	20000000 	.word	0x20000000
 8001d6c:	20000004 	.word	0x20000004

08001d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x30>
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x36>
 8001d9e:	e027      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	e027      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0c5b      	lsrs	r3, r3, #17
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e004      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	613b      	str	r3, [r7, #16]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001df2:	613b      	str	r3, [r7, #16]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	693b      	ldr	r3, [r7, #16]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	007a1200 	.word	0x007a1200
 8001e0c:	08003758 	.word	0x08003758
 8001e10:	08003768 	.word	0x08003768
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08003750 	.word	0x08003750

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08003750 	.word	0x08003750

08001e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <RCC_Delay+0x34>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <RCC_Delay+0x38>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e98:	bf00      	nop
  }
  while (Delay --);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <RCC_Delay+0x1c>
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	10624dd3 	.word	0x10624dd3

08001eb8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e04a      	b.n	8001f60 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fa9c 	bl	800041c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	; 0x24
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f925 	bl	800214c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8001f20:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0208 	orr.w	r2, r2, #8
 8001f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d16d      	bne.n	8002064 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_UART_Transmit+0x2c>
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e066      	b.n	8002066 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2221      	movs	r2, #33	; 0x21
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fa6:	f7fe fbb3 	bl	8000710 <HAL_GetTick>
 8001faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	88fa      	ldrh	r2, [r7, #6]
 8001fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	88fa      	ldrh	r2, [r7, #6]
 8001fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc0:	d108      	bne.n	8001fd4 <HAL_UART_Transmit+0x6c>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d104      	bne.n	8001fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	e003      	b.n	8001fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fdc:	e02a      	b.n	8002034 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2180      	movs	r1, #128	; 0x80
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f840 	bl	800206e <UART_WaitOnFlagUntilTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e036      	b.n	8002066 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10b      	bne.n	8002016 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800200c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	3302      	adds	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	e007      	b.n	8002026 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3301      	adds	r3, #1
 8002024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1cf      	bne.n	8001fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2200      	movs	r2, #0
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f810 	bl	800206e <UART_WaitOnFlagUntilTimeout>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e006      	b.n	8002066 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b090      	sub	sp, #64	; 0x40
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207e:	e050      	b.n	8002122 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d04c      	beq.n	8002122 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <UART_WaitOnFlagUntilTimeout+0x30>
 800208e:	f7fe fb3f 	bl	8000710 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800209a:	429a      	cmp	r2, r3
 800209c:	d241      	bcs.n	8002122 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	330c      	adds	r3, #12
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	e853 3f00 	ldrex	r3, [r3]
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020be:	637a      	str	r2, [r7, #52]	; 0x34
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c6:	e841 2300 	strex	r3, r2, [r1]
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e5      	bne.n	800209e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3314      	adds	r3, #20
 80020d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	e853 3f00 	ldrex	r3, [r3]
 80020e0:	613b      	str	r3, [r7, #16]
   return(result);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3314      	adds	r3, #20
 80020f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f2:	623a      	str	r2, [r7, #32]
 80020f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	69f9      	ldr	r1, [r7, #28]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	e841 2300 	strex	r3, r2, [r1]
 80020fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e5      	bne.n	80020d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2220      	movs	r2, #32
 800210a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e00f      	b.n	8002142 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	4013      	ands	r3, r2
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	bf0c      	ite	eq
 8002132:	2301      	moveq	r3, #1
 8002134:	2300      	movne	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d09f      	beq.n	8002080 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3740      	adds	r7, #64	; 0x40
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002186:	f023 030c 	bic.w	r3, r3, #12
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	430b      	orrs	r3, r1
 8002192:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699a      	ldr	r2, [r3, #24]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <UART_SetConfig+0x114>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021b4:	f7ff fe4e 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	e002      	b.n	80021c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021bc:	f7ff fe36 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80021c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	009a      	lsls	r2, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <UART_SetConfig+0x118>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	0119      	lsls	r1, r3, #4
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	009a      	lsls	r2, r3, #2
 80021ec:	441a      	add	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f8:	4b1a      	ldr	r3, [pc, #104]	; (8002264 <UART_SetConfig+0x118>)
 80021fa:	fba3 0302 	umull	r0, r3, r3, r2
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	3332      	adds	r3, #50	; 0x32
 800220c:	4a15      	ldr	r2, [pc, #84]	; (8002264 <UART_SetConfig+0x118>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002218:	4419      	add	r1, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	009a      	lsls	r2, r3, #2
 8002224:	441a      	add	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <UART_SetConfig+0x118>)
 8002232:	fba3 0302 	umull	r0, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	fb00 f303 	mul.w	r3, r0, r3
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	3332      	adds	r3, #50	; 0x32
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <UART_SetConfig+0x118>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	440a      	add	r2, r1
 8002256:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40013800 	.word	0x40013800
 8002264:	51eb851f 	.word	0x51eb851f

08002268 <console>:
//	int (*canSend)(uint32_t id, uint8_t *bytes, uint8_t len);
//	void (*txCallback)(SyncLayerCANLink *link,SyncLayerCANData *data, uint8_t status);

} SyncLayerCANLink;

static void console(const char *title, const char *msg) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
	printf("%s:: %s\n", title, msg);
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <console+0x1c>)
 8002278:	f000 fa7e 	bl	8002778 <iprintf>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	080036b8 	.word	0x080036b8

08002288 <getMillis>:

static uint32_t getMillis() {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800228c:	f7fe fa40 	bl	8000710 <HAL_GetTick>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	bd80      	pop	{r7, pc}

08002296 <txSendThread>:

SyncLayerCANLink link;
SyncLayerCANData data;
static int canSend(uint32_t id, uint8_t *bytes, uint8_t len);

int txSendThread(SyncLayerCANLink *link, SyncLayerCANData *data) {
 8002296:	b580      	push	{r7, lr}
 8002298:	b08e      	sub	sp, #56	; 0x38
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
	uint32_t id;
	uint8_t bytes[8];
	uint16_t len;
	int isSuccess = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	637b      	str	r3, [r7, #52]	; 0x34
	if (data->track == SYNC_LAYER_CAN_START_REQ) {
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d130      	bne.n	8002310 <txSendThread+0x7a>
		data->doesCRCMatch = 1;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		data->isTimeOut = 0;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		isSuccess = 1;
 80022be:	2301      	movs	r3, #1
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
		data->frameIndex = 0;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2200      	movs	r2, #0
 80022c6:	72da      	strb	r2, [r3, #11]
		id = link->startReqID;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
		*(uint32_t*) (bytes) = data->id;
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	601a      	str	r2, [r3, #0]
		*(uint16_t*) (bytes + 4) = data->size;
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	3304      	adds	r3, #4
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	8912      	ldrh	r2, [r2, #8]
 80022e2:	801a      	strh	r2, [r3, #0]
		bytes[6] = data->numTry;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	7a9b      	ldrb	r3, [r3, #10]
 80022e8:	74bb      	strb	r3, [r7, #18]
		len = 8;
 80022ea:	2308      	movs	r3, #8
 80022ec:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (canSend(id, bytes, len))
 80022ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	4619      	mov	r1, r3
 80022f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022fa:	f000 f92d 	bl	8002558 <canSend>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80d0 	beq.w	80024a6 <txSendThread+0x210>
			data->track = SYNC_LAYER_CAN_START_ACK;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800230e:	e0ca      	b.n	80024a6 <txSendThread+0x210>
	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002316:	2b02      	cmp	r3, #2
 8002318:	d14c      	bne.n	80023b4 <txSendThread+0x11e>
		isSuccess = 1;
 800231a:	2301      	movs	r3, #1
 800231c:	637b      	str	r3, [r7, #52]	; 0x34
		id = data->id;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
		int index = data->frameIndex * 7;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	7adb      	ldrb	r3, [r3, #11]
 8002328:	461a      	mov	r2, r3
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
		bytes[0] = data->frameIndex;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	7adb      	ldrb	r3, [r3, #11]
 8002336:	733b      	strb	r3, [r7, #12]
		int remSize = data->size - index;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	891b      	ldrh	r3, [r3, #8]
 800233c:	461a      	mov	r2, r3
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	617b      	str	r3, [r7, #20]
		len = remSize > 7 ? 7 : remSize;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b07      	cmp	r3, #7
 8002348:	bfa8      	it	ge
 800234a:	2307      	movge	r3, #7
 800234c:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int i = 0; i < len; i++)
 800234e:	2300      	movs	r3, #0
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
 8002352:	e00f      	b.n	8002374 <txSendThread+0xde>
			bytes[i + 1] = data->bytes[i + index]; //TODO :
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	440a      	add	r2, r1
 800235e:	441a      	add	r2, r3
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	3301      	adds	r3, #1
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	3338      	adds	r3, #56	; 0x38
 8002368:	443b      	add	r3, r7
 800236a:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int i = 0; i < len; i++)
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	3301      	adds	r3, #1
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
 8002374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002378:	429a      	cmp	r2, r3
 800237a:	dbeb      	blt.n	8002354 <txSendThread+0xbe>
		if (canSend(id, bytes, len + 1)) {
 800237c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3301      	adds	r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	4619      	mov	r1, r3
 800238a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800238c:	f000 f8e4 	bl	8002558 <canSend>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8087 	beq.w	80024a6 <txSendThread+0x210>
			data->frameIndex++;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	7adb      	ldrb	r3, [r3, #11]
 800239c:	3301      	adds	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	72da      	strb	r2, [r3, #11]
			if (remSize <= 7)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b07      	cmp	r3, #7
 80023a8:	dc7d      	bgt.n	80024a6 <txSendThread+0x210>
				data->track = SYNC_LAYER_CAN_END_REQ;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2204      	movs	r2, #4
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023b2:	e078      	b.n	80024a6 <txSendThread+0x210>
		}
	} else if (data->track == SYNC_LAYER_CAN_MISSING_DATA) {
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d142      	bne.n	8002444 <txSendThread+0x1ae>
		isSuccess = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
		id = data->id;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
		int index = data->frameIndex * 7;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	7adb      	ldrb	r3, [r3, #11]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	623b      	str	r3, [r7, #32]
		bytes[0] = data->frameIndex;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7adb      	ldrb	r3, [r3, #11]
 80023da:	733b      	strb	r3, [r7, #12]
		int remSize = data->size - index;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	891b      	ldrh	r3, [r3, #8]
 80023e0:	461a      	mov	r2, r3
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	61fb      	str	r3, [r7, #28]
		len = remSize > 7 ? 7 : remSize;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b07      	cmp	r3, #7
 80023ec:	bfa8      	it	ge
 80023ee:	2307      	movge	r3, #7
 80023f0:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int i = 0; i < len; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023f6:	e00f      	b.n	8002418 <txSendThread+0x182>
			bytes[i + 1] = data->bytes[i + index]; //TODO :
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023fe:	6a3a      	ldr	r2, [r7, #32]
 8002400:	440a      	add	r2, r1
 8002402:	441a      	add	r2, r3
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	3301      	adds	r3, #1
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	3338      	adds	r3, #56	; 0x38
 800240c:	443b      	add	r3, r7
 800240e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int i = 0; i < len; i++)
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	3301      	adds	r3, #1
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002418:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800241a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241c:	429a      	cmp	r2, r3
 800241e:	dbeb      	blt.n	80023f8 <txSendThread+0x162>
		if (canSend(id, bytes, len + 1))
 8002420:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3301      	adds	r3, #1
 8002426:	b2da      	uxtb	r2, r3
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002430:	f000 f892 	bl	8002558 <canSend>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d035      	beq.n	80024a6 <txSendThread+0x210>
			data->track = SYNC_LAYER_CAN_END_REQ;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2204      	movs	r2, #4
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002442:	e030      	b.n	80024a6 <txSendThread+0x210>
	} else if (data->track == SYNC_LAYER_CAN_END_REQ) {
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800244a:	2b04      	cmp	r3, #4
 800244c:	d12b      	bne.n	80024a6 <txSendThread+0x210>
		isSuccess = 1;
 800244e:	2301      	movs	r3, #1
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
		len = 8;
 8002452:	2308      	movs	r3, #8
 8002454:	857b      	strh	r3, [r7, #42]	; 0x2a
		id = link->endReqID;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
		*(uint32_t*) bytes = data->id;
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	601a      	str	r2, [r3, #0]
		data->crc = crc32_calculate(data->bytes, data->size);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	891b      	ldrh	r3, [r3, #8]
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f000 f93b 	bl	80026ec <crc32_calculate>
 8002476:	4602      	mov	r2, r0
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	621a      	str	r2, [r3, #32]
		*(uint32_t*) (&bytes[4]) = data->crc;
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	3304      	adds	r3, #4
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6a12      	ldr	r2, [r2, #32]
 8002486:	601a      	str	r2, [r3, #0]
		if (canSend(id, bytes, len))
 8002488:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800248a:	b2da      	uxtb	r2, r3
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002494:	f000 f860 	bl	8002558 <canSend>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <txSendThread+0x210>
			data->track = SYNC_LAYER_CAN_END_ACK;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2205      	movs	r2, #5
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	if (isSuccess)
 80024a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d006      	beq.n	80024ba <txSendThread+0x224>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 80024ac:	f7ff feec 	bl	8002288 <getMillis>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
	return isSuccess;
 80024ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3738      	adds	r7, #56	; 0x38
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <canInit>:
}

////////////////////////////////////////////////////////////////////////

extern CAN_HandleTypeDef hcan;
static void canInit() {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;

	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	623b      	str	r3, [r7, #32]
	can_filter.FilterBank = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
	can_filter.FilterIdHigh = 0x0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0;
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x0;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80024ea:	2301      	movs	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
	can_filter.SlaveStartFilterBank = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &can_filter);
 80024f2:	463b      	mov	r3, r7
 80024f4:	4619      	mov	r1, r3
 80024f6:	4813      	ldr	r0, [pc, #76]	; (8002544 <canInit+0x80>)
 80024f8:	f7fe fa0f 	bl	800091a <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80024fc:	2102      	movs	r1, #2
 80024fe:	4811      	ldr	r0, [pc, #68]	; (8002544 <canInit+0x80>)
 8002500:	f7fe fbe7 	bl	8000cd2 <HAL_CAN_ActivateNotification>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <canInit+0x4e>
			!= HAL_OK)
		console("CAN RX Interrupt Activate", "Failed");
 800250a:	490f      	ldr	r1, [pc, #60]	; (8002548 <canInit+0x84>)
 800250c:	480f      	ldr	r0, [pc, #60]	; (800254c <canInit+0x88>)
 800250e:	f7ff feab 	bl	8002268 <console>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002512:	2101      	movs	r1, #1
 8002514:	480b      	ldr	r0, [pc, #44]	; (8002544 <canInit+0x80>)
 8002516:	f7fe fbdc 	bl	8000cd2 <HAL_CAN_ActivateNotification>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <canInit+0x64>
		console("CAN TX Interrupt Activate", "Failed");
 8002520:	4909      	ldr	r1, [pc, #36]	; (8002548 <canInit+0x84>)
 8002522:	480b      	ldr	r0, [pc, #44]	; (8002550 <canInit+0x8c>)
 8002524:	f7ff fea0 	bl	8002268 <console>
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002528:	4806      	ldr	r0, [pc, #24]	; (8002544 <canInit+0x80>)
 800252a:	f7fe fabf 	bl	8000aac <HAL_CAN_Start>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <canInit+0x78>
		console("CAN Start", "Failed");
 8002534:	4904      	ldr	r1, [pc, #16]	; (8002548 <canInit+0x84>)
 8002536:	4807      	ldr	r0, [pc, #28]	; (8002554 <canInit+0x90>)
 8002538:	f7ff fe96 	bl	8002268 <console>
}
 800253c:	bf00      	nop
 800253e:	3728      	adds	r7, #40	; 0x28
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000048c 	.word	0x2000048c
 8002548:	080036c4 	.word	0x080036c4
 800254c:	080036cc 	.word	0x080036cc
 8002550:	080036e8 	.word	0x080036e8
 8002554:	08003704 	.word	0x08003704

08002558 <canSend>:

}

static CAN_TxHeaderTypeDef tx_header;
static uint32_t tx_mailbox;
static int canSend(uint32_t id, uint8_t *bytes, uint8_t len) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4613      	mov	r3, r2
 8002564:	71fb      	strb	r3, [r7, #7]
	tx_header.DLC = len;
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <canSend+0x4c>)
 800256a:	6113      	str	r3, [r2, #16]
	tx_header.ExtId = id;
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <canSend+0x4c>)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6053      	str	r3, [r2, #4]
	tx_header.IDE = CAN_ID_EXT;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <canSend+0x4c>)
 8002574:	2204      	movs	r2, #4
 8002576:	609a      	str	r2, [r3, #8]
	tx_header.RTR = CAN_RTR_DATA;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <canSend+0x4c>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
	tx_header.TransmitGlobalTime = DISABLE;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <canSend+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	751a      	strb	r2, [r3, #20]
//	printf("canSend-> 0x%02x : ", (unsigned int) id);
//	for (int i = 0; i < len; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");

	return HAL_CAN_AddTxMessage(&hcan, &tx_header, bytes, &tx_mailbox) == HAL_OK;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <canSend+0x50>)
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <canSend+0x4c>)
 800258a:	4808      	ldr	r0, [pc, #32]	; (80025ac <canSend+0x54>)
 800258c:	f7fe fad2 	bl	8000b34 <HAL_CAN_AddTxMessage>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000544 	.word	0x20000544
 80025a8:	2000055c 	.word	0x2000055c
 80025ac:	2000048c 	.word	0x2000048c

080025b0 <runTx>:
	printf("status : %d\n", status);
	data->track = SYNC_LAYER_CAN_START_REQ;
}

uint8_t tx_bytes[8];
void runTx() {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
	canInit();
 80025b6:	f7ff ff85 	bl	80024c4 <canInit>

	for (int i = 0; i < sizeof(tx_bytes); i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	e009      	b.n	80025d4 <runTx+0x24>
		tx_bytes[i] = i;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	b2d9      	uxtb	r1, r3
 80025c4:	4a15      	ldr	r2, [pc, #84]	; (800261c <runTx+0x6c>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	460a      	mov	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tx_bytes); i++)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3301      	adds	r3, #1
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	d9f2      	bls.n	80025c0 <runTx+0x10>

/////////link////////////
	link.startReqID = 0x1;
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <runTx+0x70>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
	link.startAckID = 0x2;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <runTx+0x70>)
 80025e2:	2202      	movs	r2, #2
 80025e4:	605a      	str	r2, [r3, #4]
	link.endReqID = 0x3;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <runTx+0x70>)
 80025e8:	2203      	movs	r2, #3
 80025ea:	609a      	str	r2, [r3, #8]
	link.endAckID = 0x4;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <runTx+0x70>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	60da      	str	r2, [r3, #12]

//	link.canSend = canSend;
//	link.txCallback = txCallback;

/////////data//////////////
	data.id = 0xA;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <runTx+0x74>)
 80025f4:	220a      	movs	r2, #10
 80025f6:	601a      	str	r2, [r3, #0]
	data.bytes = tx_bytes;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <runTx+0x74>)
 80025fa:	4a08      	ldr	r2, [pc, #32]	; (800261c <runTx+0x6c>)
 80025fc:	605a      	str	r2, [r3, #4]
	data.size = sizeof(tx_bytes);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <runTx+0x74>)
 8002600:	2208      	movs	r2, #8
 8002602:	811a      	strh	r2, [r3, #8]
	data.numTry = 3;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <runTx+0x74>)
 8002606:	2203      	movs	r2, #3
 8002608:	729a      	strb	r2, [r3, #10]
	data.track = SYNC_LAYER_CAN_START_REQ;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <runTx+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	while (1) {
		txSendThread(&link, &data);
 8002612:	4904      	ldr	r1, [pc, #16]	; (8002624 <runTx+0x74>)
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <runTx+0x70>)
 8002616:	f7ff fe3e 	bl	8002296 <txSendThread>
 800261a:	e7fa      	b.n	8002612 <runTx+0x62>
 800261c:	20000560 	.word	0x20000560
 8002620:	20000504 	.word	0x20000504
 8002624:	20000514 	.word	0x20000514

08002628 <crc_init>:
    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};
static uint32_t crc_value;
void crc_init(void){
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
    crc_value=0xFFFFFFFF;
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <crc_init+0x14>)
 800262e:	f04f 32ff 	mov.w	r2, #4294967295
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000568 	.word	0x20000568

08002640 <crc32_accumulate>:
uint32_t crc32_accumulate(uint8_t *bytes,uint32_t len){
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
    uint32_t crc = crc_value;
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <crc32_accumulate+0xa4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	61fb      	str	r3, [r7, #28]
    uint32_t limit = len/4+(len%4>0?1:0);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	2a00      	cmp	r2, #0
 800265c:	d001      	beq.n	8002662 <crc32_accumulate+0x22>
 800265e:	2201      	movs	r2, #1
 8002660:	e000      	b.n	8002664 <crc32_accumulate+0x24>
 8002662:	2200      	movs	r2, #0
 8002664:	4413      	add	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    for(int i=0;i<limit;i++){
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e02d      	b.n	80026ca <crc32_accumulate+0x8a>
        for(int j=3;j>=0;j--){
 800266e:	2303      	movs	r3, #3
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e024      	b.n	80026be <crc32_accumulate+0x7e>
            uint32_t count = (4*i+j);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4413      	add	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
            if(count<len)
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d20f      	bcs.n	80026a6 <crc32_accumulate+0x66>
                crc = (crc<<8) ^ table[(((crc>>24)^bytes[count]) & 0xff)];
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	0e1b      	lsrs	r3, r3, #24
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	4401      	add	r1, r0
 8002694:	7809      	ldrb	r1, [r1, #0]
 8002696:	404b      	eors	r3, r1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4913      	ldr	r1, [pc, #76]	; (80026e8 <crc32_accumulate+0xa8>)
 800269c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026a0:	4053      	eors	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e008      	b.n	80026b8 <crc32_accumulate+0x78>
            else
                crc = (crc<<8) ^ table[((crc>>24) & 0xff)];
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	021a      	lsls	r2, r3, #8
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	490e      	ldr	r1, [pc, #56]	; (80026e8 <crc32_accumulate+0xa8>)
 80026b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026b4:	4053      	eors	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
        for(int j=3;j>=0;j--){
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	dad7      	bge.n	8002674 <crc32_accumulate+0x34>
    for(int i=0;i<limit;i++){
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3301      	adds	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d8cd      	bhi.n	800266e <crc32_accumulate+0x2e>
        }
    }
    crc_value = crc;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <crc32_accumulate+0xa4>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	6013      	str	r3, [r2, #0]
    return crc;
 80026d8:	69fb      	ldr	r3, [r7, #28]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	20000568 	.word	0x20000568
 80026e8:	2000000c 	.word	0x2000000c

080026ec <crc32_calculate>:
uint32_t crc32_calculate(uint8_t *bytes,uint32_t len){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
    crc_init();
 80026f6:	f7ff ff97 	bl	8002628 <crc_init>
    crc32_accumulate(bytes,len);
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff9f 	bl	8002640 <crc32_accumulate>
    return crc_value;
 8002702:	4b03      	ldr	r3, [pc, #12]	; (8002710 <crc32_calculate+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000568 	.word	0x20000568

08002714 <__errno>:
 8002714:	4b01      	ldr	r3, [pc, #4]	; (800271c <__errno+0x8>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	2000040c 	.word	0x2000040c

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2600      	movs	r6, #0
 8002724:	4d0c      	ldr	r5, [pc, #48]	; (8002758 <__libc_init_array+0x38>)
 8002726:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	f000 ffb6 	bl	80036a0 <_init>
 8002734:	2600      	movs	r6, #0
 8002736:	4d0a      	ldr	r5, [pc, #40]	; (8002760 <__libc_init_array+0x40>)
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <__libc_init_array+0x44>)
 800273a:	1b64      	subs	r4, r4, r5
 800273c:	10a4      	asrs	r4, r4, #2
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f855 3b04 	ldr.w	r3, [r5], #4
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	08003804 	.word	0x08003804
 800275c:	08003804 	.word	0x08003804
 8002760:	08003804 	.word	0x08003804
 8002764:	08003808 	.word	0x08003808

08002768 <memset>:
 8002768:	4603      	mov	r3, r0
 800276a:	4402      	add	r2, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <iprintf>:
 8002778:	b40f      	push	{r0, r1, r2, r3}
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <iprintf+0x2c>)
 800277c:	b513      	push	{r0, r1, r4, lr}
 800277e:	681c      	ldr	r4, [r3, #0]
 8002780:	b124      	cbz	r4, 800278c <iprintf+0x14>
 8002782:	69a3      	ldr	r3, [r4, #24]
 8002784:	b913      	cbnz	r3, 800278c <iprintf+0x14>
 8002786:	4620      	mov	r0, r4
 8002788:	f000 f9e4 	bl	8002b54 <__sinit>
 800278c:	ab05      	add	r3, sp, #20
 800278e:	4620      	mov	r0, r4
 8002790:	9a04      	ldr	r2, [sp, #16]
 8002792:	68a1      	ldr	r1, [r4, #8]
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	f000 fbe7 	bl	8002f68 <_vfiprintf_r>
 800279a:	b002      	add	sp, #8
 800279c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a0:	b004      	add	sp, #16
 80027a2:	4770      	bx	lr
 80027a4:	2000040c 	.word	0x2000040c

080027a8 <__swbuf_r>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	460e      	mov	r6, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	4605      	mov	r5, r0
 80027b0:	b118      	cbz	r0, 80027ba <__swbuf_r+0x12>
 80027b2:	6983      	ldr	r3, [r0, #24]
 80027b4:	b90b      	cbnz	r3, 80027ba <__swbuf_r+0x12>
 80027b6:	f000 f9cd 	bl	8002b54 <__sinit>
 80027ba:	4b21      	ldr	r3, [pc, #132]	; (8002840 <__swbuf_r+0x98>)
 80027bc:	429c      	cmp	r4, r3
 80027be:	d12b      	bne.n	8002818 <__swbuf_r+0x70>
 80027c0:	686c      	ldr	r4, [r5, #4]
 80027c2:	69a3      	ldr	r3, [r4, #24]
 80027c4:	60a3      	str	r3, [r4, #8]
 80027c6:	89a3      	ldrh	r3, [r4, #12]
 80027c8:	071a      	lsls	r2, r3, #28
 80027ca:	d52f      	bpl.n	800282c <__swbuf_r+0x84>
 80027cc:	6923      	ldr	r3, [r4, #16]
 80027ce:	b36b      	cbz	r3, 800282c <__swbuf_r+0x84>
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	b2f6      	uxtb	r6, r6
 80027d6:	1ac0      	subs	r0, r0, r3
 80027d8:	6963      	ldr	r3, [r4, #20]
 80027da:	4637      	mov	r7, r6
 80027dc:	4283      	cmp	r3, r0
 80027de:	dc04      	bgt.n	80027ea <__swbuf_r+0x42>
 80027e0:	4621      	mov	r1, r4
 80027e2:	4628      	mov	r0, r5
 80027e4:	f000 f922 	bl	8002a2c <_fflush_r>
 80027e8:	bb30      	cbnz	r0, 8002838 <__swbuf_r+0x90>
 80027ea:	68a3      	ldr	r3, [r4, #8]
 80027ec:	3001      	adds	r0, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	60a3      	str	r3, [r4, #8]
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	6022      	str	r2, [r4, #0]
 80027f8:	701e      	strb	r6, [r3, #0]
 80027fa:	6963      	ldr	r3, [r4, #20]
 80027fc:	4283      	cmp	r3, r0
 80027fe:	d004      	beq.n	800280a <__swbuf_r+0x62>
 8002800:	89a3      	ldrh	r3, [r4, #12]
 8002802:	07db      	lsls	r3, r3, #31
 8002804:	d506      	bpl.n	8002814 <__swbuf_r+0x6c>
 8002806:	2e0a      	cmp	r6, #10
 8002808:	d104      	bne.n	8002814 <__swbuf_r+0x6c>
 800280a:	4621      	mov	r1, r4
 800280c:	4628      	mov	r0, r5
 800280e:	f000 f90d 	bl	8002a2c <_fflush_r>
 8002812:	b988      	cbnz	r0, 8002838 <__swbuf_r+0x90>
 8002814:	4638      	mov	r0, r7
 8002816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002818:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <__swbuf_r+0x9c>)
 800281a:	429c      	cmp	r4, r3
 800281c:	d101      	bne.n	8002822 <__swbuf_r+0x7a>
 800281e:	68ac      	ldr	r4, [r5, #8]
 8002820:	e7cf      	b.n	80027c2 <__swbuf_r+0x1a>
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <__swbuf_r+0xa0>)
 8002824:	429c      	cmp	r4, r3
 8002826:	bf08      	it	eq
 8002828:	68ec      	ldreq	r4, [r5, #12]
 800282a:	e7ca      	b.n	80027c2 <__swbuf_r+0x1a>
 800282c:	4621      	mov	r1, r4
 800282e:	4628      	mov	r0, r5
 8002830:	f000 f80c 	bl	800284c <__swsetup_r>
 8002834:	2800      	cmp	r0, #0
 8002836:	d0cb      	beq.n	80027d0 <__swbuf_r+0x28>
 8002838:	f04f 37ff 	mov.w	r7, #4294967295
 800283c:	e7ea      	b.n	8002814 <__swbuf_r+0x6c>
 800283e:	bf00      	nop
 8002840:	08003790 	.word	0x08003790
 8002844:	080037b0 	.word	0x080037b0
 8002848:	08003770 	.word	0x08003770

0800284c <__swsetup_r>:
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <__swsetup_r+0xcc>)
 800284e:	b570      	push	{r4, r5, r6, lr}
 8002850:	681d      	ldr	r5, [r3, #0]
 8002852:	4606      	mov	r6, r0
 8002854:	460c      	mov	r4, r1
 8002856:	b125      	cbz	r5, 8002862 <__swsetup_r+0x16>
 8002858:	69ab      	ldr	r3, [r5, #24]
 800285a:	b913      	cbnz	r3, 8002862 <__swsetup_r+0x16>
 800285c:	4628      	mov	r0, r5
 800285e:	f000 f979 	bl	8002b54 <__sinit>
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <__swsetup_r+0xd0>)
 8002864:	429c      	cmp	r4, r3
 8002866:	d10f      	bne.n	8002888 <__swsetup_r+0x3c>
 8002868:	686c      	ldr	r4, [r5, #4]
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002870:	0719      	lsls	r1, r3, #28
 8002872:	d42c      	bmi.n	80028ce <__swsetup_r+0x82>
 8002874:	06dd      	lsls	r5, r3, #27
 8002876:	d411      	bmi.n	800289c <__swsetup_r+0x50>
 8002878:	2309      	movs	r3, #9
 800287a:	6033      	str	r3, [r6, #0]
 800287c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	81a3      	strh	r3, [r4, #12]
 8002886:	e03e      	b.n	8002906 <__swsetup_r+0xba>
 8002888:	4b25      	ldr	r3, [pc, #148]	; (8002920 <__swsetup_r+0xd4>)
 800288a:	429c      	cmp	r4, r3
 800288c:	d101      	bne.n	8002892 <__swsetup_r+0x46>
 800288e:	68ac      	ldr	r4, [r5, #8]
 8002890:	e7eb      	b.n	800286a <__swsetup_r+0x1e>
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <__swsetup_r+0xd8>)
 8002894:	429c      	cmp	r4, r3
 8002896:	bf08      	it	eq
 8002898:	68ec      	ldreq	r4, [r5, #12]
 800289a:	e7e6      	b.n	800286a <__swsetup_r+0x1e>
 800289c:	0758      	lsls	r0, r3, #29
 800289e:	d512      	bpl.n	80028c6 <__swsetup_r+0x7a>
 80028a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028a2:	b141      	cbz	r1, 80028b6 <__swsetup_r+0x6a>
 80028a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028a8:	4299      	cmp	r1, r3
 80028aa:	d002      	beq.n	80028b2 <__swsetup_r+0x66>
 80028ac:	4630      	mov	r0, r6
 80028ae:	f000 fa57 	bl	8002d60 <_free_r>
 80028b2:	2300      	movs	r3, #0
 80028b4:	6363      	str	r3, [r4, #52]	; 0x34
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	2300      	movs	r3, #0
 80028c0:	6063      	str	r3, [r4, #4]
 80028c2:	6923      	ldr	r3, [r4, #16]
 80028c4:	6023      	str	r3, [r4, #0]
 80028c6:	89a3      	ldrh	r3, [r4, #12]
 80028c8:	f043 0308 	orr.w	r3, r3, #8
 80028cc:	81a3      	strh	r3, [r4, #12]
 80028ce:	6923      	ldr	r3, [r4, #16]
 80028d0:	b94b      	cbnz	r3, 80028e6 <__swsetup_r+0x9a>
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028dc:	d003      	beq.n	80028e6 <__swsetup_r+0x9a>
 80028de:	4621      	mov	r1, r4
 80028e0:	4630      	mov	r0, r6
 80028e2:	f000 f9fd 	bl	8002ce0 <__smakebuf_r>
 80028e6:	89a0      	ldrh	r0, [r4, #12]
 80028e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028ec:	f010 0301 	ands.w	r3, r0, #1
 80028f0:	d00a      	beq.n	8002908 <__swsetup_r+0xbc>
 80028f2:	2300      	movs	r3, #0
 80028f4:	60a3      	str	r3, [r4, #8]
 80028f6:	6963      	ldr	r3, [r4, #20]
 80028f8:	425b      	negs	r3, r3
 80028fa:	61a3      	str	r3, [r4, #24]
 80028fc:	6923      	ldr	r3, [r4, #16]
 80028fe:	b943      	cbnz	r3, 8002912 <__swsetup_r+0xc6>
 8002900:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002904:	d1ba      	bne.n	800287c <__swsetup_r+0x30>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	0781      	lsls	r1, r0, #30
 800290a:	bf58      	it	pl
 800290c:	6963      	ldrpl	r3, [r4, #20]
 800290e:	60a3      	str	r3, [r4, #8]
 8002910:	e7f4      	b.n	80028fc <__swsetup_r+0xb0>
 8002912:	2000      	movs	r0, #0
 8002914:	e7f7      	b.n	8002906 <__swsetup_r+0xba>
 8002916:	bf00      	nop
 8002918:	2000040c 	.word	0x2000040c
 800291c:	08003790 	.word	0x08003790
 8002920:	080037b0 	.word	0x080037b0
 8002924:	08003770 	.word	0x08003770

08002928 <__sflush_r>:
 8002928:	898a      	ldrh	r2, [r1, #12]
 800292a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292c:	4605      	mov	r5, r0
 800292e:	0710      	lsls	r0, r2, #28
 8002930:	460c      	mov	r4, r1
 8002932:	d457      	bmi.n	80029e4 <__sflush_r+0xbc>
 8002934:	684b      	ldr	r3, [r1, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	dc04      	bgt.n	8002944 <__sflush_r+0x1c>
 800293a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	dc01      	bgt.n	8002944 <__sflush_r+0x1c>
 8002940:	2000      	movs	r0, #0
 8002942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002946:	2e00      	cmp	r6, #0
 8002948:	d0fa      	beq.n	8002940 <__sflush_r+0x18>
 800294a:	2300      	movs	r3, #0
 800294c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002950:	682f      	ldr	r7, [r5, #0]
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	d032      	beq.n	80029bc <__sflush_r+0x94>
 8002956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	075a      	lsls	r2, r3, #29
 800295c:	d505      	bpl.n	800296a <__sflush_r+0x42>
 800295e:	6863      	ldr	r3, [r4, #4]
 8002960:	1ac0      	subs	r0, r0, r3
 8002962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002964:	b10b      	cbz	r3, 800296a <__sflush_r+0x42>
 8002966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002968:	1ac0      	subs	r0, r0, r3
 800296a:	2300      	movs	r3, #0
 800296c:	4602      	mov	r2, r0
 800296e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002970:	4628      	mov	r0, r5
 8002972:	6a21      	ldr	r1, [r4, #32]
 8002974:	47b0      	blx	r6
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	d106      	bne.n	800298a <__sflush_r+0x62>
 800297c:	6829      	ldr	r1, [r5, #0]
 800297e:	291d      	cmp	r1, #29
 8002980:	d82c      	bhi.n	80029dc <__sflush_r+0xb4>
 8002982:	4a29      	ldr	r2, [pc, #164]	; (8002a28 <__sflush_r+0x100>)
 8002984:	40ca      	lsrs	r2, r1
 8002986:	07d6      	lsls	r6, r2, #31
 8002988:	d528      	bpl.n	80029dc <__sflush_r+0xb4>
 800298a:	2200      	movs	r2, #0
 800298c:	6062      	str	r2, [r4, #4]
 800298e:	6922      	ldr	r2, [r4, #16]
 8002990:	04d9      	lsls	r1, r3, #19
 8002992:	6022      	str	r2, [r4, #0]
 8002994:	d504      	bpl.n	80029a0 <__sflush_r+0x78>
 8002996:	1c42      	adds	r2, r0, #1
 8002998:	d101      	bne.n	800299e <__sflush_r+0x76>
 800299a:	682b      	ldr	r3, [r5, #0]
 800299c:	b903      	cbnz	r3, 80029a0 <__sflush_r+0x78>
 800299e:	6560      	str	r0, [r4, #84]	; 0x54
 80029a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029a2:	602f      	str	r7, [r5, #0]
 80029a4:	2900      	cmp	r1, #0
 80029a6:	d0cb      	beq.n	8002940 <__sflush_r+0x18>
 80029a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029ac:	4299      	cmp	r1, r3
 80029ae:	d002      	beq.n	80029b6 <__sflush_r+0x8e>
 80029b0:	4628      	mov	r0, r5
 80029b2:	f000 f9d5 	bl	8002d60 <_free_r>
 80029b6:	2000      	movs	r0, #0
 80029b8:	6360      	str	r0, [r4, #52]	; 0x34
 80029ba:	e7c2      	b.n	8002942 <__sflush_r+0x1a>
 80029bc:	6a21      	ldr	r1, [r4, #32]
 80029be:	2301      	movs	r3, #1
 80029c0:	4628      	mov	r0, r5
 80029c2:	47b0      	blx	r6
 80029c4:	1c41      	adds	r1, r0, #1
 80029c6:	d1c7      	bne.n	8002958 <__sflush_r+0x30>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0c4      	beq.n	8002958 <__sflush_r+0x30>
 80029ce:	2b1d      	cmp	r3, #29
 80029d0:	d001      	beq.n	80029d6 <__sflush_r+0xae>
 80029d2:	2b16      	cmp	r3, #22
 80029d4:	d101      	bne.n	80029da <__sflush_r+0xb2>
 80029d6:	602f      	str	r7, [r5, #0]
 80029d8:	e7b2      	b.n	8002940 <__sflush_r+0x18>
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e0:	81a3      	strh	r3, [r4, #12]
 80029e2:	e7ae      	b.n	8002942 <__sflush_r+0x1a>
 80029e4:	690f      	ldr	r7, [r1, #16]
 80029e6:	2f00      	cmp	r7, #0
 80029e8:	d0aa      	beq.n	8002940 <__sflush_r+0x18>
 80029ea:	0793      	lsls	r3, r2, #30
 80029ec:	bf18      	it	ne
 80029ee:	2300      	movne	r3, #0
 80029f0:	680e      	ldr	r6, [r1, #0]
 80029f2:	bf08      	it	eq
 80029f4:	694b      	ldreq	r3, [r1, #20]
 80029f6:	1bf6      	subs	r6, r6, r7
 80029f8:	600f      	str	r7, [r1, #0]
 80029fa:	608b      	str	r3, [r1, #8]
 80029fc:	2e00      	cmp	r6, #0
 80029fe:	dd9f      	ble.n	8002940 <__sflush_r+0x18>
 8002a00:	4633      	mov	r3, r6
 8002a02:	463a      	mov	r2, r7
 8002a04:	4628      	mov	r0, r5
 8002a06:	6a21      	ldr	r1, [r4, #32]
 8002a08:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002a0c:	47e0      	blx	ip
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	dc06      	bgt.n	8002a20 <__sflush_r+0xf8>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1c:	81a3      	strh	r3, [r4, #12]
 8002a1e:	e790      	b.n	8002942 <__sflush_r+0x1a>
 8002a20:	4407      	add	r7, r0
 8002a22:	1a36      	subs	r6, r6, r0
 8002a24:	e7ea      	b.n	80029fc <__sflush_r+0xd4>
 8002a26:	bf00      	nop
 8002a28:	20400001 	.word	0x20400001

08002a2c <_fflush_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	690b      	ldr	r3, [r1, #16]
 8002a30:	4605      	mov	r5, r0
 8002a32:	460c      	mov	r4, r1
 8002a34:	b913      	cbnz	r3, 8002a3c <_fflush_r+0x10>
 8002a36:	2500      	movs	r5, #0
 8002a38:	4628      	mov	r0, r5
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
 8002a3c:	b118      	cbz	r0, 8002a46 <_fflush_r+0x1a>
 8002a3e:	6983      	ldr	r3, [r0, #24]
 8002a40:	b90b      	cbnz	r3, 8002a46 <_fflush_r+0x1a>
 8002a42:	f000 f887 	bl	8002b54 <__sinit>
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <_fflush_r+0x6c>)
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d11b      	bne.n	8002a84 <_fflush_r+0x58>
 8002a4c:	686c      	ldr	r4, [r5, #4]
 8002a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0ef      	beq.n	8002a36 <_fflush_r+0xa>
 8002a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a58:	07d0      	lsls	r0, r2, #31
 8002a5a:	d404      	bmi.n	8002a66 <_fflush_r+0x3a>
 8002a5c:	0599      	lsls	r1, r3, #22
 8002a5e:	d402      	bmi.n	8002a66 <_fflush_r+0x3a>
 8002a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a62:	f000 f915 	bl	8002c90 <__retarget_lock_acquire_recursive>
 8002a66:	4628      	mov	r0, r5
 8002a68:	4621      	mov	r1, r4
 8002a6a:	f7ff ff5d 	bl	8002928 <__sflush_r>
 8002a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a70:	4605      	mov	r5, r0
 8002a72:	07da      	lsls	r2, r3, #31
 8002a74:	d4e0      	bmi.n	8002a38 <_fflush_r+0xc>
 8002a76:	89a3      	ldrh	r3, [r4, #12]
 8002a78:	059b      	lsls	r3, r3, #22
 8002a7a:	d4dd      	bmi.n	8002a38 <_fflush_r+0xc>
 8002a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a7e:	f000 f908 	bl	8002c92 <__retarget_lock_release_recursive>
 8002a82:	e7d9      	b.n	8002a38 <_fflush_r+0xc>
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <_fflush_r+0x70>)
 8002a86:	429c      	cmp	r4, r3
 8002a88:	d101      	bne.n	8002a8e <_fflush_r+0x62>
 8002a8a:	68ac      	ldr	r4, [r5, #8]
 8002a8c:	e7df      	b.n	8002a4e <_fflush_r+0x22>
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <_fflush_r+0x74>)
 8002a90:	429c      	cmp	r4, r3
 8002a92:	bf08      	it	eq
 8002a94:	68ec      	ldreq	r4, [r5, #12]
 8002a96:	e7da      	b.n	8002a4e <_fflush_r+0x22>
 8002a98:	08003790 	.word	0x08003790
 8002a9c:	080037b0 	.word	0x080037b0
 8002aa0:	08003770 	.word	0x08003770

08002aa4 <std>:
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8002aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab2:	6083      	str	r3, [r0, #8]
 8002ab4:	8181      	strh	r1, [r0, #12]
 8002ab6:	6643      	str	r3, [r0, #100]	; 0x64
 8002ab8:	81c2      	strh	r2, [r0, #14]
 8002aba:	6183      	str	r3, [r0, #24]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2208      	movs	r2, #8
 8002ac0:	305c      	adds	r0, #92	; 0x5c
 8002ac2:	f7ff fe51 	bl	8002768 <memset>
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <std+0x38>)
 8002ac8:	6224      	str	r4, [r4, #32]
 8002aca:	6263      	str	r3, [r4, #36]	; 0x24
 8002acc:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <std+0x3c>)
 8002ace:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <std+0x40>)
 8002ad2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <std+0x44>)
 8002ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ad8:	bd10      	pop	{r4, pc}
 8002ada:	bf00      	nop
 8002adc:	08003515 	.word	0x08003515
 8002ae0:	08003537 	.word	0x08003537
 8002ae4:	0800356f 	.word	0x0800356f
 8002ae8:	08003593 	.word	0x08003593

08002aec <_cleanup_r>:
 8002aec:	4901      	ldr	r1, [pc, #4]	; (8002af4 <_cleanup_r+0x8>)
 8002aee:	f000 b8af 	b.w	8002c50 <_fwalk_reent>
 8002af2:	bf00      	nop
 8002af4:	08002a2d 	.word	0x08002a2d

08002af8 <__sfmoreglue>:
 8002af8:	2268      	movs	r2, #104	; 0x68
 8002afa:	b570      	push	{r4, r5, r6, lr}
 8002afc:	1e4d      	subs	r5, r1, #1
 8002afe:	4355      	muls	r5, r2
 8002b00:	460e      	mov	r6, r1
 8002b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b06:	f000 f993 	bl	8002e30 <_malloc_r>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	b140      	cbz	r0, 8002b20 <__sfmoreglue+0x28>
 8002b0e:	2100      	movs	r1, #0
 8002b10:	e9c0 1600 	strd	r1, r6, [r0]
 8002b14:	300c      	adds	r0, #12
 8002b16:	60a0      	str	r0, [r4, #8]
 8002b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b1c:	f7ff fe24 	bl	8002768 <memset>
 8002b20:	4620      	mov	r0, r4
 8002b22:	bd70      	pop	{r4, r5, r6, pc}

08002b24 <__sfp_lock_acquire>:
 8002b24:	4801      	ldr	r0, [pc, #4]	; (8002b2c <__sfp_lock_acquire+0x8>)
 8002b26:	f000 b8b3 	b.w	8002c90 <__retarget_lock_acquire_recursive>
 8002b2a:	bf00      	nop
 8002b2c:	2000056d 	.word	0x2000056d

08002b30 <__sfp_lock_release>:
 8002b30:	4801      	ldr	r0, [pc, #4]	; (8002b38 <__sfp_lock_release+0x8>)
 8002b32:	f000 b8ae 	b.w	8002c92 <__retarget_lock_release_recursive>
 8002b36:	bf00      	nop
 8002b38:	2000056d 	.word	0x2000056d

08002b3c <__sinit_lock_acquire>:
 8002b3c:	4801      	ldr	r0, [pc, #4]	; (8002b44 <__sinit_lock_acquire+0x8>)
 8002b3e:	f000 b8a7 	b.w	8002c90 <__retarget_lock_acquire_recursive>
 8002b42:	bf00      	nop
 8002b44:	2000056e 	.word	0x2000056e

08002b48 <__sinit_lock_release>:
 8002b48:	4801      	ldr	r0, [pc, #4]	; (8002b50 <__sinit_lock_release+0x8>)
 8002b4a:	f000 b8a2 	b.w	8002c92 <__retarget_lock_release_recursive>
 8002b4e:	bf00      	nop
 8002b50:	2000056e 	.word	0x2000056e

08002b54 <__sinit>:
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	f7ff fff0 	bl	8002b3c <__sinit_lock_acquire>
 8002b5c:	69a3      	ldr	r3, [r4, #24]
 8002b5e:	b11b      	cbz	r3, 8002b68 <__sinit+0x14>
 8002b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b64:	f7ff bff0 	b.w	8002b48 <__sinit_lock_release>
 8002b68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b6c:	6523      	str	r3, [r4, #80]	; 0x50
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <__sinit+0x68>)
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <__sinit+0x6c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b76:	42a3      	cmp	r3, r4
 8002b78:	bf08      	it	eq
 8002b7a:	2301      	moveq	r3, #1
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	bf08      	it	eq
 8002b80:	61a3      	streq	r3, [r4, #24]
 8002b82:	f000 f81f 	bl	8002bc4 <__sfp>
 8002b86:	6060      	str	r0, [r4, #4]
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f000 f81b 	bl	8002bc4 <__sfp>
 8002b8e:	60a0      	str	r0, [r4, #8]
 8002b90:	4620      	mov	r0, r4
 8002b92:	f000 f817 	bl	8002bc4 <__sfp>
 8002b96:	2200      	movs	r2, #0
 8002b98:	2104      	movs	r1, #4
 8002b9a:	60e0      	str	r0, [r4, #12]
 8002b9c:	6860      	ldr	r0, [r4, #4]
 8002b9e:	f7ff ff81 	bl	8002aa4 <std>
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2109      	movs	r1, #9
 8002ba6:	68a0      	ldr	r0, [r4, #8]
 8002ba8:	f7ff ff7c 	bl	8002aa4 <std>
 8002bac:	2202      	movs	r2, #2
 8002bae:	2112      	movs	r1, #18
 8002bb0:	68e0      	ldr	r0, [r4, #12]
 8002bb2:	f7ff ff77 	bl	8002aa4 <std>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61a3      	str	r3, [r4, #24]
 8002bba:	e7d1      	b.n	8002b60 <__sinit+0xc>
 8002bbc:	0800376c 	.word	0x0800376c
 8002bc0:	08002aed 	.word	0x08002aed

08002bc4 <__sfp>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	4607      	mov	r7, r0
 8002bc8:	f7ff ffac 	bl	8002b24 <__sfp_lock_acquire>
 8002bcc:	4b1e      	ldr	r3, [pc, #120]	; (8002c48 <__sfp+0x84>)
 8002bce:	681e      	ldr	r6, [r3, #0]
 8002bd0:	69b3      	ldr	r3, [r6, #24]
 8002bd2:	b913      	cbnz	r3, 8002bda <__sfp+0x16>
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f7ff ffbd 	bl	8002b54 <__sinit>
 8002bda:	3648      	adds	r6, #72	; 0x48
 8002bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	d503      	bpl.n	8002bec <__sfp+0x28>
 8002be4:	6833      	ldr	r3, [r6, #0]
 8002be6:	b30b      	cbz	r3, 8002c2c <__sfp+0x68>
 8002be8:	6836      	ldr	r6, [r6, #0]
 8002bea:	e7f7      	b.n	8002bdc <__sfp+0x18>
 8002bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bf0:	b9d5      	cbnz	r5, 8002c28 <__sfp+0x64>
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <__sfp+0x88>)
 8002bf4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bf8:	60e3      	str	r3, [r4, #12]
 8002bfa:	6665      	str	r5, [r4, #100]	; 0x64
 8002bfc:	f000 f847 	bl	8002c8e <__retarget_lock_init_recursive>
 8002c00:	f7ff ff96 	bl	8002b30 <__sfp_lock_release>
 8002c04:	2208      	movs	r2, #8
 8002c06:	4629      	mov	r1, r5
 8002c08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c10:	6025      	str	r5, [r4, #0]
 8002c12:	61a5      	str	r5, [r4, #24]
 8002c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c18:	f7ff fda6 	bl	8002768 <memset>
 8002c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c24:	4620      	mov	r0, r4
 8002c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c28:	3468      	adds	r4, #104	; 0x68
 8002c2a:	e7d9      	b.n	8002be0 <__sfp+0x1c>
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	4638      	mov	r0, r7
 8002c30:	f7ff ff62 	bl	8002af8 <__sfmoreglue>
 8002c34:	4604      	mov	r4, r0
 8002c36:	6030      	str	r0, [r6, #0]
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d1d5      	bne.n	8002be8 <__sfp+0x24>
 8002c3c:	f7ff ff78 	bl	8002b30 <__sfp_lock_release>
 8002c40:	230c      	movs	r3, #12
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	e7ee      	b.n	8002c24 <__sfp+0x60>
 8002c46:	bf00      	nop
 8002c48:	0800376c 	.word	0x0800376c
 8002c4c:	ffff0001 	.word	0xffff0001

08002c50 <_fwalk_reent>:
 8002c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c54:	4606      	mov	r6, r0
 8002c56:	4688      	mov	r8, r1
 8002c58:	2700      	movs	r7, #0
 8002c5a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c62:	f1b9 0901 	subs.w	r9, r9, #1
 8002c66:	d505      	bpl.n	8002c74 <_fwalk_reent+0x24>
 8002c68:	6824      	ldr	r4, [r4, #0]
 8002c6a:	2c00      	cmp	r4, #0
 8002c6c:	d1f7      	bne.n	8002c5e <_fwalk_reent+0xe>
 8002c6e:	4638      	mov	r0, r7
 8002c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c74:	89ab      	ldrh	r3, [r5, #12]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d907      	bls.n	8002c8a <_fwalk_reent+0x3a>
 8002c7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	d003      	beq.n	8002c8a <_fwalk_reent+0x3a>
 8002c82:	4629      	mov	r1, r5
 8002c84:	4630      	mov	r0, r6
 8002c86:	47c0      	blx	r8
 8002c88:	4307      	orrs	r7, r0
 8002c8a:	3568      	adds	r5, #104	; 0x68
 8002c8c:	e7e9      	b.n	8002c62 <_fwalk_reent+0x12>

08002c8e <__retarget_lock_init_recursive>:
 8002c8e:	4770      	bx	lr

08002c90 <__retarget_lock_acquire_recursive>:
 8002c90:	4770      	bx	lr

08002c92 <__retarget_lock_release_recursive>:
 8002c92:	4770      	bx	lr

08002c94 <__swhatbuf_r>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	460e      	mov	r6, r1
 8002c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	2900      	cmp	r1, #0
 8002ca0:	461d      	mov	r5, r3
 8002ca2:	b096      	sub	sp, #88	; 0x58
 8002ca4:	da08      	bge.n	8002cb8 <__swhatbuf_r+0x24>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002cac:	602a      	str	r2, [r5, #0]
 8002cae:	061a      	lsls	r2, r3, #24
 8002cb0:	d410      	bmi.n	8002cd4 <__swhatbuf_r+0x40>
 8002cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb6:	e00e      	b.n	8002cd6 <__swhatbuf_r+0x42>
 8002cb8:	466a      	mov	r2, sp
 8002cba:	f000 fc91 	bl	80035e0 <_fstat_r>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	dbf1      	blt.n	8002ca6 <__swhatbuf_r+0x12>
 8002cc2:	9a01      	ldr	r2, [sp, #4]
 8002cc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ccc:	425a      	negs	r2, r3
 8002cce:	415a      	adcs	r2, r3
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	e7ee      	b.n	8002cb2 <__swhatbuf_r+0x1e>
 8002cd4:	2340      	movs	r3, #64	; 0x40
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	b016      	add	sp, #88	; 0x58
 8002cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ce0 <__smakebuf_r>:
 8002ce0:	898b      	ldrh	r3, [r1, #12]
 8002ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ce4:	079d      	lsls	r5, r3, #30
 8002ce6:	4606      	mov	r6, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	d507      	bpl.n	8002cfc <__smakebuf_r+0x1c>
 8002cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6163      	str	r3, [r4, #20]
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	466a      	mov	r2, sp
 8002cfe:	ab01      	add	r3, sp, #4
 8002d00:	f7ff ffc8 	bl	8002c94 <__swhatbuf_r>
 8002d04:	9900      	ldr	r1, [sp, #0]
 8002d06:	4605      	mov	r5, r0
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f000 f891 	bl	8002e30 <_malloc_r>
 8002d0e:	b948      	cbnz	r0, 8002d24 <__smakebuf_r+0x44>
 8002d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d14:	059a      	lsls	r2, r3, #22
 8002d16:	d4ef      	bmi.n	8002cf8 <__smakebuf_r+0x18>
 8002d18:	f023 0303 	bic.w	r3, r3, #3
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	81a3      	strh	r3, [r4, #12]
 8002d22:	e7e3      	b.n	8002cec <__smakebuf_r+0xc>
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <__smakebuf_r+0x7c>)
 8002d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	6020      	str	r0, [r4, #0]
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	9b00      	ldr	r3, [sp, #0]
 8002d34:	6120      	str	r0, [r4, #16]
 8002d36:	6163      	str	r3, [r4, #20]
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	b15b      	cbz	r3, 8002d54 <__smakebuf_r+0x74>
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d42:	f000 fc5f 	bl	8003604 <_isatty_r>
 8002d46:	b128      	cbz	r0, 8002d54 <__smakebuf_r+0x74>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	89a0      	ldrh	r0, [r4, #12]
 8002d56:	4305      	orrs	r5, r0
 8002d58:	81a5      	strh	r5, [r4, #12]
 8002d5a:	e7cd      	b.n	8002cf8 <__smakebuf_r+0x18>
 8002d5c:	08002aed 	.word	0x08002aed

08002d60 <_free_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4605      	mov	r5, r0
 8002d64:	2900      	cmp	r1, #0
 8002d66:	d040      	beq.n	8002dea <_free_r+0x8a>
 8002d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6c:	1f0c      	subs	r4, r1, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bfb8      	it	lt
 8002d72:	18e4      	addlt	r4, r4, r3
 8002d74:	f000 fc76 	bl	8003664 <__malloc_lock>
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <_free_r+0x8c>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	b933      	cbnz	r3, 8002d8c <_free_r+0x2c>
 8002d7e:	6063      	str	r3, [r4, #4]
 8002d80:	6014      	str	r4, [r2, #0]
 8002d82:	4628      	mov	r0, r5
 8002d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d88:	f000 bc72 	b.w	8003670 <__malloc_unlock>
 8002d8c:	42a3      	cmp	r3, r4
 8002d8e:	d908      	bls.n	8002da2 <_free_r+0x42>
 8002d90:	6820      	ldr	r0, [r4, #0]
 8002d92:	1821      	adds	r1, r4, r0
 8002d94:	428b      	cmp	r3, r1
 8002d96:	bf01      	itttt	eq
 8002d98:	6819      	ldreq	r1, [r3, #0]
 8002d9a:	685b      	ldreq	r3, [r3, #4]
 8002d9c:	1809      	addeq	r1, r1, r0
 8002d9e:	6021      	streq	r1, [r4, #0]
 8002da0:	e7ed      	b.n	8002d7e <_free_r+0x1e>
 8002da2:	461a      	mov	r2, r3
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b10b      	cbz	r3, 8002dac <_free_r+0x4c>
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	d9fa      	bls.n	8002da2 <_free_r+0x42>
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	1850      	adds	r0, r2, r1
 8002db0:	42a0      	cmp	r0, r4
 8002db2:	d10b      	bne.n	8002dcc <_free_r+0x6c>
 8002db4:	6820      	ldr	r0, [r4, #0]
 8002db6:	4401      	add	r1, r0
 8002db8:	1850      	adds	r0, r2, r1
 8002dba:	4283      	cmp	r3, r0
 8002dbc:	6011      	str	r1, [r2, #0]
 8002dbe:	d1e0      	bne.n	8002d82 <_free_r+0x22>
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4401      	add	r1, r0
 8002dc6:	6011      	str	r1, [r2, #0]
 8002dc8:	6053      	str	r3, [r2, #4]
 8002dca:	e7da      	b.n	8002d82 <_free_r+0x22>
 8002dcc:	d902      	bls.n	8002dd4 <_free_r+0x74>
 8002dce:	230c      	movs	r3, #12
 8002dd0:	602b      	str	r3, [r5, #0]
 8002dd2:	e7d6      	b.n	8002d82 <_free_r+0x22>
 8002dd4:	6820      	ldr	r0, [r4, #0]
 8002dd6:	1821      	adds	r1, r4, r0
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	bf01      	itttt	eq
 8002ddc:	6819      	ldreq	r1, [r3, #0]
 8002dde:	685b      	ldreq	r3, [r3, #4]
 8002de0:	1809      	addeq	r1, r1, r0
 8002de2:	6021      	streq	r1, [r4, #0]
 8002de4:	6063      	str	r3, [r4, #4]
 8002de6:	6054      	str	r4, [r2, #4]
 8002de8:	e7cb      	b.n	8002d82 <_free_r+0x22>
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	20000570 	.word	0x20000570

08002df0 <sbrk_aligned>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4e0e      	ldr	r6, [pc, #56]	; (8002e2c <sbrk_aligned+0x3c>)
 8002df4:	460c      	mov	r4, r1
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	4605      	mov	r5, r0
 8002dfa:	b911      	cbnz	r1, 8002e02 <sbrk_aligned+0x12>
 8002dfc:	f000 fb7a 	bl	80034f4 <_sbrk_r>
 8002e00:	6030      	str	r0, [r6, #0]
 8002e02:	4621      	mov	r1, r4
 8002e04:	4628      	mov	r0, r5
 8002e06:	f000 fb75 	bl	80034f4 <_sbrk_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	d00a      	beq.n	8002e24 <sbrk_aligned+0x34>
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d007      	beq.n	8002e28 <sbrk_aligned+0x38>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 fb6a 	bl	80034f4 <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d101      	bne.n	8002e28 <sbrk_aligned+0x38>
 8002e24:	f04f 34ff 	mov.w	r4, #4294967295
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	20000574 	.word	0x20000574

08002e30 <_malloc_r>:
 8002e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e34:	1ccd      	adds	r5, r1, #3
 8002e36:	f025 0503 	bic.w	r5, r5, #3
 8002e3a:	3508      	adds	r5, #8
 8002e3c:	2d0c      	cmp	r5, #12
 8002e3e:	bf38      	it	cc
 8002e40:	250c      	movcc	r5, #12
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	4607      	mov	r7, r0
 8002e46:	db01      	blt.n	8002e4c <_malloc_r+0x1c>
 8002e48:	42a9      	cmp	r1, r5
 8002e4a:	d905      	bls.n	8002e58 <_malloc_r+0x28>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	2600      	movs	r6, #0
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	4630      	mov	r0, r6
 8002e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e58:	4e2e      	ldr	r6, [pc, #184]	; (8002f14 <_malloc_r+0xe4>)
 8002e5a:	f000 fc03 	bl	8003664 <__malloc_lock>
 8002e5e:	6833      	ldr	r3, [r6, #0]
 8002e60:	461c      	mov	r4, r3
 8002e62:	bb34      	cbnz	r4, 8002eb2 <_malloc_r+0x82>
 8002e64:	4629      	mov	r1, r5
 8002e66:	4638      	mov	r0, r7
 8002e68:	f7ff ffc2 	bl	8002df0 <sbrk_aligned>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	4604      	mov	r4, r0
 8002e70:	d14d      	bne.n	8002f0e <_malloc_r+0xde>
 8002e72:	6834      	ldr	r4, [r6, #0]
 8002e74:	4626      	mov	r6, r4
 8002e76:	2e00      	cmp	r6, #0
 8002e78:	d140      	bne.n	8002efc <_malloc_r+0xcc>
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	4638      	mov	r0, r7
 8002e80:	eb04 0803 	add.w	r8, r4, r3
 8002e84:	f000 fb36 	bl	80034f4 <_sbrk_r>
 8002e88:	4580      	cmp	r8, r0
 8002e8a:	d13a      	bne.n	8002f02 <_malloc_r+0xd2>
 8002e8c:	6821      	ldr	r1, [r4, #0]
 8002e8e:	3503      	adds	r5, #3
 8002e90:	1a6d      	subs	r5, r5, r1
 8002e92:	f025 0503 	bic.w	r5, r5, #3
 8002e96:	3508      	adds	r5, #8
 8002e98:	2d0c      	cmp	r5, #12
 8002e9a:	bf38      	it	cc
 8002e9c:	250c      	movcc	r5, #12
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7ff ffa5 	bl	8002df0 <sbrk_aligned>
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d02b      	beq.n	8002f02 <_malloc_r+0xd2>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	442b      	add	r3, r5
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	e00e      	b.n	8002ed0 <_malloc_r+0xa0>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	1b52      	subs	r2, r2, r5
 8002eb6:	d41e      	bmi.n	8002ef6 <_malloc_r+0xc6>
 8002eb8:	2a0b      	cmp	r2, #11
 8002eba:	d916      	bls.n	8002eea <_malloc_r+0xba>
 8002ebc:	1961      	adds	r1, r4, r5
 8002ebe:	42a3      	cmp	r3, r4
 8002ec0:	6025      	str	r5, [r4, #0]
 8002ec2:	bf18      	it	ne
 8002ec4:	6059      	strne	r1, [r3, #4]
 8002ec6:	6863      	ldr	r3, [r4, #4]
 8002ec8:	bf08      	it	eq
 8002eca:	6031      	streq	r1, [r6, #0]
 8002ecc:	5162      	str	r2, [r4, r5]
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f104 060b 	add.w	r6, r4, #11
 8002ed6:	f000 fbcb 	bl	8003670 <__malloc_unlock>
 8002eda:	f026 0607 	bic.w	r6, r6, #7
 8002ede:	1d23      	adds	r3, r4, #4
 8002ee0:	1af2      	subs	r2, r6, r3
 8002ee2:	d0b6      	beq.n	8002e52 <_malloc_r+0x22>
 8002ee4:	1b9b      	subs	r3, r3, r6
 8002ee6:	50a3      	str	r3, [r4, r2]
 8002ee8:	e7b3      	b.n	8002e52 <_malloc_r+0x22>
 8002eea:	6862      	ldr	r2, [r4, #4]
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	bf0c      	ite	eq
 8002ef0:	6032      	streq	r2, [r6, #0]
 8002ef2:	605a      	strne	r2, [r3, #4]
 8002ef4:	e7ec      	b.n	8002ed0 <_malloc_r+0xa0>
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	6864      	ldr	r4, [r4, #4]
 8002efa:	e7b2      	b.n	8002e62 <_malloc_r+0x32>
 8002efc:	4634      	mov	r4, r6
 8002efe:	6876      	ldr	r6, [r6, #4]
 8002f00:	e7b9      	b.n	8002e76 <_malloc_r+0x46>
 8002f02:	230c      	movs	r3, #12
 8002f04:	4638      	mov	r0, r7
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	f000 fbb2 	bl	8003670 <__malloc_unlock>
 8002f0c:	e7a1      	b.n	8002e52 <_malloc_r+0x22>
 8002f0e:	6025      	str	r5, [r4, #0]
 8002f10:	e7de      	b.n	8002ed0 <_malloc_r+0xa0>
 8002f12:	bf00      	nop
 8002f14:	20000570 	.word	0x20000570

08002f18 <__sfputc_r>:
 8002f18:	6893      	ldr	r3, [r2, #8]
 8002f1a:	b410      	push	{r4}
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	6093      	str	r3, [r2, #8]
 8002f22:	da07      	bge.n	8002f34 <__sfputc_r+0x1c>
 8002f24:	6994      	ldr	r4, [r2, #24]
 8002f26:	42a3      	cmp	r3, r4
 8002f28:	db01      	blt.n	8002f2e <__sfputc_r+0x16>
 8002f2a:	290a      	cmp	r1, #10
 8002f2c:	d102      	bne.n	8002f34 <__sfputc_r+0x1c>
 8002f2e:	bc10      	pop	{r4}
 8002f30:	f7ff bc3a 	b.w	80027a8 <__swbuf_r>
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	1c58      	adds	r0, r3, #1
 8002f38:	6010      	str	r0, [r2, #0]
 8002f3a:	7019      	strb	r1, [r3, #0]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	bc10      	pop	{r4}
 8002f40:	4770      	bx	lr

08002f42 <__sfputs_r>:
 8002f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f44:	4606      	mov	r6, r0
 8002f46:	460f      	mov	r7, r1
 8002f48:	4614      	mov	r4, r2
 8002f4a:	18d5      	adds	r5, r2, r3
 8002f4c:	42ac      	cmp	r4, r5
 8002f4e:	d101      	bne.n	8002f54 <__sfputs_r+0x12>
 8002f50:	2000      	movs	r0, #0
 8002f52:	e007      	b.n	8002f64 <__sfputs_r+0x22>
 8002f54:	463a      	mov	r2, r7
 8002f56:	4630      	mov	r0, r6
 8002f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f5c:	f7ff ffdc 	bl	8002f18 <__sfputc_r>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d1f3      	bne.n	8002f4c <__sfputs_r+0xa>
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f68 <_vfiprintf_r>:
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	4614      	mov	r4, r2
 8002f70:	4698      	mov	r8, r3
 8002f72:	4606      	mov	r6, r0
 8002f74:	b09d      	sub	sp, #116	; 0x74
 8002f76:	b118      	cbz	r0, 8002f80 <_vfiprintf_r+0x18>
 8002f78:	6983      	ldr	r3, [r0, #24]
 8002f7a:	b90b      	cbnz	r3, 8002f80 <_vfiprintf_r+0x18>
 8002f7c:	f7ff fdea 	bl	8002b54 <__sinit>
 8002f80:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <_vfiprintf_r+0x240>)
 8002f82:	429d      	cmp	r5, r3
 8002f84:	d11b      	bne.n	8002fbe <_vfiprintf_r+0x56>
 8002f86:	6875      	ldr	r5, [r6, #4]
 8002f88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f8a:	07d9      	lsls	r1, r3, #31
 8002f8c:	d405      	bmi.n	8002f9a <_vfiprintf_r+0x32>
 8002f8e:	89ab      	ldrh	r3, [r5, #12]
 8002f90:	059a      	lsls	r2, r3, #22
 8002f92:	d402      	bmi.n	8002f9a <_vfiprintf_r+0x32>
 8002f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f96:	f7ff fe7b 	bl	8002c90 <__retarget_lock_acquire_recursive>
 8002f9a:	89ab      	ldrh	r3, [r5, #12]
 8002f9c:	071b      	lsls	r3, r3, #28
 8002f9e:	d501      	bpl.n	8002fa4 <_vfiprintf_r+0x3c>
 8002fa0:	692b      	ldr	r3, [r5, #16]
 8002fa2:	b9eb      	cbnz	r3, 8002fe0 <_vfiprintf_r+0x78>
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	f7ff fc50 	bl	800284c <__swsetup_r>
 8002fac:	b1c0      	cbz	r0, 8002fe0 <_vfiprintf_r+0x78>
 8002fae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fb0:	07dc      	lsls	r4, r3, #31
 8002fb2:	d50e      	bpl.n	8002fd2 <_vfiprintf_r+0x6a>
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	b01d      	add	sp, #116	; 0x74
 8002fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fbe:	4b7b      	ldr	r3, [pc, #492]	; (80031ac <_vfiprintf_r+0x244>)
 8002fc0:	429d      	cmp	r5, r3
 8002fc2:	d101      	bne.n	8002fc8 <_vfiprintf_r+0x60>
 8002fc4:	68b5      	ldr	r5, [r6, #8]
 8002fc6:	e7df      	b.n	8002f88 <_vfiprintf_r+0x20>
 8002fc8:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <_vfiprintf_r+0x248>)
 8002fca:	429d      	cmp	r5, r3
 8002fcc:	bf08      	it	eq
 8002fce:	68f5      	ldreq	r5, [r6, #12]
 8002fd0:	e7da      	b.n	8002f88 <_vfiprintf_r+0x20>
 8002fd2:	89ab      	ldrh	r3, [r5, #12]
 8002fd4:	0598      	lsls	r0, r3, #22
 8002fd6:	d4ed      	bmi.n	8002fb4 <_vfiprintf_r+0x4c>
 8002fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fda:	f7ff fe5a 	bl	8002c92 <__retarget_lock_release_recursive>
 8002fde:	e7e9      	b.n	8002fb4 <_vfiprintf_r+0x4c>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fea:	2330      	movs	r3, #48	; 0x30
 8002fec:	f04f 0901 	mov.w	r9, #1
 8002ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80031b4 <_vfiprintf_r+0x24c>
 8002ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	469a      	mov	sl, r3
 8003000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003004:	b10a      	cbz	r2, 800300a <_vfiprintf_r+0xa2>
 8003006:	2a25      	cmp	r2, #37	; 0x25
 8003008:	d1f9      	bne.n	8002ffe <_vfiprintf_r+0x96>
 800300a:	ebba 0b04 	subs.w	fp, sl, r4
 800300e:	d00b      	beq.n	8003028 <_vfiprintf_r+0xc0>
 8003010:	465b      	mov	r3, fp
 8003012:	4622      	mov	r2, r4
 8003014:	4629      	mov	r1, r5
 8003016:	4630      	mov	r0, r6
 8003018:	f7ff ff93 	bl	8002f42 <__sfputs_r>
 800301c:	3001      	adds	r0, #1
 800301e:	f000 80aa 	beq.w	8003176 <_vfiprintf_r+0x20e>
 8003022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003024:	445a      	add	r2, fp
 8003026:	9209      	str	r2, [sp, #36]	; 0x24
 8003028:	f89a 3000 	ldrb.w	r3, [sl]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a2 	beq.w	8003176 <_vfiprintf_r+0x20e>
 8003032:	2300      	movs	r3, #0
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800303c:	f10a 0a01 	add.w	sl, sl, #1
 8003040:	9304      	str	r3, [sp, #16]
 8003042:	9307      	str	r3, [sp, #28]
 8003044:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003048:	931a      	str	r3, [sp, #104]	; 0x68
 800304a:	4654      	mov	r4, sl
 800304c:	2205      	movs	r2, #5
 800304e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003052:	4858      	ldr	r0, [pc, #352]	; (80031b4 <_vfiprintf_r+0x24c>)
 8003054:	f000 faf8 	bl	8003648 <memchr>
 8003058:	9a04      	ldr	r2, [sp, #16]
 800305a:	b9d8      	cbnz	r0, 8003094 <_vfiprintf_r+0x12c>
 800305c:	06d1      	lsls	r1, r2, #27
 800305e:	bf44      	itt	mi
 8003060:	2320      	movmi	r3, #32
 8003062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003066:	0713      	lsls	r3, r2, #28
 8003068:	bf44      	itt	mi
 800306a:	232b      	movmi	r3, #43	; 0x2b
 800306c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003070:	f89a 3000 	ldrb.w	r3, [sl]
 8003074:	2b2a      	cmp	r3, #42	; 0x2a
 8003076:	d015      	beq.n	80030a4 <_vfiprintf_r+0x13c>
 8003078:	4654      	mov	r4, sl
 800307a:	2000      	movs	r0, #0
 800307c:	f04f 0c0a 	mov.w	ip, #10
 8003080:	9a07      	ldr	r2, [sp, #28]
 8003082:	4621      	mov	r1, r4
 8003084:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003088:	3b30      	subs	r3, #48	; 0x30
 800308a:	2b09      	cmp	r3, #9
 800308c:	d94e      	bls.n	800312c <_vfiprintf_r+0x1c4>
 800308e:	b1b0      	cbz	r0, 80030be <_vfiprintf_r+0x156>
 8003090:	9207      	str	r2, [sp, #28]
 8003092:	e014      	b.n	80030be <_vfiprintf_r+0x156>
 8003094:	eba0 0308 	sub.w	r3, r0, r8
 8003098:	fa09 f303 	lsl.w	r3, r9, r3
 800309c:	4313      	orrs	r3, r2
 800309e:	46a2      	mov	sl, r4
 80030a0:	9304      	str	r3, [sp, #16]
 80030a2:	e7d2      	b.n	800304a <_vfiprintf_r+0xe2>
 80030a4:	9b03      	ldr	r3, [sp, #12]
 80030a6:	1d19      	adds	r1, r3, #4
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	9103      	str	r1, [sp, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bfbb      	ittet	lt
 80030b0:	425b      	neglt	r3, r3
 80030b2:	f042 0202 	orrlt.w	r2, r2, #2
 80030b6:	9307      	strge	r3, [sp, #28]
 80030b8:	9307      	strlt	r3, [sp, #28]
 80030ba:	bfb8      	it	lt
 80030bc:	9204      	strlt	r2, [sp, #16]
 80030be:	7823      	ldrb	r3, [r4, #0]
 80030c0:	2b2e      	cmp	r3, #46	; 0x2e
 80030c2:	d10c      	bne.n	80030de <_vfiprintf_r+0x176>
 80030c4:	7863      	ldrb	r3, [r4, #1]
 80030c6:	2b2a      	cmp	r3, #42	; 0x2a
 80030c8:	d135      	bne.n	8003136 <_vfiprintf_r+0x1ce>
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	3402      	adds	r4, #2
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	9203      	str	r2, [sp, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bfb8      	it	lt
 80030d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80030dc:	9305      	str	r3, [sp, #20]
 80030de:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80031b8 <_vfiprintf_r+0x250>
 80030e2:	2203      	movs	r2, #3
 80030e4:	4650      	mov	r0, sl
 80030e6:	7821      	ldrb	r1, [r4, #0]
 80030e8:	f000 faae 	bl	8003648 <memchr>
 80030ec:	b140      	cbz	r0, 8003100 <_vfiprintf_r+0x198>
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	eba0 000a 	sub.w	r0, r0, sl
 80030f4:	fa03 f000 	lsl.w	r0, r3, r0
 80030f8:	9b04      	ldr	r3, [sp, #16]
 80030fa:	3401      	adds	r4, #1
 80030fc:	4303      	orrs	r3, r0
 80030fe:	9304      	str	r3, [sp, #16]
 8003100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003104:	2206      	movs	r2, #6
 8003106:	482d      	ldr	r0, [pc, #180]	; (80031bc <_vfiprintf_r+0x254>)
 8003108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800310c:	f000 fa9c 	bl	8003648 <memchr>
 8003110:	2800      	cmp	r0, #0
 8003112:	d03f      	beq.n	8003194 <_vfiprintf_r+0x22c>
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <_vfiprintf_r+0x258>)
 8003116:	bb1b      	cbnz	r3, 8003160 <_vfiprintf_r+0x1f8>
 8003118:	9b03      	ldr	r3, [sp, #12]
 800311a:	3307      	adds	r3, #7
 800311c:	f023 0307 	bic.w	r3, r3, #7
 8003120:	3308      	adds	r3, #8
 8003122:	9303      	str	r3, [sp, #12]
 8003124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003126:	443b      	add	r3, r7
 8003128:	9309      	str	r3, [sp, #36]	; 0x24
 800312a:	e767      	b.n	8002ffc <_vfiprintf_r+0x94>
 800312c:	460c      	mov	r4, r1
 800312e:	2001      	movs	r0, #1
 8003130:	fb0c 3202 	mla	r2, ip, r2, r3
 8003134:	e7a5      	b.n	8003082 <_vfiprintf_r+0x11a>
 8003136:	2300      	movs	r3, #0
 8003138:	f04f 0c0a 	mov.w	ip, #10
 800313c:	4619      	mov	r1, r3
 800313e:	3401      	adds	r4, #1
 8003140:	9305      	str	r3, [sp, #20]
 8003142:	4620      	mov	r0, r4
 8003144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003148:	3a30      	subs	r2, #48	; 0x30
 800314a:	2a09      	cmp	r2, #9
 800314c:	d903      	bls.n	8003156 <_vfiprintf_r+0x1ee>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0c5      	beq.n	80030de <_vfiprintf_r+0x176>
 8003152:	9105      	str	r1, [sp, #20]
 8003154:	e7c3      	b.n	80030de <_vfiprintf_r+0x176>
 8003156:	4604      	mov	r4, r0
 8003158:	2301      	movs	r3, #1
 800315a:	fb0c 2101 	mla	r1, ip, r1, r2
 800315e:	e7f0      	b.n	8003142 <_vfiprintf_r+0x1da>
 8003160:	ab03      	add	r3, sp, #12
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	462a      	mov	r2, r5
 8003166:	4630      	mov	r0, r6
 8003168:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <_vfiprintf_r+0x25c>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	f3af 8000 	nop.w
 8003170:	4607      	mov	r7, r0
 8003172:	1c78      	adds	r0, r7, #1
 8003174:	d1d6      	bne.n	8003124 <_vfiprintf_r+0x1bc>
 8003176:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003178:	07d9      	lsls	r1, r3, #31
 800317a:	d405      	bmi.n	8003188 <_vfiprintf_r+0x220>
 800317c:	89ab      	ldrh	r3, [r5, #12]
 800317e:	059a      	lsls	r2, r3, #22
 8003180:	d402      	bmi.n	8003188 <_vfiprintf_r+0x220>
 8003182:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003184:	f7ff fd85 	bl	8002c92 <__retarget_lock_release_recursive>
 8003188:	89ab      	ldrh	r3, [r5, #12]
 800318a:	065b      	lsls	r3, r3, #25
 800318c:	f53f af12 	bmi.w	8002fb4 <_vfiprintf_r+0x4c>
 8003190:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003192:	e711      	b.n	8002fb8 <_vfiprintf_r+0x50>
 8003194:	ab03      	add	r3, sp, #12
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	462a      	mov	r2, r5
 800319a:	4630      	mov	r0, r6
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <_vfiprintf_r+0x25c>)
 800319e:	a904      	add	r1, sp, #16
 80031a0:	f000 f882 	bl	80032a8 <_printf_i>
 80031a4:	e7e4      	b.n	8003170 <_vfiprintf_r+0x208>
 80031a6:	bf00      	nop
 80031a8:	08003790 	.word	0x08003790
 80031ac:	080037b0 	.word	0x080037b0
 80031b0:	08003770 	.word	0x08003770
 80031b4:	080037d0 	.word	0x080037d0
 80031b8:	080037d6 	.word	0x080037d6
 80031bc:	080037da 	.word	0x080037da
 80031c0:	00000000 	.word	0x00000000
 80031c4:	08002f43 	.word	0x08002f43

080031c8 <_printf_common>:
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	4616      	mov	r6, r2
 80031ce:	4699      	mov	r9, r3
 80031d0:	688a      	ldr	r2, [r1, #8]
 80031d2:	690b      	ldr	r3, [r1, #16]
 80031d4:	4607      	mov	r7, r0
 80031d6:	4293      	cmp	r3, r2
 80031d8:	bfb8      	it	lt
 80031da:	4613      	movlt	r3, r2
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031e2:	460c      	mov	r4, r1
 80031e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031e8:	b10a      	cbz	r2, 80031ee <_printf_common+0x26>
 80031ea:	3301      	adds	r3, #1
 80031ec:	6033      	str	r3, [r6, #0]
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	0699      	lsls	r1, r3, #26
 80031f2:	bf42      	ittt	mi
 80031f4:	6833      	ldrmi	r3, [r6, #0]
 80031f6:	3302      	addmi	r3, #2
 80031f8:	6033      	strmi	r3, [r6, #0]
 80031fa:	6825      	ldr	r5, [r4, #0]
 80031fc:	f015 0506 	ands.w	r5, r5, #6
 8003200:	d106      	bne.n	8003210 <_printf_common+0x48>
 8003202:	f104 0a19 	add.w	sl, r4, #25
 8003206:	68e3      	ldr	r3, [r4, #12]
 8003208:	6832      	ldr	r2, [r6, #0]
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	42ab      	cmp	r3, r5
 800320e:	dc28      	bgt.n	8003262 <_printf_common+0x9a>
 8003210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003214:	1e13      	subs	r3, r2, #0
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	bf18      	it	ne
 800321a:	2301      	movne	r3, #1
 800321c:	0692      	lsls	r2, r2, #26
 800321e:	d42d      	bmi.n	800327c <_printf_common+0xb4>
 8003220:	4649      	mov	r1, r9
 8003222:	4638      	mov	r0, r7
 8003224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003228:	47c0      	blx	r8
 800322a:	3001      	adds	r0, #1
 800322c:	d020      	beq.n	8003270 <_printf_common+0xa8>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	68e5      	ldr	r5, [r4, #12]
 8003232:	f003 0306 	and.w	r3, r3, #6
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf18      	it	ne
 800323a:	2500      	movne	r5, #0
 800323c:	6832      	ldr	r2, [r6, #0]
 800323e:	f04f 0600 	mov.w	r6, #0
 8003242:	68a3      	ldr	r3, [r4, #8]
 8003244:	bf08      	it	eq
 8003246:	1aad      	subeq	r5, r5, r2
 8003248:	6922      	ldr	r2, [r4, #16]
 800324a:	bf08      	it	eq
 800324c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003250:	4293      	cmp	r3, r2
 8003252:	bfc4      	itt	gt
 8003254:	1a9b      	subgt	r3, r3, r2
 8003256:	18ed      	addgt	r5, r5, r3
 8003258:	341a      	adds	r4, #26
 800325a:	42b5      	cmp	r5, r6
 800325c:	d11a      	bne.n	8003294 <_printf_common+0xcc>
 800325e:	2000      	movs	r0, #0
 8003260:	e008      	b.n	8003274 <_printf_common+0xac>
 8003262:	2301      	movs	r3, #1
 8003264:	4652      	mov	r2, sl
 8003266:	4649      	mov	r1, r9
 8003268:	4638      	mov	r0, r7
 800326a:	47c0      	blx	r8
 800326c:	3001      	adds	r0, #1
 800326e:	d103      	bne.n	8003278 <_printf_common+0xb0>
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003278:	3501      	adds	r5, #1
 800327a:	e7c4      	b.n	8003206 <_printf_common+0x3e>
 800327c:	2030      	movs	r0, #48	; 0x30
 800327e:	18e1      	adds	r1, r4, r3
 8003280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800328a:	4422      	add	r2, r4
 800328c:	3302      	adds	r3, #2
 800328e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003292:	e7c5      	b.n	8003220 <_printf_common+0x58>
 8003294:	2301      	movs	r3, #1
 8003296:	4622      	mov	r2, r4
 8003298:	4649      	mov	r1, r9
 800329a:	4638      	mov	r0, r7
 800329c:	47c0      	blx	r8
 800329e:	3001      	adds	r0, #1
 80032a0:	d0e6      	beq.n	8003270 <_printf_common+0xa8>
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7d9      	b.n	800325a <_printf_common+0x92>
	...

080032a8 <_printf_i>:
 80032a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ac:	7e0f      	ldrb	r7, [r1, #24]
 80032ae:	4691      	mov	r9, r2
 80032b0:	2f78      	cmp	r7, #120	; 0x78
 80032b2:	4680      	mov	r8, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	469a      	mov	sl, r3
 80032b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032be:	d807      	bhi.n	80032d0 <_printf_i+0x28>
 80032c0:	2f62      	cmp	r7, #98	; 0x62
 80032c2:	d80a      	bhi.n	80032da <_printf_i+0x32>
 80032c4:	2f00      	cmp	r7, #0
 80032c6:	f000 80d9 	beq.w	800347c <_printf_i+0x1d4>
 80032ca:	2f58      	cmp	r7, #88	; 0x58
 80032cc:	f000 80a4 	beq.w	8003418 <_printf_i+0x170>
 80032d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032d8:	e03a      	b.n	8003350 <_printf_i+0xa8>
 80032da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032de:	2b15      	cmp	r3, #21
 80032e0:	d8f6      	bhi.n	80032d0 <_printf_i+0x28>
 80032e2:	a101      	add	r1, pc, #4	; (adr r1, 80032e8 <_printf_i+0x40>)
 80032e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003355 	.word	0x08003355
 80032f0:	080032d1 	.word	0x080032d1
 80032f4:	080032d1 	.word	0x080032d1
 80032f8:	080032d1 	.word	0x080032d1
 80032fc:	080032d1 	.word	0x080032d1
 8003300:	08003355 	.word	0x08003355
 8003304:	080032d1 	.word	0x080032d1
 8003308:	080032d1 	.word	0x080032d1
 800330c:	080032d1 	.word	0x080032d1
 8003310:	080032d1 	.word	0x080032d1
 8003314:	08003463 	.word	0x08003463
 8003318:	08003385 	.word	0x08003385
 800331c:	08003445 	.word	0x08003445
 8003320:	080032d1 	.word	0x080032d1
 8003324:	080032d1 	.word	0x080032d1
 8003328:	08003485 	.word	0x08003485
 800332c:	080032d1 	.word	0x080032d1
 8003330:	08003385 	.word	0x08003385
 8003334:	080032d1 	.word	0x080032d1
 8003338:	080032d1 	.word	0x080032d1
 800333c:	0800344d 	.word	0x0800344d
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	1d1a      	adds	r2, r3, #4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	602a      	str	r2, [r5, #0]
 8003348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800334c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003350:	2301      	movs	r3, #1
 8003352:	e0a4      	b.n	800349e <_printf_i+0x1f6>
 8003354:	6820      	ldr	r0, [r4, #0]
 8003356:	6829      	ldr	r1, [r5, #0]
 8003358:	0606      	lsls	r6, r0, #24
 800335a:	f101 0304 	add.w	r3, r1, #4
 800335e:	d50a      	bpl.n	8003376 <_printf_i+0xce>
 8003360:	680e      	ldr	r6, [r1, #0]
 8003362:	602b      	str	r3, [r5, #0]
 8003364:	2e00      	cmp	r6, #0
 8003366:	da03      	bge.n	8003370 <_printf_i+0xc8>
 8003368:	232d      	movs	r3, #45	; 0x2d
 800336a:	4276      	negs	r6, r6
 800336c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003370:	230a      	movs	r3, #10
 8003372:	485e      	ldr	r0, [pc, #376]	; (80034ec <_printf_i+0x244>)
 8003374:	e019      	b.n	80033aa <_printf_i+0x102>
 8003376:	680e      	ldr	r6, [r1, #0]
 8003378:	f010 0f40 	tst.w	r0, #64	; 0x40
 800337c:	602b      	str	r3, [r5, #0]
 800337e:	bf18      	it	ne
 8003380:	b236      	sxthne	r6, r6
 8003382:	e7ef      	b.n	8003364 <_printf_i+0xbc>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	1d19      	adds	r1, r3, #4
 800338a:	6029      	str	r1, [r5, #0]
 800338c:	0601      	lsls	r1, r0, #24
 800338e:	d501      	bpl.n	8003394 <_printf_i+0xec>
 8003390:	681e      	ldr	r6, [r3, #0]
 8003392:	e002      	b.n	800339a <_printf_i+0xf2>
 8003394:	0646      	lsls	r6, r0, #25
 8003396:	d5fb      	bpl.n	8003390 <_printf_i+0xe8>
 8003398:	881e      	ldrh	r6, [r3, #0]
 800339a:	2f6f      	cmp	r7, #111	; 0x6f
 800339c:	bf0c      	ite	eq
 800339e:	2308      	moveq	r3, #8
 80033a0:	230a      	movne	r3, #10
 80033a2:	4852      	ldr	r0, [pc, #328]	; (80034ec <_printf_i+0x244>)
 80033a4:	2100      	movs	r1, #0
 80033a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033aa:	6865      	ldr	r5, [r4, #4]
 80033ac:	2d00      	cmp	r5, #0
 80033ae:	bfa8      	it	ge
 80033b0:	6821      	ldrge	r1, [r4, #0]
 80033b2:	60a5      	str	r5, [r4, #8]
 80033b4:	bfa4      	itt	ge
 80033b6:	f021 0104 	bicge.w	r1, r1, #4
 80033ba:	6021      	strge	r1, [r4, #0]
 80033bc:	b90e      	cbnz	r6, 80033c2 <_printf_i+0x11a>
 80033be:	2d00      	cmp	r5, #0
 80033c0:	d04d      	beq.n	800345e <_printf_i+0x1b6>
 80033c2:	4615      	mov	r5, r2
 80033c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80033c8:	fb03 6711 	mls	r7, r3, r1, r6
 80033cc:	5dc7      	ldrb	r7, [r0, r7]
 80033ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033d2:	4637      	mov	r7, r6
 80033d4:	42bb      	cmp	r3, r7
 80033d6:	460e      	mov	r6, r1
 80033d8:	d9f4      	bls.n	80033c4 <_printf_i+0x11c>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d10b      	bne.n	80033f6 <_printf_i+0x14e>
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	07de      	lsls	r6, r3, #31
 80033e2:	d508      	bpl.n	80033f6 <_printf_i+0x14e>
 80033e4:	6923      	ldr	r3, [r4, #16]
 80033e6:	6861      	ldr	r1, [r4, #4]
 80033e8:	4299      	cmp	r1, r3
 80033ea:	bfde      	ittt	le
 80033ec:	2330      	movle	r3, #48	; 0x30
 80033ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033f6:	1b52      	subs	r2, r2, r5
 80033f8:	6122      	str	r2, [r4, #16]
 80033fa:	464b      	mov	r3, r9
 80033fc:	4621      	mov	r1, r4
 80033fe:	4640      	mov	r0, r8
 8003400:	f8cd a000 	str.w	sl, [sp]
 8003404:	aa03      	add	r2, sp, #12
 8003406:	f7ff fedf 	bl	80031c8 <_printf_common>
 800340a:	3001      	adds	r0, #1
 800340c:	d14c      	bne.n	80034a8 <_printf_i+0x200>
 800340e:	f04f 30ff 	mov.w	r0, #4294967295
 8003412:	b004      	add	sp, #16
 8003414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003418:	4834      	ldr	r0, [pc, #208]	; (80034ec <_printf_i+0x244>)
 800341a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800341e:	6829      	ldr	r1, [r5, #0]
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	f851 6b04 	ldr.w	r6, [r1], #4
 8003426:	6029      	str	r1, [r5, #0]
 8003428:	061d      	lsls	r5, r3, #24
 800342a:	d514      	bpl.n	8003456 <_printf_i+0x1ae>
 800342c:	07df      	lsls	r7, r3, #31
 800342e:	bf44      	itt	mi
 8003430:	f043 0320 	orrmi.w	r3, r3, #32
 8003434:	6023      	strmi	r3, [r4, #0]
 8003436:	b91e      	cbnz	r6, 8003440 <_printf_i+0x198>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	f023 0320 	bic.w	r3, r3, #32
 800343e:	6023      	str	r3, [r4, #0]
 8003440:	2310      	movs	r3, #16
 8003442:	e7af      	b.n	80033a4 <_printf_i+0xfc>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	f043 0320 	orr.w	r3, r3, #32
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	2378      	movs	r3, #120	; 0x78
 800344e:	4828      	ldr	r0, [pc, #160]	; (80034f0 <_printf_i+0x248>)
 8003450:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003454:	e7e3      	b.n	800341e <_printf_i+0x176>
 8003456:	0659      	lsls	r1, r3, #25
 8003458:	bf48      	it	mi
 800345a:	b2b6      	uxthmi	r6, r6
 800345c:	e7e6      	b.n	800342c <_printf_i+0x184>
 800345e:	4615      	mov	r5, r2
 8003460:	e7bb      	b.n	80033da <_printf_i+0x132>
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	6826      	ldr	r6, [r4, #0]
 8003466:	1d18      	adds	r0, r3, #4
 8003468:	6961      	ldr	r1, [r4, #20]
 800346a:	6028      	str	r0, [r5, #0]
 800346c:	0635      	lsls	r5, r6, #24
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	d501      	bpl.n	8003476 <_printf_i+0x1ce>
 8003472:	6019      	str	r1, [r3, #0]
 8003474:	e002      	b.n	800347c <_printf_i+0x1d4>
 8003476:	0670      	lsls	r0, r6, #25
 8003478:	d5fb      	bpl.n	8003472 <_printf_i+0x1ca>
 800347a:	8019      	strh	r1, [r3, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	4615      	mov	r5, r2
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	e7ba      	b.n	80033fa <_printf_i+0x152>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	2100      	movs	r1, #0
 8003488:	1d1a      	adds	r2, r3, #4
 800348a:	602a      	str	r2, [r5, #0]
 800348c:	681d      	ldr	r5, [r3, #0]
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f8d9 	bl	8003648 <memchr>
 8003496:	b108      	cbz	r0, 800349c <_printf_i+0x1f4>
 8003498:	1b40      	subs	r0, r0, r5
 800349a:	6060      	str	r0, [r4, #4]
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	6123      	str	r3, [r4, #16]
 80034a0:	2300      	movs	r3, #0
 80034a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034a6:	e7a8      	b.n	80033fa <_printf_i+0x152>
 80034a8:	462a      	mov	r2, r5
 80034aa:	4649      	mov	r1, r9
 80034ac:	4640      	mov	r0, r8
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	47d0      	blx	sl
 80034b2:	3001      	adds	r0, #1
 80034b4:	d0ab      	beq.n	800340e <_printf_i+0x166>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	079b      	lsls	r3, r3, #30
 80034ba:	d413      	bmi.n	80034e4 <_printf_i+0x23c>
 80034bc:	68e0      	ldr	r0, [r4, #12]
 80034be:	9b03      	ldr	r3, [sp, #12]
 80034c0:	4298      	cmp	r0, r3
 80034c2:	bfb8      	it	lt
 80034c4:	4618      	movlt	r0, r3
 80034c6:	e7a4      	b.n	8003412 <_printf_i+0x16a>
 80034c8:	2301      	movs	r3, #1
 80034ca:	4632      	mov	r2, r6
 80034cc:	4649      	mov	r1, r9
 80034ce:	4640      	mov	r0, r8
 80034d0:	47d0      	blx	sl
 80034d2:	3001      	adds	r0, #1
 80034d4:	d09b      	beq.n	800340e <_printf_i+0x166>
 80034d6:	3501      	adds	r5, #1
 80034d8:	68e3      	ldr	r3, [r4, #12]
 80034da:	9903      	ldr	r1, [sp, #12]
 80034dc:	1a5b      	subs	r3, r3, r1
 80034de:	42ab      	cmp	r3, r5
 80034e0:	dcf2      	bgt.n	80034c8 <_printf_i+0x220>
 80034e2:	e7eb      	b.n	80034bc <_printf_i+0x214>
 80034e4:	2500      	movs	r5, #0
 80034e6:	f104 0619 	add.w	r6, r4, #25
 80034ea:	e7f5      	b.n	80034d8 <_printf_i+0x230>
 80034ec:	080037e1 	.word	0x080037e1
 80034f0:	080037f2 	.word	0x080037f2

080034f4 <_sbrk_r>:
 80034f4:	b538      	push	{r3, r4, r5, lr}
 80034f6:	2300      	movs	r3, #0
 80034f8:	4d05      	ldr	r5, [pc, #20]	; (8003510 <_sbrk_r+0x1c>)
 80034fa:	4604      	mov	r4, r0
 80034fc:	4608      	mov	r0, r1
 80034fe:	602b      	str	r3, [r5, #0]
 8003500:	f7fd f84c 	bl	800059c <_sbrk>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d102      	bne.n	800350e <_sbrk_r+0x1a>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	b103      	cbz	r3, 800350e <_sbrk_r+0x1a>
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	20000578 	.word	0x20000578

08003514 <__sread>:
 8003514:	b510      	push	{r4, lr}
 8003516:	460c      	mov	r4, r1
 8003518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351c:	f000 f8ae 	bl	800367c <_read_r>
 8003520:	2800      	cmp	r0, #0
 8003522:	bfab      	itete	ge
 8003524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003526:	89a3      	ldrhlt	r3, [r4, #12]
 8003528:	181b      	addge	r3, r3, r0
 800352a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800352e:	bfac      	ite	ge
 8003530:	6563      	strge	r3, [r4, #84]	; 0x54
 8003532:	81a3      	strhlt	r3, [r4, #12]
 8003534:	bd10      	pop	{r4, pc}

08003536 <__swrite>:
 8003536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800353a:	461f      	mov	r7, r3
 800353c:	898b      	ldrh	r3, [r1, #12]
 800353e:	4605      	mov	r5, r0
 8003540:	05db      	lsls	r3, r3, #23
 8003542:	460c      	mov	r4, r1
 8003544:	4616      	mov	r6, r2
 8003546:	d505      	bpl.n	8003554 <__swrite+0x1e>
 8003548:	2302      	movs	r3, #2
 800354a:	2200      	movs	r2, #0
 800354c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003550:	f000 f868 	bl	8003624 <_lseek_r>
 8003554:	89a3      	ldrh	r3, [r4, #12]
 8003556:	4632      	mov	r2, r6
 8003558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800355c:	81a3      	strh	r3, [r4, #12]
 800355e:	4628      	mov	r0, r5
 8003560:	463b      	mov	r3, r7
 8003562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800356a:	f000 b817 	b.w	800359c <_write_r>

0800356e <__sseek>:
 800356e:	b510      	push	{r4, lr}
 8003570:	460c      	mov	r4, r1
 8003572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003576:	f000 f855 	bl	8003624 <_lseek_r>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	bf15      	itete	ne
 8003580:	6560      	strne	r0, [r4, #84]	; 0x54
 8003582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800358a:	81a3      	strheq	r3, [r4, #12]
 800358c:	bf18      	it	ne
 800358e:	81a3      	strhne	r3, [r4, #12]
 8003590:	bd10      	pop	{r4, pc}

08003592 <__sclose>:
 8003592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003596:	f000 b813 	b.w	80035c0 <_close_r>
	...

0800359c <_write_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	4608      	mov	r0, r1
 80035a2:	4611      	mov	r1, r2
 80035a4:	2200      	movs	r2, #0
 80035a6:	4d05      	ldr	r5, [pc, #20]	; (80035bc <_write_r+0x20>)
 80035a8:	602a      	str	r2, [r5, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7fc fea4 	bl	80002f8 <_write>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d102      	bne.n	80035ba <_write_r+0x1e>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	b103      	cbz	r3, 80035ba <_write_r+0x1e>
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	bd38      	pop	{r3, r4, r5, pc}
 80035bc:	20000578 	.word	0x20000578

080035c0 <_close_r>:
 80035c0:	b538      	push	{r3, r4, r5, lr}
 80035c2:	2300      	movs	r3, #0
 80035c4:	4d05      	ldr	r5, [pc, #20]	; (80035dc <_close_r+0x1c>)
 80035c6:	4604      	mov	r4, r0
 80035c8:	4608      	mov	r0, r1
 80035ca:	602b      	str	r3, [r5, #0]
 80035cc:	f7fc ffb5 	bl	800053a <_close>
 80035d0:	1c43      	adds	r3, r0, #1
 80035d2:	d102      	bne.n	80035da <_close_r+0x1a>
 80035d4:	682b      	ldr	r3, [r5, #0]
 80035d6:	b103      	cbz	r3, 80035da <_close_r+0x1a>
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	20000578 	.word	0x20000578

080035e0 <_fstat_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	2300      	movs	r3, #0
 80035e4:	4d06      	ldr	r5, [pc, #24]	; (8003600 <_fstat_r+0x20>)
 80035e6:	4604      	mov	r4, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	f7fc ffaf 	bl	8000550 <_fstat>
 80035f2:	1c43      	adds	r3, r0, #1
 80035f4:	d102      	bne.n	80035fc <_fstat_r+0x1c>
 80035f6:	682b      	ldr	r3, [r5, #0]
 80035f8:	b103      	cbz	r3, 80035fc <_fstat_r+0x1c>
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	bd38      	pop	{r3, r4, r5, pc}
 80035fe:	bf00      	nop
 8003600:	20000578 	.word	0x20000578

08003604 <_isatty_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	2300      	movs	r3, #0
 8003608:	4d05      	ldr	r5, [pc, #20]	; (8003620 <_isatty_r+0x1c>)
 800360a:	4604      	mov	r4, r0
 800360c:	4608      	mov	r0, r1
 800360e:	602b      	str	r3, [r5, #0]
 8003610:	f7fc ffad 	bl	800056e <_isatty>
 8003614:	1c43      	adds	r3, r0, #1
 8003616:	d102      	bne.n	800361e <_isatty_r+0x1a>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	b103      	cbz	r3, 800361e <_isatty_r+0x1a>
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	20000578 	.word	0x20000578

08003624 <_lseek_r>:
 8003624:	b538      	push	{r3, r4, r5, lr}
 8003626:	4604      	mov	r4, r0
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	2200      	movs	r2, #0
 800362e:	4d05      	ldr	r5, [pc, #20]	; (8003644 <_lseek_r+0x20>)
 8003630:	602a      	str	r2, [r5, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f7fc ffa5 	bl	8000582 <_lseek>
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	d102      	bne.n	8003642 <_lseek_r+0x1e>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	b103      	cbz	r3, 8003642 <_lseek_r+0x1e>
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	bd38      	pop	{r3, r4, r5, pc}
 8003644:	20000578 	.word	0x20000578

08003648 <memchr>:
 8003648:	4603      	mov	r3, r0
 800364a:	b510      	push	{r4, lr}
 800364c:	b2c9      	uxtb	r1, r1
 800364e:	4402      	add	r2, r0
 8003650:	4293      	cmp	r3, r2
 8003652:	4618      	mov	r0, r3
 8003654:	d101      	bne.n	800365a <memchr+0x12>
 8003656:	2000      	movs	r0, #0
 8003658:	e003      	b.n	8003662 <memchr+0x1a>
 800365a:	7804      	ldrb	r4, [r0, #0]
 800365c:	3301      	adds	r3, #1
 800365e:	428c      	cmp	r4, r1
 8003660:	d1f6      	bne.n	8003650 <memchr+0x8>
 8003662:	bd10      	pop	{r4, pc}

08003664 <__malloc_lock>:
 8003664:	4801      	ldr	r0, [pc, #4]	; (800366c <__malloc_lock+0x8>)
 8003666:	f7ff bb13 	b.w	8002c90 <__retarget_lock_acquire_recursive>
 800366a:	bf00      	nop
 800366c:	2000056c 	.word	0x2000056c

08003670 <__malloc_unlock>:
 8003670:	4801      	ldr	r0, [pc, #4]	; (8003678 <__malloc_unlock+0x8>)
 8003672:	f7ff bb0e 	b.w	8002c92 <__retarget_lock_release_recursive>
 8003676:	bf00      	nop
 8003678:	2000056c 	.word	0x2000056c

0800367c <_read_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	4604      	mov	r4, r0
 8003680:	4608      	mov	r0, r1
 8003682:	4611      	mov	r1, r2
 8003684:	2200      	movs	r2, #0
 8003686:	4d05      	ldr	r5, [pc, #20]	; (800369c <_read_r+0x20>)
 8003688:	602a      	str	r2, [r5, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	f7fc ff38 	bl	8000500 <_read>
 8003690:	1c43      	adds	r3, r0, #1
 8003692:	d102      	bne.n	800369a <_read_r+0x1e>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b103      	cbz	r3, 800369a <_read_r+0x1e>
 8003698:	6023      	str	r3, [r4, #0]
 800369a:	bd38      	pop	{r3, r4, r5, pc}
 800369c:	20000578 	.word	0x20000578

080036a0 <_init>:
 80036a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a2:	bf00      	nop
 80036a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036a6:	bc08      	pop	{r3}
 80036a8:	469e      	mov	lr, r3
 80036aa:	4770      	bx	lr

080036ac <_fini>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr
