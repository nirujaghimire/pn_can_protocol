
pn_can_protocol_2_0_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  08006504  08006504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006810  08006810  0002051c  2**0
                  CONTENTS
  4 .ARM          00000000  08006810  08006810  0002051c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006810  08006810  0002051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006810  08006810  00016810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006814  08006814  00016814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000051c  20000000  08006818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031c8  2000051c  08006d34  0002051c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200036e4  08006d34  000236e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002051c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d735  00000000  00000000  00020545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002909  00000000  00000000  0002dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00030588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00031088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196f8  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e27c  00000000  00000000  0004b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086afa  00000000  00000000  0005945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dff56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003404  00000000  00000000  000dffa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000051c 	.word	0x2000051c
 8000128:	00000000 	.word	0x00000000
 800012c:	080064ec 	.word	0x080064ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000520 	.word	0x20000520
 8000148:	080064ec 	.word	0x080064ec

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa88 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84a 	bl	80001f4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f87e 	bl	8000260 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void run();
  run();
 8000164:	f003 fa98 	bl	8003698 <run>
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f005 f949 	bl	8005410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018c:	2301      	movs	r3, #1
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000194:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000196:	2300      	movs	r3, #0
 8000198:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fbb8 	bl	8001928 <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001be:	f000 f8b1 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2102      	movs	r1, #2
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fe25 	bl	8001e2c <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e8:	f000 f89c 	bl	8000324 <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <MX_CAN_Init+0x64>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <MX_CAN_Init+0x68>)
 80001fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <MX_CAN_Init+0x64>)
 8000200:	2208      	movs	r2, #8
 8000202:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <MX_CAN_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <MX_CAN_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_CAN_Init+0x64>)
 8000212:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000216:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_CAN_Init+0x64>)
 800021a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800021e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <MX_CAN_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_CAN_Init+0x64>)
 8000228:	2201      	movs	r2, #1
 800022a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <MX_CAN_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_CAN_Init+0x64>)
 8000234:	2201      	movs	r2, #1
 8000236:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <MX_CAN_Init+0x64>)
 8000246:	f000 fa93 	bl	8000770 <HAL_CAN_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000250:	f000 f868 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000538 	.word	0x20000538
 800025c:	40006400 	.word	0x40006400

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 ff56 	bl	8002148 <HAL_HalfDuplex_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f83f 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000560 	.word	0x20000560
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0320 	and.w	r3, r3, #32
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *data, int len) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	b29a      	uxth	r2, r3
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <_write+0x28>)
 8000310:	f001 ff72 	bl	80021f8 <HAL_UART_Transmit>
	return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000560 	.word	0x20000560

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <HAL_MspInit+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <HAL_MspInit+0x40>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <HAL_MspInit+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <HAL_MspInit+0x40>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a07      	ldr	r2, [pc, #28]	; (8000370 <HAL_MspInit+0x40>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_MspInit+0x40>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a20      	ldr	r2, [pc, #128]	; (8000410 <HAL_CAN_MspInit+0x9c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d139      	bne.n	8000408 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 800039a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039e:	61d3      	str	r3, [r2, #28]
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a18      	ldr	r2, [pc, #96]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003da:	f001 f921 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e4:	2302      	movs	r3, #2
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003f4:	f001 f914 	bl	8001620 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	2014      	movs	r0, #20
 80003fe:	f001 f8d8 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000402:	2014      	movs	r0, #20
 8000404:	f001 f8f1 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40006400 	.word	0x40006400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <HAL_UART_MspInit+0x74>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d124      	bne.n	8000486 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x78>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_UART_MspInit+0x78>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_UART_MspInit+0x78>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800046c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000472:	2312      	movs	r3, #18
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	2303      	movs	r3, #3
 8000478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_UART_MspInit+0x7c>)
 8000482:	f001 f8cd 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40013800 	.word	0x40013800
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80004e2:	f000 f905 	bl	80006f0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	canInterrupt();
 80004f0:	f003 f812 	bl	8003518 <canInterrupt>
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80004f6:	f000 fd58 	bl	8000faa <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000538 	.word	0x20000538

08000504 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
  }

  return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_close>:
  }
  return len;
}

int _close(int file)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000564:	605a      	str	r2, [r3, #4]
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f004 fed6 	bl	8005380 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	200005a8 	.word	0x200005a8
 8000608:	200036e8 	.word	0x200036e8

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff fff8 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000634:	4c09      	ldr	r4, [pc, #36]	; (800065c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f004 fea3 	bl	800538c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fd81 	bl	800014c <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000051c 	.word	0x2000051c
  ldr r2, =_sidata
 8000654:	08006818 	.word	0x08006818
  ldr r2, =_sbss
 8000658:	2000051c 	.word	0x2000051c
  ldr r4, =_ebss
 800065c:	200036e4 	.word	0x200036e4

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 ff91 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fe56 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ffa9 	bl	8001606 <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 ff71 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	200005ac 	.word	0x200005ac

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	200005ac 	.word	0x200005ac

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff fff0 	bl	8000714 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d005      	beq.n	800074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_Delay+0x44>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074e:	bf00      	nop
 8000750:	f7ff ffe0 	bl	8000714 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f7      	bhi.n	8000750 <HAL_Delay+0x28>
  {
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e0ed      	b.n	800095e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fdf0 	bl	8000374 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007a4:	f7ff ffb6 	bl	8000714 <HAL_GetTick>
 80007a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007aa:	e012      	b.n	80007d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ac:	f7ff ffb2 	bl	8000714 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d90b      	bls.n	80007d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2205      	movs	r2, #5
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e0c5      	b.n	800095e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0e5      	beq.n	80007ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0202 	bic.w	r2, r2, #2
 80007ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007f0:	f7ff ff90 	bl	8000714 <HAL_GetTick>
 80007f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007f6:	e012      	b.n	800081e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007f8:	f7ff ff8c 	bl	8000714 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d90b      	bls.n	800081e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2205      	movs	r2, #5
 8000816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e09f      	b.n	800095e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1e5      	bne.n	80007f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7e1b      	ldrb	r3, [r3, #24]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d108      	bne.n	8000846 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e007      	b.n	8000856 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7e5b      	ldrb	r3, [r3, #25]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d108      	bne.n	8000870 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e007      	b.n	8000880 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800087e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7e9b      	ldrb	r3, [r3, #26]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d108      	bne.n	800089a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f042 0220 	orr.w	r2, r2, #32
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e007      	b.n	80008aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0220 	bic.w	r2, r2, #32
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7edb      	ldrb	r3, [r3, #27]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d108      	bne.n	80008c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 0210 	bic.w	r2, r2, #16
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e007      	b.n	80008d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0210 	orr.w	r2, r2, #16
 80008d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7f1b      	ldrb	r3, [r3, #28]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d108      	bne.n	80008ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f042 0208 	orr.w	r2, r2, #8
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e007      	b.n	80008fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0208 	bic.w	r2, r2, #8
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7f5b      	ldrb	r3, [r3, #29]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d108      	bne.n	8000918 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0204 	orr.w	r2, r2, #4
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e007      	b.n	8000928 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 0204 	bic.w	r2, r2, #4
 8000926:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	ea42 0103 	orr.w	r1, r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000966:	b480      	push	{r7}
 8000968:	b087      	sub	sp, #28
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800097c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800097e:	7cfb      	ldrb	r3, [r7, #19]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d003      	beq.n	800098c <HAL_CAN_ConfigFilter+0x26>
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	2b02      	cmp	r3, #2
 8000988:	f040 80aa 	bne.w	8000ae0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f003 031f 	and.w	r3, r3, #31
 80009a4:	2201      	movs	r2, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d123      	bne.n	8000a0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	401a      	ands	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3248      	adds	r2, #72	; 0x48
 80009ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a04:	6979      	ldr	r1, [r7, #20]
 8000a06:	3348      	adds	r3, #72	; 0x48
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	440b      	add	r3, r1
 8000a0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d122      	bne.n	8000a5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3248      	adds	r2, #72	; 0x48
 8000a3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a52:	6979      	ldr	r1, [r7, #20]
 8000a54:	3348      	adds	r3, #72	; 0x48
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d109      	bne.n	8000a78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d109      	bne.n	8000aa4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000aa2:	e007      	b.n	8000ab4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ad2:	f023 0201 	bic.w	r2, r3, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e006      	b.n	8000aee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
  }
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d12e      	bne.n	8000b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0201 	bic.w	r2, r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b24:	f7ff fdf6 	bl	8000714 <HAL_GetTick>
 8000b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b2a:	e012      	b.n	8000b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b2c:	f7ff fdf2 	bl	8000714 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b0a      	cmp	r3, #10
 8000b38:	d90b      	bls.n	8000b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2205      	movs	r2, #5
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e012      	b.n	8000b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1e5      	bne.n	8000b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
  }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d003      	beq.n	8000bac <HAL_CAN_AddTxMessage+0x2c>
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	f040 80ad 	bne.w	8000d06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10a      	bne.n	8000bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d105      	bne.n	8000bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8095 	beq.w	8000cf6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	0e1b      	lsrs	r3, r3, #24
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10d      	bne.n	8000c04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6809      	ldr	r1, [r1, #0]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	440b      	add	r3, r1
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e00f      	b.n	8000c24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c14:	68f9      	ldr	r1, [r7, #12]
 8000c16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	440b      	add	r3, r1
 8000c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3318      	adds	r3, #24
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	440b      	add	r3, r1
 8000c34:	3304      	adds	r3, #4
 8000c36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	7d1b      	ldrb	r3, [r3, #20]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d111      	bne.n	8000c64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3318      	adds	r3, #24
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	6811      	ldr	r1, [r2, #0]
 8000c54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	440b      	add	r3, r1
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3307      	adds	r3, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	061a      	lsls	r2, r3, #24
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3306      	adds	r3, #6
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	3204      	adds	r2, #4
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4610      	mov	r0, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	ea43 0200 	orr.w	r2, r3, r0
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	061a      	lsls	r2, r3, #24
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	ea43 0200 	orr.w	r2, r3, r0
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	440b      	add	r3, r1
 8000ccc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3318      	adds	r3, #24
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	6811      	ldr	r1, [r2, #0]
 8000ce4:	f043 0201 	orr.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3318      	adds	r3, #24
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	440b      	add	r3, r1
 8000cf0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e00e      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e006      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
  }
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b087      	sub	sp, #28
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d32:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d003      	beq.n	8000d42 <HAL_CAN_GetRxMessage+0x24>
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	f040 8103 	bne.w	8000f48 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10e      	bne.n	8000d66 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d116      	bne.n	8000d84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0f7      	b.n	8000f56 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d107      	bne.n	8000d84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0e8      	b.n	8000f56 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	331b      	adds	r3, #27
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0204 	and.w	r2, r3, #4
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10c      	bne.n	8000dbc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	331b      	adds	r3, #27
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0d5b      	lsrs	r3, r3, #21
 8000db2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e00b      	b.n	8000dd4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	331b      	adds	r3, #27
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4413      	add	r3, r2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	331b      	adds	r3, #27
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0202 	and.w	r2, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	331b      	adds	r3, #27
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4413      	add	r3, r2
 8000df6:	3304      	adds	r3, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2208      	movs	r2, #8
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	e00b      	b.n	8000e22 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	331b      	adds	r3, #27
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	4413      	add	r3, r2
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 020f 	and.w	r2, r3, #15
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	331b      	adds	r3, #27
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	331b      	adds	r3, #27
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	4413      	add	r3, r2
 8000e72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	0a1a      	lsrs	r2, r3, #8
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0c1a      	lsrs	r2, r3, #16
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3302      	adds	r3, #2
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0e1a      	lsrs	r2, r3, #24
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	0a1a      	lsrs	r2, r3, #8
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3305      	adds	r3, #5
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4413      	add	r3, r2
 8000ef2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1a      	lsrs	r2, r3, #16
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3306      	adds	r3, #6
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0e1a      	lsrs	r2, r3, #24
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3307      	adds	r3, #7
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0220 	orr.w	r2, r2, #32
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e006      	b.n	8000f56 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
  }
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d002      	beq.n	8000f7e <HAL_CAN_ActivateNotification+0x1e>
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d109      	bne.n	8000f92 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e006      	b.n	8000fa0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
  }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b08a      	sub	sp, #40	; 0x28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d07c      	beq.n	80010ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f983 	bl	8001318 <HAL_CAN_TxMailbox0CompleteCallback>
 8001012:	e016      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e00c      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	e002      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f986 	bl	800134e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d024      	beq.n	8001096 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f962 	bl	800132a <HAL_CAN_TxMailbox1CompleteCallback>
 8001066:	e016      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	e00c      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e002      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f965 	bl	8001360 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d024      	beq.n	80010ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f941 	bl	800133c <HAL_CAN_TxMailbox2CompleteCallback>
 80010ba:	e016      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	e00c      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	e002      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f944 	bl	8001372 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00c      	beq.n	800110e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2208      	movs	r2, #8
 8001128:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f933 	bl	8001396 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f91b 	bl	8001384 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2208      	movs	r2, #8
 800118c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f913 	bl	80013ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f8fb 	bl	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2210      	movs	r2, #16
 80011cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8fc 	bl	80013cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2208      	movs	r2, #8
 80011ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8f4 	bl	80013de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d07b      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d072      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03e      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001278:	2b60      	cmp	r3, #96	; 0x60
 800127a:	d02b      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x32a>
 800127c:	2b60      	cmp	r3, #96	; 0x60
 800127e:	d82e      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001280:	2b50      	cmp	r3, #80	; 0x50
 8001282:	d022      	beq.n	80012ca <HAL_CAN_IRQHandler+0x320>
 8001284:	2b50      	cmp	r3, #80	; 0x50
 8001286:	d82a      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d019      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x316>
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	d826      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001290:	2b30      	cmp	r3, #48	; 0x30
 8001292:	d010      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x30c>
 8001294:	2b30      	cmp	r3, #48	; 0x30
 8001296:	d822      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001298:	2b10      	cmp	r3, #16
 800129a:	d002      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x2f8>
 800129c:	2b20      	cmp	r3, #32
 800129e:	d005      	beq.n	80012ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012a0:	e01d      	b.n	80012de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012aa:	e019      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012b4:	e014      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012be:	e00f      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012c8:	e00a      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d2:	e005      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012dc:	e000      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80012de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2204      	movs	r2, #4
 80012f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f870 	bl	80013f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
	...

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <__NVIC_EnableIRQ+0x34>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff90 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff2d 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff42 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff35 	bl	8001468 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b08b      	sub	sp, #44	; 0x2c
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	e169      	b.n	8001908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001634:	2201      	movs	r2, #1
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 8158 	bne.w	8001902 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a9a      	ldr	r2, [pc, #616]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d05e      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 800165c:	4a98      	ldr	r2, [pc, #608]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d875      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001662:	4a98      	ldr	r2, [pc, #608]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d058      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001668:	4a96      	ldr	r2, [pc, #600]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d86f      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800166e:	4a96      	ldr	r2, [pc, #600]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d052      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001674:	4a94      	ldr	r2, [pc, #592]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d869      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800167a:	4a94      	ldr	r2, [pc, #592]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d04c      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001680:	4a92      	ldr	r2, [pc, #584]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d863      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001686:	4a92      	ldr	r2, [pc, #584]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d046      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 800168c:	4a90      	ldr	r2, [pc, #576]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d85d      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001692:	2b12      	cmp	r3, #18
 8001694:	d82a      	bhi.n	80016ec <HAL_GPIO_Init+0xcc>
 8001696:	2b12      	cmp	r3, #18
 8001698:	d859      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <HAL_GPIO_Init+0x80>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	0800171b 	.word	0x0800171b
 80016a4:	080016f5 	.word	0x080016f5
 80016a8:	08001707 	.word	0x08001707
 80016ac:	08001749 	.word	0x08001749
 80016b0:	0800174f 	.word	0x0800174f
 80016b4:	0800174f 	.word	0x0800174f
 80016b8:	0800174f 	.word	0x0800174f
 80016bc:	0800174f 	.word	0x0800174f
 80016c0:	0800174f 	.word	0x0800174f
 80016c4:	0800174f 	.word	0x0800174f
 80016c8:	0800174f 	.word	0x0800174f
 80016cc:	0800174f 	.word	0x0800174f
 80016d0:	0800174f 	.word	0x0800174f
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	0800174f 	.word	0x0800174f
 80016dc:	0800174f 	.word	0x0800174f
 80016e0:	0800174f 	.word	0x0800174f
 80016e4:	080016fd 	.word	0x080016fd
 80016e8:	08001711 	.word	0x08001711
 80016ec:	4a79      	ldr	r2, [pc, #484]	; (80018d4 <HAL_GPIO_Init+0x2b4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016f2:	e02c      	b.n	800174e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e029      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	3304      	adds	r3, #4
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e024      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	3308      	adds	r3, #8
 800170c:	623b      	str	r3, [r7, #32]
          break;
 800170e:	e01f      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	330c      	adds	r3, #12
 8001716:	623b      	str	r3, [r7, #32]
          break;
 8001718:	e01a      	b.n	8001750 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001722:	2304      	movs	r3, #4
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e013      	b.n	8001750 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	611a      	str	r2, [r3, #16]
          break;
 800173a:	e009      	b.n	8001750 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	615a      	str	r2, [r3, #20]
          break;
 8001746:	e003      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x130>
          break;
 800174e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d801      	bhi.n	800175a <HAL_GPIO_Init+0x13a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	e001      	b.n	800175e <HAL_GPIO_Init+0x13e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d802      	bhi.n	800176c <HAL_GPIO_Init+0x14c>
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x152>
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	3b08      	subs	r3, #8
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	210f      	movs	r1, #15
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	6a39      	ldr	r1, [r7, #32]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	431a      	orrs	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80b1 	beq.w	8001902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a40      	ldr	r2, [pc, #256]	; (80018e0 <HAL_GPIO_Init+0x2c0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d013      	beq.n	800180c <HAL_GPIO_Init+0x1ec>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1e8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3e      	ldr	r2, [pc, #248]	; (80018e8 <HAL_GPIO_Init+0x2c8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1e4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_GPIO_Init+0x2cc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1e0>
 80017fc:	2303      	movs	r3, #3
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001800:	2304      	movs	r3, #4
 8001802:	e004      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001804:	2302      	movs	r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 800180c:	2300      	movs	r3, #0
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	f002 0203 	and.w	r2, r2, #3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4093      	lsls	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181e:	492f      	ldr	r1, [pc, #188]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	492c      	ldr	r1, [pc, #176]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4928      	ldr	r1, [pc, #160]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4922      	ldr	r1, [pc, #136]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	491e      	ldr	r1, [pc, #120]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4918      	ldr	r1, [pc, #96]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4914      	ldr	r1, [pc, #80]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d021      	beq.n	80018f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e021      	b.n	8001902 <HAL_GPIO_Init+0x2e2>
 80018be:	bf00      	nop
 80018c0:	10320000 	.word	0x10320000
 80018c4:	10310000 	.word	0x10310000
 80018c8:	10220000 	.word	0x10220000
 80018cc:	10210000 	.word	0x10210000
 80018d0:	10120000 	.word	0x10120000
 80018d4:	10110000 	.word	0x10110000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40011400 	.word	0x40011400
 80018f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4909      	ldr	r1, [pc, #36]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3301      	adds	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f47f ae8e 	bne.w	8001634 <HAL_GPIO_Init+0x14>
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	372c      	adds	r7, #44	; 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e272      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d112      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x12c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d168      	bne.n	8001a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e24c      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x76>
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x98>
 80019a6:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xbc>
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019e4:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7fe fe86 	bl	8000714 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7fe fe82 	bl	8000714 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e200      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe4>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe fe72 	bl	8000714 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7fe fe6e 	bl	8000714 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1ec      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x10c>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4939      	ldr	r1, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7fe fe27 	bl	8000714 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7fe fe23 	bl	8000714 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1a1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fe06 	bl	8000714 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7fe fe02 	bl	8000714 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e180      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03a      	beq.n	8001bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7fe fde6 	bl	8000714 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fde2 	bl	8000714 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e160      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 face 	bl	800210c <RCC_Delay>
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7fe fdcc 	bl	8000714 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7fe fdc8 	bl	8000714 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e146      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	42420000 	.word	0x42420000
 8001b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e9      	bne.n	8001b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a6 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a87      	ldr	r2, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe fd89 	bl	8000714 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7fe fd85 	bl	8000714 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e103      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x312>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x334>
 8001c42:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a66      	ldr	r2, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x356>
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a60      	ldr	r2, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fd39 	bl	8000714 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe fd35 	bl	8000714 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0b1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7fe fd23 	bl	8000714 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7fe fd1f 	bl	8000714 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e09b      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8087 	beq.w	8001e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d061      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d146      	bne.n	8001db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fcf3 	bl	8000714 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fcef 	bl	8000714 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e06d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4921      	ldr	r1, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a19      	ldr	r1, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	491b      	ldr	r1, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fcc3 	bl	8000714 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fcbf 	bl	8000714 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x46a>
 8001db0:	e035      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fcac 	bl	8000714 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fca8 	bl	8000714 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e026      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x498>
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e019      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x500>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d0      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4965      	ldr	r1, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d040      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e073      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7fe fbfa 	bl	8000714 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7fe fbf6 	bl	8000714 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e053      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d210      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fb58 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	0800670c 	.word	0x0800670c
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x30>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x36>
 800202e:	e027      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	e027      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c5b      	lsrs	r3, r3, #17
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002062:	fb03 f202 	mul.w	r2, r3, r2
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e004      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	693b      	ldr	r3, [r7, #16]
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200
 800209c:	08006724 	.word	0x08006724
 80020a0:	08006734 	.word	0x08006734
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	0800671c 	.word	0x0800671c

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	0800671c 	.word	0x0800671c

0800210c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <RCC_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <RCC_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002128:	bf00      	nop
  }
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <RCC_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000000 	.word	0x20000000
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e04a      	b.n	80021f0 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe f954 	bl	800041c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f925 	bl	80023dc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80021b0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	d16d      	bne.n	80022f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_UART_Transmit+0x2c>
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e066      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002236:	f7fe fa6d 	bl	8000714 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x6c>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800226c:	e02a      	b.n	80022c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f840 	bl	80022fe <UART_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e036      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800229c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3302      	adds	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e007      	b.n	80022b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1cf      	bne.n	800226e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2140      	movs	r1, #64	; 0x40
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f810 	bl	80022fe <UART_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b090      	sub	sp, #64	; 0x40
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230e:	e050      	b.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d04c      	beq.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <UART_WaitOnFlagUntilTimeout+0x30>
 800231e:	f7fe f9f9 	bl	8000714 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800232a:	429a      	cmp	r2, r3
 800232c:	d241      	bcs.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234e:	637a      	str	r2, [r7, #52]	; 0x34
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e5      	bne.n	800232e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	613b      	str	r3, [r7, #16]
   return(result);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002382:	623a      	str	r2, [r7, #32]
 8002384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	69f9      	ldr	r1, [r7, #28]
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e5      	bne.n	8002362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e00f      	b.n	80023d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d09f      	beq.n	8002310 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3740      	adds	r7, #64	; 0x40
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002416:	f023 030c 	bic.w	r3, r3, #12
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	430b      	orrs	r3, r1
 8002422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <UART_SetConfig+0x114>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d103      	bne.n	800244c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002444:	f7ff fe4e 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	e002      	b.n	8002452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800244c:	f7ff fe36 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <UART_SetConfig+0x118>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	0119      	lsls	r1, r3, #4
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fbb2 f2f3 	udiv	r2, r2, r3
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <UART_SetConfig+0x118>)
 800248a:	fba3 0302 	umull	r0, r3, r3, r2
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	fb00 f303 	mul.w	r3, r0, r3
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	3332      	adds	r3, #50	; 0x32
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <UART_SetConfig+0x118>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a8:	4419      	add	r1, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	009a      	lsls	r2, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <UART_SetConfig+0x118>)
 80024c2:	fba3 0302 	umull	r0, r3, r3, r2
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2064      	movs	r0, #100	; 0x64
 80024ca:	fb00 f303 	mul.w	r3, r0, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	3332      	adds	r3, #50	; 0x32
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <UART_SetConfig+0x118>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f003 020f 	and.w	r2, r3, #15
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	440a      	add	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40013800 	.word	0x40013800
 80024f4:	51eb851f 	.word	0x51eb851f

080024f8 <new>:
typedef CANQueue Queue;
typedef CANData Value;

Value CAN_DATA_NULL = { 0xFFFFFFFF, { 0, 0, 0, 0, 0, 0, 0, 0 } };

static Queue new() {
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b0ff      	sub	sp, #508	; 0x1fc
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002502:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002506:	6018      	str	r0, [r3, #0]
	Queue queue;
	queue.front = 0;
 8002508:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800250c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002510:	2200      	movs	r2, #0
 8002512:	605a      	str	r2, [r3, #4]
	queue.back = 0;
 8002514:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002518:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
	queue.size = 0;
 8002520:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002524:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < CAN_DATA_MAX_SIZE; i++)
 800252c:	2300      	movs	r3, #0
 800252e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002532:	e013      	b.n	800255c <new+0x64>
		queue.value[i] = CAN_DATA_NULL;
 8002534:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002538:	f5a3 72f8 	sub.w	r2, r3, #496	; 0x1f0
 800253c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	4413      	add	r3, r2
 8002544:	3308      	adds	r3, #8
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <new+0xa0>)
 8002548:	1d1c      	adds	r4, r3, #4
 800254a:	4613      	mov	r3, r2
 800254c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < CAN_DATA_MAX_SIZE; i++)
 8002552:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002556:	3301      	adds	r3, #1
 8002558:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800255c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002560:	2b1d      	cmp	r3, #29
 8002562:	dde7      	ble.n	8002534 <new+0x3c>
	return queue;
 8002564:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002568:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002572:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 800257e:	461a      	mov	r2, r3
 8002580:	f002 ff38 	bl	80053f4 <memcpy>
}
 8002584:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8002588:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	bf00      	nop
 8002598:	2000000c 	.word	0x2000000c

0800259c <enqueue>:

static int enqueue(Queue *queue, uint32_t ID, uint8_t *bytes,uint8_t size) {
 800259c:	b490      	push	{r4, r7}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	70fb      	strb	r3, [r7, #3]
	if (queue->size >= CAN_DATA_MAX_SIZE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b1d      	cmp	r3, #29
 80025b0:	dd01      	ble.n	80025b6 <enqueue+0x1a>
		return 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e039      	b.n	800262a <enqueue+0x8e>

	Value value = { .ID = ID ,.len=size};
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	773b      	strb	r3, [r7, #28]
	*(uint64_t*) value.byte = *(uint64_t*) bytes;
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	1d19      	adds	r1, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	e9c1 2300 	strd	r2, r3, [r1]

	queue->value[queue->back] = value;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	4413      	add	r3, r2
 80025e6:	3308      	adds	r3, #8
 80025e8:	1d1c      	adds	r4, r3, #4
 80025ea:	f107 0310 	add.w	r3, r7, #16
 80025ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	queue->back++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	609a      	str	r2, [r3, #8]
	queue->back %= CAN_DATA_MAX_SIZE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <enqueue+0x98>)
 8002604:	fb83 1302 	smull	r1, r3, r3, r2
 8002608:	4413      	add	r3, r2
 800260a:	1119      	asrs	r1, r3, #4
 800260c:	17d3      	asrs	r3, r2, #31
 800260e:	1ac9      	subs	r1, r1, r3
 8002610:	460b      	mov	r3, r1
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a5b      	subs	r3, r3, r1
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	1ad1      	subs	r1, r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6099      	str	r1, [r3, #8]

	queue->size++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]
	return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bc90      	pop	{r4, r7}
 8002632:	4770      	bx	lr
 8002634:	88888889 	.word	0x88888889

08002638 <peek>:

static Value peek(Queue *queue) {
 8002638:	b490      	push	{r4, r7}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
	return queue->value[queue->front];
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	3308      	adds	r3, #8
 8002650:	460c      	mov	r4, r1
 8002652:	3304      	adds	r3, #4
 8002654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bc90      	pop	{r4, r7}
 8002662:	4770      	bx	lr

08002664 <dequeue>:

static Value dequeue(Queue *queue) {
 8002664:	b490      	push	{r4, r7}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	if (queue->size <= 0)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	dc07      	bgt.n	8002686 <dequeue+0x22>
		return CAN_DATA_NULL;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <dequeue+0xa0>)
 800267a:	461c      	mov	r4, r3
 800267c:	4613      	mov	r3, r2
 800267e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002684:	e038      	b.n	80026f8 <dequeue+0x94>

	Value value = queue->value[queue->front];
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4413      	add	r3, r2
 8002690:	3308      	adds	r3, #8
 8002692:	f107 0408 	add.w	r4, r7, #8
 8002696:	3304      	adds	r3, #4
 8002698:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800269a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	queue->value[queue->front] = CAN_DATA_NULL;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	4413      	add	r3, r2
 80026a8:	3308      	adds	r3, #8
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <dequeue+0xa0>)
 80026ac:	1d1c      	adds	r4, r3, #4
 80026ae:	4613      	mov	r3, r2
 80026b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	queue->size--;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1e5a      	subs	r2, r3, #1
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	601a      	str	r2, [r3, #0]

	queue->front++;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	605a      	str	r2, [r3, #4]
	queue->front %= CAN_DATA_MAX_SIZE;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <dequeue+0xa4>)
 80026d0:	fb83 1302 	smull	r1, r3, r3, r2
 80026d4:	4413      	add	r3, r2
 80026d6:	1119      	asrs	r1, r3, #4
 80026d8:	17d3      	asrs	r3, r2, #31
 80026da:	1ac9      	subs	r1, r1, r3
 80026dc:	460b      	mov	r3, r1
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a5b      	subs	r3, r3, r1
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	1ad1      	subs	r1, r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6059      	str	r1, [r3, #4]
	return value;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	461c      	mov	r4, r3
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc90      	pop	{r4, r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	2000000c 	.word	0x2000000c
 8002708:	88888889 	.word	0x88888889

0800270c <print>:

static void print(Queue *queue) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	printf("%d-%d => [", queue->front, queue->back);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6859      	ldr	r1, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	461a      	mov	r2, r3
 800271e:	4815      	ldr	r0, [pc, #84]	; (8002774 <print+0x68>)
 8002720:	f002 ff5a 	bl	80055d8 <iprintf>
	for (int i = 0; i < CAN_DATA_MAX_SIZE; ++i) {
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e019      	b.n	800275e <print+0x52>
		if (queue->value[i].ID == 0xFFFFFFFF)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4413      	add	r3, r2
 8002732:	330c      	adds	r3, #12
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d103      	bne.n	8002744 <print+0x38>
			printf("[_]");
 800273c:	480e      	ldr	r0, [pc, #56]	; (8002778 <print+0x6c>)
 800273e:	f002 ff4b 	bl	80055d8 <iprintf>
 8002742:	e009      	b.n	8002758 <print+0x4c>
		else
			printf("[0x%x]", (int) queue->value[i].ID);
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	330c      	adds	r3, #12
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	480a      	ldr	r0, [pc, #40]	; (800277c <print+0x70>)
 8002754:	f002 ff40 	bl	80055d8 <iprintf>
	for (int i = 0; i < CAN_DATA_MAX_SIZE; ++i) {
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3301      	adds	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2b1d      	cmp	r3, #29
 8002762:	dde2      	ble.n	800272a <print+0x1e>
	}
	printf("]\n");
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <print+0x74>)
 8002766:	f002 ffd1 	bl	800570c <puts>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	08006504 	.word	0x08006504
 8002778:	08006510 	.word	0x08006510
 800277c:	08006514 	.word	0x08006514
 8002780:	0800651c 	.word	0x0800651c

08002784 <allocateMemory>:
 *                      : NULL for dynamic heap
 * @param sizeInByte    : Size in bytes
 * @return              : Pointer to allocated memory
 *                      : NULL if there exist no memory for allocation
 */
static void* allocateMemory(BuddyHeap *heap, int sizeInByte) {
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
	if (sizeInByte <= 0)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	dc01      	bgt.n	8002798 <allocateMemory+0x14>
		return NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	e019      	b.n	80027cc <allocateMemory+0x48>
	void *ptr;
	ptr = heap != NULL ? StaticBuddyHeap.malloc(heap, sizeInByte) : malloc(sizeInByte);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <allocateMemory+0x28>
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <allocateMemory+0x50>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	e004      	b.n	80027b6 <allocateMemory+0x32>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fe10 	bl	80053d4 <malloc>
 80027b4:	4603      	mov	r3, r0
 80027b6:	60fb      	str	r3, [r7, #12]
	if (ptr != NULL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <allocateMemory+0x46>
		allocatedMemory += sizeInByte;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <allocateMemory+0x54>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <allocateMemory+0x54>)
 80027c8:	6013      	str	r3, [r2, #0]
	return ptr;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000058 	.word	0x20000058
 80027d8:	20002e04 	.word	0x20002e04

080027dc <freeMemory>:
 *                      : NULL for dynamic heap
 * @param pointer       : Pointer to allocated Memory
 * @param sizeInByte    : Size to be freed
 * @return              : 1 for success (OR) 0 for failed
 */
static int freeMemory(BuddyHeap *heap, void *pointer, int sizeInByte) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
	if (pointer == NULL || sizeInByte <= 0)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <freeMemory+0x18>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	dc01      	bgt.n	80027f8 <freeMemory+0x1c>
		return 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e012      	b.n	800281e <freeMemory+0x42>
	heap != NULL ? StaticBuddyHeap.free(heap, pointer) : free(pointer);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <freeMemory+0x2e>
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <freeMemory+0x4c>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	4798      	blx	r3
 8002808:	e002      	b.n	8002810 <freeMemory+0x34>
 800280a:	68b8      	ldr	r0, [r7, #8]
 800280c:	f002 fdea 	bl	80053e4 <free>
	allocatedMemory -= sizeInByte;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <freeMemory+0x50>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	4a04      	ldr	r2, [pc, #16]	; (800282c <freeMemory+0x50>)
 800281a:	6013      	str	r3, [r2, #0]
	return 1;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000058 	.word	0x20000058
 800282c:	20002e04 	.word	0x20002e04

08002830 <getMillis>:


static uint32_t getMillis() {
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002834:	f7fd ff6e 	bl	8000714 <HAL_GetTick>
 8002838:	4603      	mov	r3, r0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <new>:
		uint32_t endAckID,
		int (*canSend)(uint32_t id, uint8_t *bytes, uint8_t len),
		int (*txCallback)(uint32_t id, uint8_t *bytes, uint16_t size,
				int status),
		int (*rxCallback)(uint32_t id, uint8_t *bytes, uint16_t size,
				int status), BuddyHeap *heap, int isQueue) {
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8002846:	af00      	add	r7, sp, #0
 8002848:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
 800284c:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8002850:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8002854:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	int n = linkCount++;
 8002858:	4b8f      	ldr	r3, [pc, #572]	; (8002a98 <new+0x258>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	498e      	ldr	r1, [pc, #568]	; (8002a98 <new+0x258>)
 8002860:	600a      	str	r2, [r1, #0]
 8002862:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	SyncLayerCANLink syncLink = { .startReqID = startReqID, .startAckID =
 8002866:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800286a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800286e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002872:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002876:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800287a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 800287e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002882:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002886:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800288a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			startAckID, .endReqID = endReqID, .endAckID = endAckID, .canSend =
			canSend };
	link[n].link = syncLink;
 800288e:	4983      	ldr	r1, [pc, #524]	; (8002a9c <new+0x25c>)
 8002890:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002894:	4613      	mov	r3, r2
 8002896:	01db      	lsls	r3, r3, #7
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	461d      	mov	r5, r3
 80028a0:	f507 7400 	add.w	r4, r7, #512	; 0x200
 80028a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	602b      	str	r3, [r5, #0]
	link[n].txCallback = txCallback;
 80028ac:	497b      	ldr	r1, [pc, #492]	; (8002a9c <new+0x25c>)
 80028ae:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80028b2:	4613      	mov	r3, r2
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	3314      	adds	r3, #20
 80028be:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80028c2:	601a      	str	r2, [r3, #0]
	link[n].rxCallback = rxCallback;
 80028c4:	4975      	ldr	r1, [pc, #468]	; (8002a9c <new+0x25c>)
 80028c6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80028ca:	4613      	mov	r3, r2
 80028cc:	01db      	lsls	r3, r3, #7
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	440b      	add	r3, r1
 80028d4:	3318      	adds	r3, #24
 80028d6:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80028da:	601a      	str	r2, [r3, #0]
	link[n].heap = heap;
 80028dc:	496f      	ldr	r1, [pc, #444]	; (8002a9c <new+0x25c>)
 80028de:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80028e2:	4613      	mov	r3, r2
 80028e4:	01db      	lsls	r3, r3, #7
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	331c      	adds	r3, #28
 80028ee:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80028f2:	601a      	str	r2, [r3, #0]
	if (isQueue) {
 80028f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01e      	beq.n	800293a <new+0xfa>
		link[n].txQueue = StaticQueue.new(heap, NULL);
 80028fc:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <new+0x260>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2100      	movs	r1, #0
 8002902:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8002906:	4798      	blx	r3
 8002908:	4601      	mov	r1, r0
 800290a:	4864      	ldr	r0, [pc, #400]	; (8002a9c <new+0x25c>)
 800290c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002910:	4613      	mov	r3, r2
 8002912:	01db      	lsls	r3, r3, #7
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4403      	add	r3, r0
 800291a:	3324      	adds	r3, #36	; 0x24
 800291c:	6019      	str	r1, [r3, #0]
		if (link[n].txQueue == NULL) {
 800291e:	495f      	ldr	r1, [pc, #380]	; (8002a9c <new+0x25c>)
 8002920:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002924:	4613      	mov	r3, r2
 8002926:	01db      	lsls	r3, r3, #7
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3324      	adds	r3, #36	; 0x24
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d11f      	bne.n	8002976 <new+0x136>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_ERROR, __func__,
					"Link [0x%x, 0x%x, 0x%x, 0x%x] creation : FAILED (Heap is full) \n",
					startReqID, startAckID, endReqID, endAckID);
#endif
			return NULL;
 8002936:	2300      	movs	r3, #0
 8002938:	e0a9      	b.n	8002a8e <new+0x24e>
			console(CONSOLE_INFO, __func__,
					"Transmit Queue for link [0x%x, 0x%x, 0x%x, 0x%x] creation : SUCCESS \n",
					startReqID, startAckID, endReqID, endAckID);
#endif
	} else {
		link[n].txMap = StaticHashMap.new(heap);
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <new+0x264>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 8002942:	4798      	blx	r3
 8002944:	4601      	mov	r1, r0
 8002946:	4855      	ldr	r0, [pc, #340]	; (8002a9c <new+0x25c>)
 8002948:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800294c:	4613      	mov	r3, r2
 800294e:	01db      	lsls	r3, r3, #7
 8002950:	4413      	add	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4403      	add	r3, r0
 8002956:	3320      	adds	r3, #32
 8002958:	6019      	str	r1, [r3, #0]
		if (link[n].txMap == NULL) {
 800295a:	4950      	ldr	r1, [pc, #320]	; (8002a9c <new+0x25c>)
 800295c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002960:	4613      	mov	r3, r2
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3320      	adds	r3, #32
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <new+0x136>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_ERROR, __func__,
					"Transmit Queue for link [0x%x, 0x%x, 0x%x, 0x%x] creation : FAILED (Heap is full) \n",
					startReqID, startAckID, endReqID, endAckID);
#endif
			return NULL;
 8002972:	2300      	movs	r3, #0
 8002974:	e08b      	b.n	8002a8e <new+0x24e>
			console(CONSOLE_INFO, __func__,
					"Transmit Map for link [0x%x, 0x%x, 0x%x, 0x%x] creation : SUCCESS \n",
					startReqID, startAckID, endReqID, endAckID);
#endif
	}
	link[n].rxMap = StaticHashMap.new(heap);
 8002976:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <new+0x264>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 800297e:	4798      	blx	r3
 8002980:	4601      	mov	r1, r0
 8002982:	4846      	ldr	r0, [pc, #280]	; (8002a9c <new+0x25c>)
 8002984:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002988:	4613      	mov	r3, r2
 800298a:	01db      	lsls	r3, r3, #7
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4403      	add	r3, r0
 8002992:	3328      	adds	r3, #40	; 0x28
 8002994:	6019      	str	r1, [r3, #0]
	if (link[n].rxMap == NULL) {
 8002996:	4941      	ldr	r1, [pc, #260]	; (8002a9c <new+0x25c>)
 8002998:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800299c:	4613      	mov	r3, r2
 800299e:	01db      	lsls	r3, r3, #7
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3328      	adds	r3, #40	; 0x28
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d126      	bne.n	80029fc <new+0x1bc>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_ERROR, __func__,
				"Receive map for link [0x%x, 0x%x, 0x%x, 0x%x] creation : FAILED (Heap is full) \n",
				startReqID, startAckID, endReqID, endAckID);
#endif
		if (isQueue)
 80029ae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <new+0x198>
			freeMemory(heap, link[n].txQueue,sizeof(Queue));
 80029b6:	4939      	ldr	r1, [pc, #228]	; (8002a9c <new+0x25c>)
 80029b8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80029bc:	4613      	mov	r3, r2
 80029be:	01db      	lsls	r3, r3, #7
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3324      	adds	r3, #36	; 0x24
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2214      	movs	r2, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 80029d2:	f7ff ff03 	bl	80027dc <freeMemory>
 80029d6:	e00f      	b.n	80029f8 <new+0x1b8>
		else
			freeMemory(heap, link[n].txMap,sizeof(HashMap));
 80029d8:	4930      	ldr	r1, [pc, #192]	; (8002a9c <new+0x25c>)
 80029da:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80029de:	4613      	mov	r3, r2
 80029e0:	01db      	lsls	r3, r3, #7
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3320      	adds	r3, #32
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2214      	movs	r2, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	f8d7 0234 	ldr.w	r0, [r7, #564]	; 0x234
 80029f4:	f7ff fef2 	bl	80027dc <freeMemory>
		return NULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e048      	b.n	8002a8e <new+0x24e>
	else
		console(CONSOLE_INFO, __func__,
				"Receive Map for link [0x%x, 0x%x, 0x%x, 0x%x] creation : SUCCESS\n",
				startReqID, startAckID, endReqID, endAckID);
#endif
	link[n].txCanQueue = StaticCANQueue.new();
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <new+0x268>)
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	4826      	ldr	r0, [pc, #152]	; (8002a9c <new+0x25c>)
 8002a02:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002a06:	4613      	mov	r3, r2
 8002a08:	01db      	lsls	r3, r3, #7
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4403      	add	r3, r0
 8002a10:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002a14:	463b      	mov	r3, r7
 8002a16:	4618      	mov	r0, r3
 8002a18:	4788      	blx	r1
 8002a1a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002a1e:	f5a3 7206 	sub.w	r2, r3, #536	; 0x218
 8002a22:	1d23      	adds	r3, r4, #4
 8002a24:	4611      	mov	r1, r2
 8002a26:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fce2 	bl	80053f4 <memcpy>
	link[n].rxCanQueue = StaticCANQueue.new();
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <new+0x268>)
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	4819      	ldr	r0, [pc, #100]	; (8002a9c <new+0x25c>)
 8002a36:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	01db      	lsls	r3, r3, #7
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4403      	add	r3, r0
 8002a44:	f503 7406 	add.w	r4, r3, #536	; 0x218
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	4788      	blx	r1
 8002a4e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8002a52:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8002a56:	4620      	mov	r0, r4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f002 fcc8 	bl	80053f4 <memcpy>
	link[n].isQueue = isQueue;
 8002a64:	490d      	ldr	r1, [pc, #52]	; (8002a9c <new+0x25c>)
 8002a66:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	01db      	lsls	r3, r3, #7
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	440b      	add	r3, r1
 8002a74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a78:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8002a7c:	601a      	str	r2, [r3, #0]
#ifdef CONSOLE_ENABLE
	console(CONSOLE_INFO, __func__,
			"Link [0x%x, 0x%x, 0x%x, 0x%x] creation : SUCCESS\n", startReqID,
			startAckID, endReqID, endAckID);
#endif
	return &link[n];
 8002a7e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002a82:	4613      	mov	r3, r2
 8002a84:	01db      	lsls	r3, r3, #7
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <new+0x25c>)
 8002a8c:	4413      	add	r3, r2
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bdb0      	pop	{r4, r5, r7, pc}
 8002a98:	20002e00 	.word	0x20002e00
 8002a9c:	200005b0 	.word	0x200005b0
 8002aa0:	20000498 	.word	0x20000498
 8002aa4:	20000474 	.word	0x20000474
 8002aa8:	2000001c 	.word	0x2000001c

08002aac <getDataFromQueue>:

static SyncLayerCANData* getDataFromQueue(Queue *queue, uint32_t ID) {
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	int que_size = queue->size;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]
	struct QueueData *queData = queue->front;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	617b      	str	r3, [r7, #20]
	SyncLayerCANData *syncData;
	for (int i = 0; i < que_size; i++) {
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e012      	b.n	8002aee <getDataFromQueue+0x42>
		syncData = (SyncLayerCANData*) queData->value;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60bb      	str	r3, [r7, #8]
		if (syncData->id == ID)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d101      	bne.n	8002adc <getDataFromQueue+0x30>
			return syncData;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	e00f      	b.n	8002afc <getDataFromQueue+0x50>
		queData = queData->next;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	617b      	str	r3, [r7, #20]
		if (queData == NULL)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <getDataFromQueue+0x4c>
	for (int i = 0; i < que_size; i++) {
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	3301      	adds	r3, #1
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	dbe8      	blt.n	8002ac8 <getDataFromQueue+0x1c>
 8002af6:	e000      	b.n	8002afa <getDataFromQueue+0x4e>
			break;
 8002af8:	bf00      	nop
	}
	return NULL;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
	...

08002b08 <addTxMsgPtr>:
 * @param id	: ID of bytes to be transmitted
 * @param bytes	: Bytes to be transmitted
 * @param size	: Size in bytes
 */
static void addTxMsgPtr(CANLink *link, uint32_t id, uint8_t *bytes,
		uint16_t size) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	807b      	strh	r3, [r7, #2]
	if (bytes == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07a      	beq.n	8002c12 <addTxMsgPtr+0x10a>
		return;
	SyncLayerCANData *syncData;
	int isSyncDataAllocated = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
	if (!link->isQueue) {
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d114      	bne.n	8002b54 <addTxMsgPtr+0x4c>
		syncData = StaticHashMap.get(link->txMap, id);
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <addTxMsgPtr+0x11c>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	6a12      	ldr	r2, [r2, #32]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
 8002b38:	61f8      	str	r0, [r7, #28]
		if (syncData == NULL) {
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d11c      	bne.n	8002b7a <addTxMsgPtr+0x72>
			syncData = allocateMemory(link->heap,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2130      	movs	r1, #48	; 0x30
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fe1c 	bl	8002784 <allocateMemory>
 8002b4c:	61f8      	str	r0, [r7, #28]
					sizeof(SyncLayerCANData));
			isSyncDataAllocated = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e012      	b.n	8002b7a <addTxMsgPtr+0x72>
		}
	} else {
		syncData = getDataFromQueue(link->txQueue, id);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff ffa6 	bl	8002aac <getDataFromQueue>
 8002b60:	61f8      	str	r0, [r7, #28]
		if (syncData == NULL) {
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d108      	bne.n	8002b7a <addTxMsgPtr+0x72>
			syncData = allocateMemory(link->heap,
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2130      	movs	r1, #48	; 0x30
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fe08 	bl	8002784 <allocateMemory>
 8002b74:	61f8      	str	r0, [r7, #28]
					sizeof(SyncLayerCANData));
			isSyncDataAllocated = 1;
 8002b76:	2301      	movs	r3, #1
 8002b78:	61bb      	str	r3, [r7, #24]
		}
	}
	if (syncData == NULL) {
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d04a      	beq.n	8002c16 <addTxMsgPtr+0x10e>
#ifdef CONSOLE_ENABLE
	else
		console(CONSOLE_INFO, __func__,
				"Sync data for data 0x%x creation : SUCCESS \n", id);
#endif
	if (!isSyncDataAllocated)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d049      	beq.n	8002c1a <addTxMsgPtr+0x112>
		return;
	syncData->id = id;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	601a      	str	r2, [r3, #0]
	syncData->bytes = bytes;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	605a      	str	r2, [r3, #4]
	syncData->isBytesDynamicallyAllocated = 0;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	syncData->size = size;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	887a      	ldrh	r2, [r7, #2]
 8002b9e:	811a      	strh	r2, [r3, #8]
	syncData->numTry = PN_CAN_PROTOCOL_NUM_OF_TRY;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	729a      	strb	r2, [r3, #10]
	syncData->track = SYNC_LAYER_CAN_START_REQ;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	syncData->waitTill = getMillis()+TRANSMIT_TIMEOUT;//b0xFFFFFFFF;
 8002bae:	f7ff fe3f 	bl	8002830 <getMillis>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28

	if (link->isQueue) {
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d012      	beq.n	8002bec <addTxMsgPtr+0xe4>
		Queue *queue = StaticQueue.enqueue(link->txQueue, syncData);
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <addTxMsgPtr+0x120>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bce:	69f9      	ldr	r1, [r7, #28]
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
 8002bd4:	6138      	str	r0, [r7, #16]
		if (queue == NULL) {
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11f      	bne.n	8002c1c <addTxMsgPtr+0x114>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_ERROR, __func__,
					"Data 0x%x insertion in transmit queue : FAILED (Queue is full) \n",
					id);
#endif
			freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2230      	movs	r2, #48	; 0x30
 8002be2:	69f9      	ldr	r1, [r7, #28]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fdf9 	bl	80027dc <freeMemory>
			return;
 8002bea:	e017      	b.n	8002c1c <addTxMsgPtr+0x114>
		else
			console(CONSOLE_INFO, __func__,
					"Data 0x%x insertion in transmit queue : SUCCESS \n", id);
#endif
	} else {
		HashMap *map = StaticHashMap.insert(link->txMap, id, syncData);
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <addTxMsgPtr+0x11c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6a10      	ldr	r0, [r2, #32]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	4798      	blx	r3
 8002bfa:	6178      	str	r0, [r7, #20]
		if (map == NULL) {
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <addTxMsgPtr+0x114>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_ERROR, __func__,
					"Data 0x%x insertion in transmit map : FAILED (Map is full) \n",
					id);
#endif
			freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2230      	movs	r2, #48	; 0x30
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fde6 	bl	80027dc <freeMemory>
			return;
 8002c10:	e004      	b.n	8002c1c <addTxMsgPtr+0x114>
		return;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <addTxMsgPtr+0x114>
		return;
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <addTxMsgPtr+0x114>
		return;
 8002c1a:	bf00      	nop
		else
			console(CONSOLE_INFO, __func__,
					"Data 0x%x insertion in transmit map : SUCCESS \n", id);
#endif
	}
}
 8002c1c:	3720      	adds	r7, #32
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000474 	.word	0x20000474
 8002c28:	20000498 	.word	0x20000498

08002c2c <addTxMsg>:
 * @param link	: Pointer to instance of CAN link
 * @param id	: ID of bytes to be transmitted
 * @param bytes	: Bytes to be transmitted
 * @param size	: Size in bytes
 */
static void addTxMsg(CANLink *link, uint32_t id, uint8_t *bytes, uint16_t size) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	807b      	strh	r3, [r7, #2]
	if (bytes == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80b8 	beq.w	8002db2 <addTxMsg+0x186>
		return;

	SyncLayerCANData *syncData;
	int isSyncDataAllocated = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
	if (!link->isQueue) {
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d114      	bne.n	8002c7a <addTxMsg+0x4e>
		syncData = StaticHashMap.get(link->txMap, id);
 8002c50:	4b5c      	ldr	r3, [pc, #368]	; (8002dc4 <addTxMsg+0x198>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	6a12      	ldr	r2, [r2, #32]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4798      	blx	r3
 8002c5e:	6278      	str	r0, [r7, #36]	; 0x24
		if (syncData == NULL) {
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11c      	bne.n	8002ca0 <addTxMsg+0x74>
			syncData =allocateMemory(link->heap,
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2130      	movs	r1, #48	; 0x30
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fd89 	bl	8002784 <allocateMemory>
 8002c72:	6278      	str	r0, [r7, #36]	; 0x24
					sizeof(SyncLayerCANData));
			isSyncDataAllocated = 1;
 8002c74:	2301      	movs	r3, #1
 8002c76:	623b      	str	r3, [r7, #32]
 8002c78:	e012      	b.n	8002ca0 <addTxMsg+0x74>
		}
	} else {
		syncData = getDataFromQueue(link->txQueue, id);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff13 	bl	8002aac <getDataFromQueue>
 8002c86:	6278      	str	r0, [r7, #36]	; 0x24
		if (syncData == NULL) {
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <addTxMsg+0x74>
			syncData = allocateMemory(link->heap,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2130      	movs	r1, #48	; 0x30
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fd75 	bl	8002784 <allocateMemory>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24
					sizeof(SyncLayerCANData));
			isSyncDataAllocated = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]
		}
	}
	if (syncData == NULL) {
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8087 	beq.w	8002db6 <addTxMsg+0x18a>
		console(CONSOLE_INFO, __func__,
				"Sync data for data 0x%x creation : SUCCESS\n", id);
#endif

	uint8_t *allocatedBytes;
	if (!isSyncDataAllocated)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d108      	bne.n	8002cc0 <addTxMsg+0x94>
		allocatedBytes = allocateMemory(link->heap, size);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fd64 	bl	8002784 <allocateMemory>
 8002cbc:	61f8      	str	r0, [r7, #28]
 8002cbe:	e002      	b.n	8002cc6 <addTxMsg+0x9a>
	else
		allocatedBytes = syncData->bytes;
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	61fb      	str	r3, [r7, #28]

	if (allocatedBytes == NULL) {
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <addTxMsg+0xb0>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_ERROR, __func__,
				"Bytes for data 0x%x allocation : FAILED (Heap is full) \n",
				id);
#endif
		freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2230      	movs	r2, #48	; 0x30
 8002cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fd81 	bl	80027dc <freeMemory>
		return;
 8002cda:	e06f      	b.n	8002dbc <addTxMsg+0x190>
		if (!isSyncDataAllocated)
			console(CONSOLE_INFO, __func__,
					"Bytes for data 0x%x allocation : SUCCESS\n", id);
	}
#endif
	for (int i = 0; i < size; i++)
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e00a      	b.n	8002cf8 <addTxMsg+0xcc>
		allocatedBytes[i] = bytes[i];
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	441a      	add	r2, r3
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	69f9      	ldr	r1, [r7, #28]
 8002cec:	440b      	add	r3, r1
 8002cee:	7812      	ldrb	r2, [r2, #0]
 8002cf0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < size; i++)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dbf0      	blt.n	8002ce2 <addTxMsg+0xb6>

	if (isSyncDataAllocated)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d159      	bne.n	8002dba <addTxMsg+0x18e>
		return;

	syncData->id = id;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	601a      	str	r2, [r3, #0]
	syncData->bytes = allocatedBytes;
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	605a      	str	r2, [r3, #4]
	syncData->isBytesDynamicallyAllocated = 1;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	syncData->size = size;
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	887a      	ldrh	r2, [r7, #2]
 8002d1e:	811a      	strh	r2, [r3, #8]
	syncData->numTry = PN_CAN_PROTOCOL_NUM_OF_TRY;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	2201      	movs	r2, #1
 8002d24:	729a      	strb	r2, [r3, #10]
	syncData->track = SYNC_LAYER_CAN_START_REQ;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	syncData->waitTill = getMillis()+TRANSMIT_TIMEOUT;
 8002d2e:	f7ff fd7f 	bl	8002830 <getMillis>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	629a      	str	r2, [r3, #40]	; 0x28
	if (link->isQueue) {
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01a      	beq.n	8002d7c <addTxMsg+0x150>
		Queue *queue = StaticQueue.enqueue(link->txQueue, syncData);
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <addTxMsg+0x19c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d50:	4610      	mov	r0, r2
 8002d52:	4798      	blx	r3
 8002d54:	6138      	str	r0, [r7, #16]
		if (queue == NULL) {
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12f      	bne.n	8002dbc <addTxMsg+0x190>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_ERROR, __func__,
					"Data 0x%x insertion in transmit queue : FAILED (Queue is full) \n",
					id);
#endif
			freeMemory(link->heap, allocatedBytes,syncData->size );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	69d8      	ldr	r0, [r3, #28]
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	891b      	ldrh	r3, [r3, #8]
 8002d64:	461a      	mov	r2, r3
 8002d66:	69f9      	ldr	r1, [r7, #28]
 8002d68:	f7ff fd38 	bl	80027dc <freeMemory>
			freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2230      	movs	r2, #48	; 0x30
 8002d72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fd31 	bl	80027dc <freeMemory>
			return;
 8002d7a:	e01f      	b.n	8002dbc <addTxMsg+0x190>
		else
			console(CONSOLE_INFO, __func__,
					"Data 0x%x insertion in transmit queue : SUCCESS \n", id);
#endif
	} else {
		HashMap *map = StaticHashMap.insert(link->txMap, id, syncData);
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <addTxMsg+0x198>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	6a10      	ldr	r0, [r2, #32]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d88:	4798      	blx	r3
 8002d8a:	6178      	str	r0, [r7, #20]
		if (map == NULL) {
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d114      	bne.n	8002dbc <addTxMsg+0x190>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_ERROR, __func__,
					"Data 0x%x insertion in transmit map : FAILED (Map is full) \n",
					id);
#endif
			freeMemory(link->heap, allocatedBytes,syncData->size );
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	69d8      	ldr	r0, [r3, #28]
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	891b      	ldrh	r3, [r3, #8]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	69f9      	ldr	r1, [r7, #28]
 8002d9e:	f7ff fd1d 	bl	80027dc <freeMemory>
			freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2230      	movs	r2, #48	; 0x30
 8002da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fd16 	bl	80027dc <freeMemory>
			return;
 8002db0:	e004      	b.n	8002dbc <addTxMsg+0x190>
		return;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <addTxMsg+0x190>
		return;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <addTxMsg+0x190>
		return;
 8002dba:	bf00      	nop
		else
			console(CONSOLE_INFO, __func__,
					"Data 0x%x insertion in transmit map : SUCCESS \n", id);
#endif
	}
}
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000474 	.word	0x20000474
 8002dc8:	20000498 	.word	0x20000498

08002dcc <addRxMsgPtr>:
 * @param id	: ID of bytes to be received
 * @param bytes	: Bytes to be received
 * @param size	: Size in bytes
 */
static void addRxMsgPtr(CANLink *link, uint32_t id, uint8_t *bytes,
		uint16_t size) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	807b      	strh	r3, [r7, #2]
	if (bytes == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d042      	beq.n	8002e66 <addRxMsgPtr+0x9a>
		return;
	SyncLayerCANData *syncData;
	int isSyncDataAllocated = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]
	syncData = StaticHashMap.get(link->rxMap, id);
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <addRxMsgPtr+0xac>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	4610      	mov	r0, r2
 8002df0:	4798      	blx	r3
 8002df2:	61f8      	str	r0, [r7, #28]
	if (syncData == NULL) {
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <addRxMsgPtr+0x40>
		syncData = allocateMemory(link->heap, sizeof(SyncLayerCANData));
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2130      	movs	r1, #48	; 0x30
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fcbf 	bl	8002784 <allocateMemory>
 8002e06:	61f8      	str	r0, [r7, #28]
		isSyncDataAllocated = 1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
	}
	if (syncData == NULL) {
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02b      	beq.n	8002e6a <addRxMsgPtr+0x9e>
#ifdef CONSOLE_ENABLE
	else
		console(CONSOLE_INFO, __func__,
				"Sync data for data 0x%x creation : SUCCESS \n", id);
#endif
	if (!isSyncDataAllocated)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d02a      	beq.n	8002e6e <addRxMsgPtr+0xa2>
		return;
	syncData->id = id;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	601a      	str	r2, [r3, #0]
	syncData->size = size;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	811a      	strh	r2, [r3, #8]
	syncData->bytes = bytes;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]
	syncData->waitTill = getMillis()+RECEIVE_TIMEOUT;
 8002e2a:	f7ff fd01 	bl	8002830 <getMillis>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
	syncData->isBytesDynamicallyAllocated = 0;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	HashMap *map = StaticHashMap.insert(link->rxMap, id, syncData);
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <addRxMsgPtr+0xac>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	4798      	blx	r3
 8002e4e:	6178      	str	r0, [r7, #20]
	if (map == NULL) {
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <addRxMsgPtr+0xa4>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_ERROR, __func__,
				"Data 0x%x insertion in receive map : FAILED (Map is full) \n",
				id);
#endif
		freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	2230      	movs	r2, #48	; 0x30
 8002e5c:	69f9      	ldr	r1, [r7, #28]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fcbc 	bl	80027dc <freeMemory>
		return;
 8002e64:	e004      	b.n	8002e70 <addRxMsgPtr+0xa4>
		return;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <addRxMsgPtr+0xa4>
		return;
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <addRxMsgPtr+0xa4>
		return;
 8002e6e:	bf00      	nop
#ifdef CONSOLE_ENABLE
	else
		console(CONSOLE_INFO, __func__,
				"Data 0x%x insertion in transmit map : SUCCESS \n)", id);
#endif
}
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000474 	.word	0x20000474

08002e7c <txThread>:

static void txThread(CANLink *link) {
 8002e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e80:	b099      	sub	sp, #100	; 0x64
 8002e82:	af02      	add	r7, sp, #8
 8002e84:	6078      	str	r0, [r7, #4]
	if (link->isQueue) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8086 	beq.w	8002f9e <txThread+0x122>
		//Send thread
		SyncLayerCANData *syncData = StaticQueue.peek(link->txQueue);
 8002e92:	4b71      	ldr	r3, [pc, #452]	; (8003058 <txThread+0x1dc>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4798      	blx	r3
 8002e9e:	6378      	str	r0, [r7, #52]	; 0x34
		if (syncData != NULL) {
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d046      	beq.n	8002f34 <txThread+0xb8>
			StaticSyncLayerCan.txSendThread(&link->link, syncData);
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <txThread+0x1e0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4798      	blx	r3

			int status = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (syncData->track == SYNC_LAYER_CAN_TRANSMIT_SUCCESS)
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d10b      	bne.n	8002ed8 <txThread+0x5c>
				status = link->txCallback(syncData->id, syncData->bytes,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695c      	ldr	r4, [r3, #20]
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	891a      	ldrh	r2, [r3, #8]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	47a0      	blx	r4
 8002ed4:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002ed6:	e00f      	b.n	8002ef8 <txThread+0x7c>
						syncData->size, 1);
			else if (syncData->track == SYNC_LAYER_CAN_TRANSMIT_FAILED)
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ede:	2b07      	cmp	r3, #7
 8002ee0:	d10a      	bne.n	8002ef8 <txThread+0x7c>
				status = link->txCallback(syncData->id, syncData->bytes,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695c      	ldr	r4, [r3, #20]
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ef0:	891a      	ldrh	r2, [r3, #8]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	47a0      	blx	r4
 8002ef6:	64f8      	str	r0, [r7, #76]	; 0x4c
						syncData->size, 0);
			if (status) {
 8002ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01a      	beq.n	8002f34 <txThread+0xb8>
				if (syncData->isBytesDynamicallyAllocated)
 8002efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <txThread+0x9e>
					freeMemory(link->heap, syncData->bytes,syncData->size);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69d8      	ldr	r0, [r3, #28]
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	891b      	ldrh	r3, [r3, #8]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f7ff fc61 	bl	80027dc <freeMemory>
				freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	2230      	movs	r2, #48	; 0x30
 8002f20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fc5a 	bl	80027dc <freeMemory>
				StaticQueue.dequeue(link->txQueue);
 8002f28:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <txThread+0x1dc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f30:	4610      	mov	r0, r2
 8002f32:	4798      	blx	r3
			}
		}

		// Receive thread
		CANData canData = StaticCANQueue.dequeue(&link->txCanQueue);
 8002f34:	4b4a      	ldr	r3, [pc, #296]	; (8003060 <txThread+0x1e4>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002f3e:	f107 0220 	add.w	r2, r7, #32
 8002f42:	4610      	mov	r0, r2
 8002f44:	4798      	blx	r3
		if (canData.ID != CAN_DATA_NULL.ID) {
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	4b46      	ldr	r3, [pc, #280]	; (8003064 <txThread+0x1e8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f000 80ff 	beq.w	8003150 <txThread+0x2d4>
			if (canData.ID == link->link.startAckID
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d005      	beq.n	8002f68 <txThread+0xec>
					|| canData.ID == link->link.endAckID) {
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	f040 80f4 	bne.w	8003150 <txThread+0x2d4>
				SyncLayerCANData *syncData = StaticQueue.peek(link->txQueue);
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <txThread+0x1dc>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f70:	4610      	mov	r0, r2
 8002f72:	4798      	blx	r3
 8002f74:	6338      	str	r0, [r7, #48]	; 0x30
				if (syncData != NULL)
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80e9 	beq.w	8003150 <txThread+0x2d4>
					StaticSyncLayerCan.txReceiveThread(&link->link, syncData,
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <txThread+0x1e0>)
 8002f80:	685c      	ldr	r4, [r3, #4]
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	6a39      	ldr	r1, [r7, #32]
							canData.ID, canData.byte, canData.len);
 8002f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
					StaticSyncLayerCan.txReceiveThread(&link->link, syncData,
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f107 0220 	add.w	r2, r7, #32
 8002f90:	3204      	adds	r2, #4
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	460a      	mov	r2, r1
 8002f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f9a:	47a0      	blx	r4
					StaticSyncLayerCan.txReceiveThread(&link->link, syncData,
							canData.ID, canData.byte, canData.len);
			}
		}
	}
}
 8002f9c:	e0d8      	b.n	8003150 <txThread+0x2d4>
	} else {
 8002f9e:	466b      	mov	r3, sp
 8002fa0:	461e      	mov	r6, r3
		int key[link->txMap->size];
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	6819      	ldr	r1, [r3, #0]
 8002fa8:	1e4b      	subs	r3, r1, #1
 8002faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fac:	460a      	mov	r2, r1
 8002fae:	2300      	movs	r3, #0
 8002fb0:	4690      	mov	r8, r2
 8002fb2:	4699      	mov	r9, r3
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002fc0:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002fc4:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002fc8:	460a      	mov	r2, r1
 8002fca:	2300      	movs	r3, #0
 8002fcc:	4614      	mov	r4, r2
 8002fce:	461d      	mov	r5, r3
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	016b      	lsls	r3, r5, #5
 8002fda:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002fde:	0162      	lsls	r2, r4, #5
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	3307      	adds	r3, #7
 8002fe6:	08db      	lsrs	r3, r3, #3
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	ebad 0d03 	sub.w	sp, sp, r3
 8002fee:	ab02      	add	r3, sp, #8
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	089b      	lsrs	r3, r3, #2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
		StaticHashMap.getKeys(link->txMap, key, &keyLen);
 8002ff8:	4b1b      	ldr	r3, [pc, #108]	; (8003068 <txThread+0x1ec>)
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a10      	ldr	r0, [r2, #32]
 8003000:	f107 021c 	add.w	r2, r7, #28
 8003004:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003006:	4798      	blx	r3
		for (int i = 0; i < keyLen; i++) {
 8003008:	2300      	movs	r3, #0
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
 800300c:	e063      	b.n	80030d6 <txThread+0x25a>
			SyncLayerCANData *syncData = StaticHashMap.get(link->txMap, key[i]);
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <txThread+0x1ec>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6a10      	ldr	r0, [r2, #32]
 8003016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003018:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800301a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800301e:	4611      	mov	r1, r2
 8003020:	4798      	blx	r3
 8003022:	63b8      	str	r0, [r7, #56]	; 0x38
			StaticSyncLayerCan.txSendThread(&link->link, syncData);
 8003024:	4b0d      	ldr	r3, [pc, #52]	; (800305c <txThread+0x1e0>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800302c:	4610      	mov	r0, r2
 800302e:	4798      	blx	r3
			int status = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	657b      	str	r3, [r7, #84]	; 0x54
			if (syncData->track == SYNC_LAYER_CAN_TRANSMIT_SUCCESS)
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303a:	2b06      	cmp	r3, #6
 800303c:	d116      	bne.n	800306c <txThread+0x1f0>
				status = link->txCallback(syncData->id, syncData->bytes,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695c      	ldr	r4, [r3, #20]
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	891a      	ldrh	r2, [r3, #8]
 800304e:	2301      	movs	r3, #1
 8003050:	47a0      	blx	r4
 8003052:	6578      	str	r0, [r7, #84]	; 0x54
 8003054:	e01a      	b.n	800308c <txThread+0x210>
 8003056:	bf00      	nop
 8003058:	20000498 	.word	0x20000498
 800305c:	20000048 	.word	0x20000048
 8003060:	2000001c 	.word	0x2000001c
 8003064:	2000000c 	.word	0x2000000c
 8003068:	20000474 	.word	0x20000474
			else if (syncData->track == SYNC_LAYER_CAN_TRANSMIT_FAILED)
 800306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003072:	2b07      	cmp	r3, #7
 8003074:	d10a      	bne.n	800308c <txThread+0x210>
				status = link->txCallback(syncData->id, syncData->bytes,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695c      	ldr	r4, [r3, #20]
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	891a      	ldrh	r2, [r3, #8]
 8003086:	2300      	movs	r3, #0
 8003088:	47a0      	blx	r4
 800308a:	6578      	str	r0, [r7, #84]	; 0x54
			if (status) {
 800308c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01e      	beq.n	80030d0 <txThread+0x254>
				if (syncData->isBytesDynamicallyAllocated)
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <txThread+0x232>
					freeMemory(link->heap, syncData->bytes,syncData->size);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69d8      	ldr	r0, [r3, #28]
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	6859      	ldr	r1, [r3, #4]
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	891b      	ldrh	r3, [r3, #8]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f7ff fb97 	bl	80027dc <freeMemory>
				freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	2230      	movs	r2, #48	; 0x30
 80030b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fb90 	bl	80027dc <freeMemory>
				StaticHashMap.delete(link->txMap, key[i]);
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <txThread+0x2e0>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6a10      	ldr	r0, [r2, #32]
 80030c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80030c8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80030cc:	4611      	mov	r1, r2
 80030ce:	4798      	blx	r3
		for (int i = 0; i < keyLen; i++) {
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	3301      	adds	r3, #1
 80030d4:	653b      	str	r3, [r7, #80]	; 0x50
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80030da:	429a      	cmp	r2, r3
 80030dc:	db97      	blt.n	800300e <txThread+0x192>
		CANData canData = StaticCANQueue.dequeue(&link->txCanQueue);
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <txThread+0x2e4>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 80030e8:	f107 020c 	add.w	r2, r7, #12
 80030ec:	4610      	mov	r0, r2
 80030ee:	4798      	blx	r3
		if (canData.ID != CAN_DATA_NULL.ID) {
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <txThread+0x2e8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d029      	beq.n	800314e <txThread+0x2d2>
			uint32_t dataID = canData.ID;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	643b      	str	r3, [r7, #64]	; 0x40
			if (canData.ID == link->link.startAckID
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	429a      	cmp	r2, r3
 8003106:	d004      	beq.n	8003112 <txThread+0x296>
					|| canData.ID == link->link.endAckID) {
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	429a      	cmp	r2, r3
 8003110:	d11d      	bne.n	800314e <txThread+0x2d2>
				dataID = *(uint32_t*) canData.byte;
 8003112:	f107 030c 	add.w	r3, r7, #12
 8003116:	3304      	adds	r3, #4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	643b      	str	r3, [r7, #64]	; 0x40
				SyncLayerCANData *syncData = StaticHashMap.get(link->txMap,
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <txThread+0x2e0>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6a12      	ldr	r2, [r2, #32]
 8003124:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003126:	4610      	mov	r0, r2
 8003128:	4798      	blx	r3
 800312a:	63f8      	str	r0, [r7, #60]	; 0x3c
				if (syncData != NULL)
 800312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <txThread+0x2d2>
					StaticSyncLayerCan.txReceiveThread(&link->link, syncData,
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <txThread+0x2ec>)
 8003134:	685c      	ldr	r4, [r3, #4]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	68f9      	ldr	r1, [r7, #12]
							canData.ID, canData.byte, canData.len);
 800313a:	7e3b      	ldrb	r3, [r7, #24]
					StaticSyncLayerCan.txReceiveThread(&link->link, syncData,
 800313c:	b29b      	uxth	r3, r3
 800313e:	f107 020c 	add.w	r2, r7, #12
 8003142:	3204      	adds	r2, #4
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	460a      	mov	r2, r1
 800314a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800314c:	47a0      	blx	r4
 800314e:	46b5      	mov	sp, r6
}
 8003150:	bf00      	nop
 8003152:	375c      	adds	r7, #92	; 0x5c
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800315a:	bf00      	nop
 800315c:	20000474 	.word	0x20000474
 8003160:	2000001c 	.word	0x2000001c
 8003164:	2000000c 	.word	0x2000000c
 8003168:	20000048 	.word	0x20000048

0800316c <rxThread>:

static void rxThread(CANLink *link) {
 800316c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003170:	b093      	sub	sp, #76	; 0x4c
 8003172:	af02      	add	r7, sp, #8
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	466b      	mov	r3, sp
 8003178:	461e      	mov	r6, r3
	//Send thread
	int keyLen;
	int key[link->rxMap->size];
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	1e4b      	subs	r3, r1, #1
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003184:	460a      	mov	r2, r1
 8003186:	2300      	movs	r3, #0
 8003188:	4690      	mov	r8, r2
 800318a:	4699      	mov	r9, r3
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003198:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800319c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80031a0:	460a      	mov	r2, r1
 80031a2:	2300      	movs	r3, #0
 80031a4:	4614      	mov	r4, r2
 80031a6:	461d      	mov	r5, r3
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	016b      	lsls	r3, r5, #5
 80031b2:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80031b6:	0162      	lsls	r2, r4, #5
 80031b8:	460b      	mov	r3, r1
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	3307      	adds	r3, #7
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	ebad 0d03 	sub.w	sp, sp, r3
 80031c6:	ab02      	add	r3, sp, #8
 80031c8:	3303      	adds	r3, #3
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	62bb      	str	r3, [r7, #40]	; 0x28
	StaticHashMap.getKeys(link->rxMap, key, &keyLen);
 80031d0:	4b7c      	ldr	r3, [pc, #496]	; (80033c4 <rxThread+0x258>)
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80031d8:	f107 021c 	add.w	r2, r7, #28
 80031dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031de:	4798      	blx	r3
	for (int i = 0; i < keyLen; i++) {
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
 80031e4:	e058      	b.n	8003298 <rxThread+0x12c>
		SyncLayerCANData *syncData = StaticHashMap.get(link->rxMap, key[i]);
 80031e6:	4b77      	ldr	r3, [pc, #476]	; (80033c4 <rxThread+0x258>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80031ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80031f6:	4611      	mov	r1, r2
 80031f8:	4798      	blx	r3
 80031fa:	6238      	str	r0, [r7, #32]
		StaticSyncLayerCan.rxSendThread(&link->link, syncData);
 80031fc:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <rxThread+0x25c>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6a39      	ldr	r1, [r7, #32]
 8003204:	4610      	mov	r0, r2
 8003206:	4798      	blx	r3

		int status = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
		if (syncData->track == SYNC_LAYER_CAN_RECEIVE_SUCCESS)
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003212:	2b08      	cmp	r3, #8
 8003214:	d10b      	bne.n	800322e <rxThread+0xc2>
			status = link->rxCallback(syncData->id, syncData->bytes,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699c      	ldr	r4, [r3, #24]
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	891a      	ldrh	r2, [r3, #8]
 8003226:	2301      	movs	r3, #1
 8003228:	47a0      	blx	r4
 800322a:	6378      	str	r0, [r7, #52]	; 0x34
 800322c:	e00f      	b.n	800324e <rxThread+0xe2>
					syncData->size, 1);
		else if (syncData->track == SYNC_LAYER_CAN_RECEIVE_FAILED)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003234:	2b09      	cmp	r3, #9
 8003236:	d10a      	bne.n	800324e <rxThread+0xe2>
			status = link->rxCallback(syncData->id, syncData->bytes,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699c      	ldr	r4, [r3, #24]
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	891a      	ldrh	r2, [r3, #8]
 8003248:	2300      	movs	r3, #0
 800324a:	47a0      	blx	r4
 800324c:	6378      	str	r0, [r7, #52]	; 0x34
					syncData->size, 0);

		if (status) {
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01e      	beq.n	8003292 <rxThread+0x126>
			if (syncData->isBytesDynamicallyAllocated)
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <rxThread+0x104>
				freeMemory(link->heap, syncData->bytes,syncData->size);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69d8      	ldr	r0, [r3, #28]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	891b      	ldrh	r3, [r3, #8]
 800326a:	461a      	mov	r2, r3
 800326c:	f7ff fab6 	bl	80027dc <freeMemory>
			freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	2230      	movs	r2, #48	; 0x30
 8003276:	6a39      	ldr	r1, [r7, #32]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff faaf 	bl	80027dc <freeMemory>
			StaticHashMap.delete(link->rxMap, key[i]);
 800327e:	4b51      	ldr	r3, [pc, #324]	; (80033c4 <rxThread+0x258>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800328a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800328e:	4611      	mov	r1, r2
 8003290:	4798      	blx	r3
	for (int i = 0; i < keyLen; i++) {
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	3301      	adds	r3, #1
 8003296:	633b      	str	r3, [r7, #48]	; 0x30
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329c:	429a      	cmp	r2, r3
 800329e:	dba2      	blt.n	80031e6 <rxThread+0x7a>
		}
	}

	// Receive thread
	CANData canData = StaticCANQueue.dequeue(&link->rxCanQueue);
 80032a0:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <rxThread+0x260>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	f502 7106 	add.w	r1, r2, #536	; 0x218
 80032aa:	f107 020c 	add.w	r2, r7, #12
 80032ae:	4610      	mov	r0, r2
 80032b0:	4798      	blx	r3
	if (canData.ID != CAN_DATA_NULL.ID) {
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <rxThread+0x264>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d07a      	beq.n	80033b2 <rxThread+0x246>
		uint32_t dataID = canData.ID;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
		SyncLayerCANData *syncData;
		if (canData.ID == link->link.startReqID) {
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d150      	bne.n	800336c <rxThread+0x200>
			dataID = *(uint32_t*) canData.byte;
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	3304      	adds	r3, #4
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
			uint16_t size = *(uint16_t*) (&canData.byte[4]);
 80032d4:	f107 030c 	add.w	r3, r7, #12
 80032d8:	3308      	adds	r3, #8
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (!StaticHashMap.isKeyExist(link->rxMap, dataID)) {
 80032de:	4b39      	ldr	r3, [pc, #228]	; (80033c4 <rxThread+0x258>)
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032e8:	4610      	mov	r0, r2
 80032ea:	4798      	blx	r3
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d14e      	bne.n	8003390 <rxThread+0x224>
				syncData = allocateMemory(link->heap,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	2130      	movs	r1, #48	; 0x30
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fa43 	bl	8002784 <allocateMemory>
 80032fe:	63f8      	str	r0, [r7, #60]	; 0x3c
						sizeof(SyncLayerCANData));
				if (syncData == NULL) {
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d057      	beq.n	80033b6 <rxThread+0x24a>
				else
					console(CONSOLE_INFO, __func__,
							"Sync data for data 0x%x creation : SUCCESS\n",
							dataID);
#endif
				syncData->isBytesDynamicallyAllocated = 1;
 8003306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003308:	2201      	movs	r2, #1
 800330a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				syncData->id = dataID;
 800330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003312:	601a      	str	r2, [r3, #0]
				syncData->size = size;
 8003314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003316:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003318:	811a      	strh	r2, [r3, #8]
				syncData->bytes = allocateMemory(link->heap, size);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fa2e 	bl	8002784 <allocateMemory>
 8003328:	4602      	mov	r2, r0
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332c:	605a      	str	r2, [r3, #4]
				if (syncData->bytes == NULL) {
 800332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <rxThread+0x1da>
#ifdef CONSOLE_ENABLE
					console(CONSOLE_ERROR, __func__,
							"Bytes for data 0x%x allocation : FAILED (heap is full)\n",
							dataID);
#endif
					freeMemory(link->heap, syncData,sizeof(SyncLayerCANData));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	2230      	movs	r2, #48	; 0x30
 800333c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fa4c 	bl	80027dc <freeMemory>
					return;
 8003344:	e038      	b.n	80033b8 <rxThread+0x24c>
				else
					console(CONSOLE_INFO, __func__,
							"Bytes for data 0x%x allocation : SUCCESS\n",
							dataID);
#endif
				syncData->track = SYNC_LAYER_CAN_START_REQ;
 8003346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				syncData->waitTill = getMillis()+RECEIVE_TIMEOUT;
 800334e:	f7ff fa6f 	bl	8002830 <getMillis>
 8003352:	4603      	mov	r3, r0
 8003354:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
				StaticHashMap.insert(link->rxMap, dataID, syncData);
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <rxThread+0x258>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003364:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003368:	4798      	blx	r3
 800336a:	e011      	b.n	8003390 <rxThread+0x224>
			}
		} else {
			if (canData.ID == link->link.endReqID)
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d104      	bne.n	8003380 <rxThread+0x214>
				dataID = *(uint32_t*) canData.byte;
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	3304      	adds	r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
			syncData = StaticHashMap.get(link->rxMap, dataID);
 8003380:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <rxThread+0x258>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800338a:	4610      	mov	r0, r2
 800338c:	4798      	blx	r3
 800338e:	63f8      	str	r0, [r7, #60]	; 0x3c
		}
		if (syncData != NULL)
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <rxThread+0x246>
			StaticSyncLayerCan.rxReceiveThread(&link->link, syncData,
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <rxThread+0x25c>)
 8003398:	68dc      	ldr	r4, [r3, #12]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	68f9      	ldr	r1, [r7, #12]
					canData.ID, canData.byte, canData.len);
 800339e:	7e3b      	ldrb	r3, [r7, #24]
			StaticSyncLayerCan.rxReceiveThread(&link->link, syncData,
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f107 020c 	add.w	r2, r7, #12
 80033a6:	3204      	adds	r2, #4
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	460a      	mov	r2, r1
 80033ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033b0:	47a0      	blx	r4
 80033b2:	46b5      	mov	sp, r6
 80033b4:	e001      	b.n	80033ba <rxThread+0x24e>
					return;
 80033b6:	bf00      	nop
 80033b8:	46b5      	mov	sp, r6
	}

}
 80033ba:	3744      	adds	r7, #68	; 0x44
 80033bc:	46bd      	mov	sp, r7
 80033be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033c2:	bf00      	nop
 80033c4:	20000474 	.word	0x20000474
 80033c8:	20000048 	.word	0x20000048
 80033cc:	2000001c 	.word	0x2000001c
 80033d0:	2000000c 	.word	0x2000000c

080033d4 <thread>:

/**
 * This should be called continuously in while loop
 * @param link	: Pointer to instance of CAN link
 */
static void thread(CANLink *link) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	txThread(link);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fd4d 	bl	8002e7c <txThread>
	rxThread(link);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff fec2 	bl	800316c <rxThread>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <canReceive>:
 * This should be called when CAN message is received
 * @param link	: Pointer to instance if CAN link
 * @param id	: ID of bytes received
 * @param bytes	: Bytes received
 */
static void canReceive(CANLink *link, uint32_t id, uint8_t *bytes, uint16_t len) {
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	807b      	strh	r3, [r7, #2]
	if (id == link->link.startAckID || id == link->link.endAckID) {
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	d004      	beq.n	8003412 <canReceive+0x22>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	d10a      	bne.n	8003428 <canReceive+0x38>
		StaticCANQueue.enqueue(&link->txCanQueue, id, bytes, len);
 8003412:	4b1c      	ldr	r3, [pc, #112]	; (8003484 <canReceive+0x94>)
 8003414:	685c      	ldr	r4, [r3, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	47a0      	blx	r4
 8003426:	e029      	b.n	800347c <canReceive+0x8c>
	} else if (id == link->link.startReqID || id == link->link.endReqID) {
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d004      	beq.n	800343c <canReceive+0x4c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d10a      	bne.n	8003452 <canReceive+0x62>
		StaticCANQueue.enqueue(&link->rxCanQueue, id, bytes, len);
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <canReceive+0x94>)
 800343e:	685c      	ldr	r4, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8003446:	887b      	ldrh	r3, [r7, #2]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	68b9      	ldr	r1, [r7, #8]
 800344e:	47a0      	blx	r4
 8003450:	e014      	b.n	800347c <canReceive+0x8c>
	} else {
		if (StaticHashMap.isKeyExist(link->rxMap, id))
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <canReceive+0x98>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4610      	mov	r0, r2
 800345e:	4798      	blx	r3
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <canReceive+0x8c>
			StaticCANQueue.enqueue(&link->rxCanQueue, id, bytes, len);
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <canReceive+0x94>)
 8003468:	685c      	ldr	r4, [r3, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f503 7006 	add.w	r0, r3, #536	; 0x218
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	47a0      	blx	r4
	}
}
 800347a:	e7ff      	b.n	800347c <canReceive+0x8c>
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bd90      	pop	{r4, r7, pc}
 8003484:	2000001c 	.word	0x2000001c
 8003488:	20000474 	.word	0x20000474

0800348c <canInit>:
#ifdef TEST_ENABLE
CANLink *canLink1;
CANLink *canLink2;

extern CAN_HandleTypeDef hcan;
static void canInit() {
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;

	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8003492:	2301      	movs	r3, #1
 8003494:	623b      	str	r3, [r7, #32]
	can_filter.FilterBank = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
	can_filter.FilterIdHigh = 0x0;
 800349e:	2300      	movs	r3, #0
 80034a0:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80034b2:	2301      	movs	r3, #1
 80034b4:	61fb      	str	r3, [r7, #28]
	can_filter.SlaveStartFilterBank = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &can_filter);
 80034ba:	463b      	mov	r3, r7
 80034bc:	4619      	mov	r1, r3
 80034be:	4812      	ldr	r0, [pc, #72]	; (8003508 <canInit+0x7c>)
 80034c0:	f7fd fa51 	bl	8000966 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 80034c4:	2102      	movs	r1, #2
 80034c6:	4810      	ldr	r0, [pc, #64]	; (8003508 <canInit+0x7c>)
 80034c8:	f7fd fd4a 	bl	8000f60 <HAL_CAN_ActivateNotification>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <canInit+0x4c>
			!= HAL_OK)
		printf("CAN RX Interrupt Activate : Failed\n");
 80034d2:	480e      	ldr	r0, [pc, #56]	; (800350c <canInit+0x80>)
 80034d4:	f002 f91a 	bl	800570c <puts>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80034d8:	2101      	movs	r1, #1
 80034da:	480b      	ldr	r0, [pc, #44]	; (8003508 <canInit+0x7c>)
 80034dc:	f7fd fd40 	bl	8000f60 <HAL_CAN_ActivateNotification>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <canInit+0x60>
		printf("CAN TX Interrupt Activate : Failed\n");
 80034e6:	480a      	ldr	r0, [pc, #40]	; (8003510 <canInit+0x84>)
 80034e8:	f002 f910 	bl	800570c <puts>
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80034ec:	4806      	ldr	r0, [pc, #24]	; (8003508 <canInit+0x7c>)
 80034ee:	f7fd fb03 	bl	8000af8 <HAL_CAN_Start>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <canInit+0x72>
		printf("CAN Start : Failed\n");
 80034f8:	4806      	ldr	r0, [pc, #24]	; (8003514 <canInit+0x88>)
 80034fa:	f002 f907 	bl	800570c <puts>
}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20000538 	.word	0x20000538
 800350c:	08006520 	.word	0x08006520
 8003510:	08006544 	.word	0x08006544
 8003514:	08006568 	.word	0x08006568

08003518 <canInterrupt>:

static CAN_RxHeaderTypeDef rx_header;
static uint8_t bytes[8];
void canInterrupt() {
 8003518:	b598      	push	{r3, r4, r7, lr}
 800351a:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, bytes);
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <canInterrupt+0x40>)
 800351e:	4a0f      	ldr	r2, [pc, #60]	; (800355c <canInterrupt+0x44>)
 8003520:	2100      	movs	r1, #0
 8003522:	480f      	ldr	r0, [pc, #60]	; (8003560 <canInterrupt+0x48>)
 8003524:	f7fd fbfb 	bl	8000d1e <HAL_CAN_GetRxMessage>
//	printf("Interrupt-> 0x%02x : ", (unsigned int) rx_header.ExtId);
//	for (int i = 0; i < rx_header.DLC; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");
	StaticCANLink.canReceive(canLink1, rx_header.ExtId, bytes, rx_header.DLC);
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <canInterrupt+0x4c>)
 800352a:	695c      	ldr	r4, [r3, #20]
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <canInterrupt+0x50>)
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <canInterrupt+0x44>)
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <canInterrupt+0x44>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	b29b      	uxth	r3, r3
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <canInterrupt+0x40>)
 800353c:	47a0      	blx	r4
	StaticCANLink.canReceive(canLink2, rx_header.ExtId, bytes, rx_header.DLC);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <canInterrupt+0x4c>)
 8003540:	695c      	ldr	r4, [r3, #20]
 8003542:	4b0a      	ldr	r3, [pc, #40]	; (800356c <canInterrupt+0x54>)
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <canInterrupt+0x44>)
 8003548:	6859      	ldr	r1, [r3, #4]
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <canInterrupt+0x44>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4a01      	ldr	r2, [pc, #4]	; (8003558 <canInterrupt+0x40>)
 8003552:	47a0      	blx	r4
}
 8003554:	bf00      	nop
 8003556:	bd98      	pop	{r3, r4, r7, pc}
 8003558:	20002e2c 	.word	0x20002e2c
 800355c:	20002e10 	.word	0x20002e10
 8003560:	20000538 	.word	0x20000538
 8003564:	20000030 	.word	0x20000030
 8003568:	20002e08 	.word	0x20002e08
 800356c:	20002e0c 	.word	0x20002e0c

08003570 <canSend>:

static CAN_TxHeaderTypeDef tx_header;
static uint32_t tx_mailbox;
static int canSend(uint32_t id, uint8_t *bytes, uint8_t len) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	4613      	mov	r3, r2
 800357c:	71fb      	strb	r3, [r7, #7]
	tx_header.DLC = len;
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	4a0e      	ldr	r2, [pc, #56]	; (80035bc <canSend+0x4c>)
 8003582:	6113      	str	r3, [r2, #16]
	tx_header.ExtId = id;
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <canSend+0x4c>)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6053      	str	r3, [r2, #4]
	tx_header.IDE = CAN_ID_EXT;
 800358a:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <canSend+0x4c>)
 800358c:	2204      	movs	r2, #4
 800358e:	609a      	str	r2, [r3, #8]
	tx_header.RTR = CAN_RTR_DATA;
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <canSend+0x4c>)
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
	tx_header.TransmitGlobalTime = DISABLE;
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <canSend+0x4c>)
 8003598:	2200      	movs	r2, #0
 800359a:	751a      	strb	r2, [r3, #20]

//	printf("canSend-> 0x%02x : ", (unsigned int) id);
//	for (int i = 0; i < len; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");
	return HAL_CAN_AddTxMessage(&hcan, &tx_header, bytes, &tx_mailbox) == HAL_OK;
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <canSend+0x50>)
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4906      	ldr	r1, [pc, #24]	; (80035bc <canSend+0x4c>)
 80035a2:	4808      	ldr	r0, [pc, #32]	; (80035c4 <canSend+0x54>)
 80035a4:	f7fd faec 	bl	8000b80 <HAL_CAN_AddTxMessage>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf0c      	ite	eq
 80035ae:	2301      	moveq	r3, #1
 80035b0:	2300      	movne	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20002e34 	.word	0x20002e34
 80035c0:	20002e4c 	.word	0x20002e4c
 80035c4:	20000538 	.word	0x20000538

080035c8 <txCallback>:

int txCallback(uint32_t id, uint8_t *bytes, uint16_t size, int status) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
	printf("TX|0x%0x>", (int) id);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4619      	mov	r1, r3
 80035dc:	4811      	ldr	r0, [pc, #68]	; (8003624 <txCallback+0x5c>)
 80035de:	f001 fffb 	bl	80055d8 <iprintf>
	for (int i = 0; i < 8; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e00a      	b.n	80035fe <txCallback+0x36>
		printf(" %d ", bytes[i]);
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	4619      	mov	r1, r3
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <txCallback+0x60>)
 80035f4:	f001 fff0 	bl	80055d8 <iprintf>
	for (int i = 0; i < 8; i++)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3301      	adds	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b07      	cmp	r3, #7
 8003602:	ddf1      	ble.n	80035e8 <txCallback+0x20>
	if (!status) {
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <txCallback+0x4c>
		printf("(failed)\n");
 800360a:	4808      	ldr	r0, [pc, #32]	; (800362c <txCallback+0x64>)
 800360c:	f002 f87e 	bl	800570c <puts>
		return 1;
 8003610:	2301      	movs	r3, #1
 8003612:	e003      	b.n	800361c <txCallback+0x54>
	}
	printf("\n");
 8003614:	200a      	movs	r0, #10
 8003616:	f001 fff7 	bl	8005608 <putchar>
	return 1;
 800361a:	2301      	movs	r3, #1
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	0800657c 	.word	0x0800657c
 8003628:	08006588 	.word	0x08006588
 800362c:	08006590 	.word	0x08006590

08003630 <rxCallback>:

int rxCallback(uint32_t id, uint8_t *bytes, uint16_t size, int status) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
	printf("RX|0x%0x>", (int) id);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4619      	mov	r1, r3
 8003644:	4811      	ldr	r0, [pc, #68]	; (800368c <rxCallback+0x5c>)
 8003646:	f001 ffc7 	bl	80055d8 <iprintf>
	for (int i = 0; i < 8; i++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e00a      	b.n	8003666 <rxCallback+0x36>
		printf(" %d ", bytes[i]);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4413      	add	r3, r2
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	480d      	ldr	r0, [pc, #52]	; (8003690 <rxCallback+0x60>)
 800365c:	f001 ffbc 	bl	80055d8 <iprintf>
	for (int i = 0; i < 8; i++)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3301      	adds	r3, #1
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b07      	cmp	r3, #7
 800366a:	ddf1      	ble.n	8003650 <rxCallback+0x20>
	if (!status) {
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <rxCallback+0x4c>
		printf("(failed)\n");
 8003672:	4808      	ldr	r0, [pc, #32]	; (8003694 <rxCallback+0x64>)
 8003674:	f002 f84a 	bl	800570c <puts>
		return 1;
 8003678:	2301      	movs	r3, #1
 800367a:	e003      	b.n	8003684 <rxCallback+0x54>
	}
	printf("\n");
 800367c:	200a      	movs	r0, #10
 800367e:	f001 ffc3 	bl	8005608 <putchar>
	return 1;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	0800659c 	.word	0x0800659c
 8003690:	08006588 	.word	0x08006588
 8003694:	08006590 	.word	0x08006590

08003698 <run>:
		StaticCANLink.thread(canLink1);
		StaticCANLink.thread(canLink2);
	}
}
#else
void run() {
 8003698:	b590      	push	{r4, r7, lr}
 800369a:	b093      	sub	sp, #76	; 0x4c
 800369c:	af06      	add	r7, sp, #24
	canInit();
 800369e:	f7ff fef5 	bl	800348c <canInit>
	for (int i = 0; i < sizeof(dataBytes1); i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036a6:	e009      	b.n	80036bc <run+0x24>
		dataBytes1[i] = i;
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	b2d9      	uxtb	r1, r3
 80036ac:	4a42      	ldr	r2, [pc, #264]	; (80037b8 <run+0x120>)
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	4413      	add	r3, r2
 80036b2:	460a      	mov	r2, r1
 80036b4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(dataBytes1); i++)
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	3301      	adds	r3, #1
 80036ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	2b07      	cmp	r3, #7
 80036c0:	d9f2      	bls.n	80036a8 <run+0x10>
	for (int i = 0; i < sizeof(dataBytes2); i++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036c6:	e009      	b.n	80036dc <run+0x44>
		dataBytes2[i] = i;
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	b2d9      	uxtb	r1, r3
 80036cc:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <run+0x124>)
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	4413      	add	r3, r2
 80036d2:	460a      	mov	r2, r1
 80036d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(dataBytes2); i++)
 80036d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d8:	3301      	adds	r3, #1
 80036da:	62bb      	str	r3, [r7, #40]	; 0x28
 80036dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036de:	2b0f      	cmp	r3, #15
 80036e0:	d9f2      	bls.n	80036c8 <run+0x30>
	for (int i = 0; i < sizeof(dataBytes3); i++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	e009      	b.n	80036fc <run+0x64>
		dataBytes3[i] = i;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	b2d9      	uxtb	r1, r3
 80036ec:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <run+0x128>)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	4413      	add	r3, r2
 80036f2:	460a      	mov	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(dataBytes3); i++)
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	3301      	adds	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	2b1f      	cmp	r3, #31
 8003700:	d9f2      	bls.n	80036e8 <run+0x50>

//	BuddyHeap heap1 = StaticBuddyHeap.new(buffer1, sizeof(buffer1), 8);
	BuddyHeap heap2 = StaticBuddyHeap.new(buffer2, sizeof(buffer2), 8);
 8003702:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <run+0x12c>)
 8003704:	681c      	ldr	r4, [r3, #0]
 8003706:	1d38      	adds	r0, r7, #4
 8003708:	2308      	movs	r3, #8
 800370a:	f44f 6204 	mov.w	r2, #2112	; 0x840
 800370e:	492e      	ldr	r1, [pc, #184]	; (80037c8 <run+0x130>)
 8003710:	47a0      	blx	r4
	canLink1 = StaticCANLink.new(0x1, 0x2, 0x3, 0x4, canSend, txCallback,
 8003712:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <run+0x134>)
 8003714:	681c      	ldr	r4, [r3, #0]
 8003716:	2300      	movs	r3, #0
 8003718:	9304      	str	r3, [sp, #16]
 800371a:	2300      	movs	r3, #0
 800371c:	9303      	str	r3, [sp, #12]
 800371e:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <run+0x138>)
 8003720:	9302      	str	r3, [sp, #8]
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <run+0x13c>)
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <run+0x140>)
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	2304      	movs	r3, #4
 800372c:	2203      	movs	r2, #3
 800372e:	2102      	movs	r1, #2
 8003730:	2001      	movs	r0, #1
 8003732:	47a0      	blx	r4
 8003734:	4603      	mov	r3, r0
 8003736:	4a29      	ldr	r2, [pc, #164]	; (80037dc <run+0x144>)
 8003738:	6013      	str	r3, [r2, #0]
			rxCallback, NULL, 0);
	canLink2 = StaticCANLink.new(0x11, 0x22, 0x33, 0x44, canSend, txCallback,
 800373a:	4b24      	ldr	r3, [pc, #144]	; (80037cc <run+0x134>)
 800373c:	681c      	ldr	r4, [r3, #0]
 800373e:	2300      	movs	r3, #0
 8003740:	9304      	str	r3, [sp, #16]
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	9303      	str	r3, [sp, #12]
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <run+0x138>)
 8003748:	9302      	str	r3, [sp, #8]
 800374a:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <run+0x13c>)
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	4b22      	ldr	r3, [pc, #136]	; (80037d8 <run+0x140>)
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2344      	movs	r3, #68	; 0x44
 8003754:	2233      	movs	r2, #51	; 0x33
 8003756:	2122      	movs	r1, #34	; 0x22
 8003758:	2011      	movs	r0, #17
 800375a:	47a0      	blx	r4
 800375c:	4603      	mov	r3, r0
 800375e:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <run+0x148>)
 8003760:	6013      	str	r3, [r2, #0]
			rxCallback, &heap2, 0);

	HAL_Delay(5000);
 8003762:	f241 3088 	movw	r0, #5000	; 0x1388
 8003766:	f7fc ffdf 	bl	8000728 <HAL_Delay>
	printf("----------------------RX INITIATING-----------------------\n");
 800376a:	481e      	ldr	r0, [pc, #120]	; (80037e4 <run+0x14c>)
 800376c:	f001 ffce 	bl	800570c <puts>

	uint32_t prevMillis = HAL_GetTick();
 8003770:	f7fc ffd0 	bl	8000714 <HAL_GetTick>
 8003774:	6238      	str	r0, [r7, #32]
	while (1) {
		if ((HAL_GetTick() - prevMillis) > 300) {
 8003776:	f7fc ffcd 	bl	8000714 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003784:	d90a      	bls.n	800379c <run+0x104>
			StaticCANLink.addTxMsgPtr(canLink1, 0xAA, dataBytes1,
 8003786:	4b11      	ldr	r3, [pc, #68]	; (80037cc <run+0x134>)
 8003788:	685c      	ldr	r4, [r3, #4]
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <run+0x144>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	2308      	movs	r3, #8
 8003790:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <run+0x120>)
 8003792:	21aa      	movs	r1, #170	; 0xaa
 8003794:	47a0      	blx	r4
//					sizeof(dataBytes1));
//			StaticCANLink.addTxMsgPtr(canLink2, 0xEE, dataBytes2,
//					sizeof(dataBytes2));
//			StaticCANLink.addTxMsgPtr(canLink2, 0xFF, dataBytes3,
//					sizeof(dataBytes3));
			prevMillis = HAL_GetTick();
 8003796:	f7fc ffbd 	bl	8000714 <HAL_GetTick>
 800379a:	6238      	str	r0, [r7, #32]
		}
		StaticCANLink.thread(canLink1);
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <run+0x134>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	4a0e      	ldr	r2, [pc, #56]	; (80037dc <run+0x144>)
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	4610      	mov	r0, r2
 80037a6:	4798      	blx	r3
		StaticCANLink.thread(canLink2);
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <run+0x134>)
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <run+0x148>)
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4610      	mov	r0, r2
 80037b2:	4798      	blx	r3
		if ((HAL_GetTick() - prevMillis) > 300) {
 80037b4:	e7df      	b.n	8003776 <run+0xde>
 80037b6:	bf00      	nop
 80037b8:	20002e50 	.word	0x20002e50
 80037bc:	20002e58 	.word	0x20002e58
 80037c0:	20002e68 	.word	0x20002e68
 80037c4:	20000058 	.word	0x20000058
 80037c8:	20002e88 	.word	0x20002e88
 80037cc:	20000030 	.word	0x20000030
 80037d0:	08003631 	.word	0x08003631
 80037d4:	080035c9 	.word	0x080035c9
 80037d8:	08003571 	.word	0x08003571
 80037dc:	20002e08 	.word	0x20002e08
 80037e0:	20002e0c 	.word	0x20002e0c
 80037e4:	080065a8 	.word	0x080065a8

080037e8 <getMillis>:
	vprintf(msg, args);
	va_end(args);
}
#endif

static uint32_t getMillis() {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80037ec:	f7fc ff92 	bl	8000714 <HAL_GetTick>
 80037f0:	4603      	mov	r3, r0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <txSendThread>:
/**
 * Send thread for transmitting should be called in thread continuously
 * @param link 	: Link where data is to be transmitted
 * @param data	: Data that is to be transmitted
 */
static int txSendThread(SyncLayerCANLink *link, SyncLayerCANData *data) {
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b08e      	sub	sp, #56	; 0x38
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
	uint32_t id;
	uint8_t bytes[8];
	uint16_t len;
	int isSuccess = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
	if (data->track == SYNC_LAYER_CAN_START_REQ) {
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800380a:	2b00      	cmp	r3, #0
 800380c:	d130      	bne.n	8003870 <txSendThread+0x7a>
		data->doesCRCMatch = 1;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		data->isTimeOut = 0;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		data->frameIndex = 0;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	72da      	strb	r2, [r3, #11]
		id = link->startReqID;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	627b      	str	r3, [r7, #36]	; 0x24
		*(uint32_t*) (bytes) = data->id;
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	601a      	str	r2, [r3, #0]
		*(uint16_t*) (bytes + 4) = data->size;
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	3304      	adds	r3, #4
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	8912      	ldrh	r2, [r2, #8]
 800383e:	801a      	strh	r2, [r3, #0]
		bytes[6] = data->numTry;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	7a9b      	ldrb	r3, [r3, #10]
 8003844:	74bb      	strb	r3, [r7, #18]
		len = 8;
 8003846:	2308      	movs	r3, #8
 8003848:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (link->canSend(id, bytes, len)) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f107 010c 	add.w	r1, r7, #12
 8003856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003858:	4798      	blx	r3
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80d2 	beq.w	8003a06 <txSendThread+0x210>
			isSuccess = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
			data->track = SYNC_LAYER_CAN_START_ACK;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800386e:	e0ca      	b.n	8003a06 <txSendThread+0x210>
			console(CONSOLE_WARNING, __func__,
					"START REQ> 0x%x : 0x%x, %d, %d (failed)\n", id,
					*(uint32_t*) bytes, *(uint16_t*) (&bytes[4]),bytes[6]);
#endif

	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003876:	2b02      	cmp	r3, #2
 8003878:	d14c      	bne.n	8003914 <txSendThread+0x11e>
		id = data->id;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
		int indexOffset = data->frameIndex * 7;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	7adb      	ldrb	r3, [r3, #11]
 8003884:	461a      	mov	r2, r3
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
		bytes[0] = data->frameIndex;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	7adb      	ldrb	r3, [r3, #11]
 8003892:	733b      	strb	r3, [r7, #12]
		int remSize = data->size - indexOffset;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	891b      	ldrh	r3, [r3, #8]
 8003898:	461a      	mov	r2, r3
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
		len = remSize > 7 ? 7 : remSize;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b07      	cmp	r3, #7
 80038a4:	bfa8      	it	ge
 80038a6:	2307      	movge	r3, #7
 80038a8:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int i = 0; i < len; i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
 80038ae:	e00f      	b.n	80038d0 <txSendThread+0xda>
			bytes[i + 1] = data->bytes[i + indexOffset];
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	440a      	add	r2, r1
 80038ba:	441a      	add	r2, r3
 80038bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038be:	3301      	adds	r3, #1
 80038c0:	7812      	ldrb	r2, [r2, #0]
 80038c2:	3338      	adds	r3, #56	; 0x38
 80038c4:	443b      	add	r3, r7
 80038c6:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int i = 0; i < len; i++)
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	3301      	adds	r3, #1
 80038ce:	633b      	str	r3, [r7, #48]	; 0x30
 80038d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038d4:	429a      	cmp	r2, r3
 80038d6:	dbeb      	blt.n	80038b0 <txSendThread+0xba>
		if (link->canSend(id, bytes, len + 1)) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	3201      	adds	r2, #1
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f107 010c 	add.w	r1, r7, #12
 80038e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038ea:	4798      	blx	r3
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8089 	beq.w	8003a06 <txSendThread+0x210>
			isSuccess = 1;
 80038f4:	2301      	movs	r3, #1
 80038f6:	637b      	str	r3, [r7, #52]	; 0x34
			data->frameIndex++;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	7adb      	ldrb	r3, [r3, #11]
 80038fc:	3301      	adds	r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	72da      	strb	r2, [r3, #11]
			if (remSize <= 7)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2b07      	cmp	r3, #7
 8003908:	dc7d      	bgt.n	8003a06 <txSendThread+0x210>
				data->track = SYNC_LAYER_CAN_END_REQ;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2204      	movs	r2, #4
 800390e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003912:	e078      	b.n	8003a06 <txSendThread+0x210>
#ifdef CONSOLE_ENABLE
		else
			console(CONSOLE_WARNING, __func__, "DATA> 0x%x : %d, ...\n", id,
					bytes[0]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_MISSING_DATA) {
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800391a:	2b03      	cmp	r3, #3
 800391c:	d142      	bne.n	80039a4 <txSendThread+0x1ae>
		id = data->id;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
		int indexOffset = data->frameIndex * 7;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	7adb      	ldrb	r3, [r3, #11]
 8003928:	461a      	mov	r2, r3
 800392a:	4613      	mov	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	623b      	str	r3, [r7, #32]
		bytes[0] = data->frameIndex;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	7adb      	ldrb	r3, [r3, #11]
 8003936:	733b      	strb	r3, [r7, #12]
		int remSize = data->size - indexOffset;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	891b      	ldrh	r3, [r3, #8]
 800393c:	461a      	mov	r2, r3
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	61fb      	str	r3, [r7, #28]
		len = remSize > 7 ? 7 : remSize;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	2b07      	cmp	r3, #7
 8003948:	bfa8      	it	ge
 800394a:	2307      	movge	r3, #7
 800394c:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int i = 0; i < len; i++)
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	e00f      	b.n	8003974 <txSendThread+0x17e>
			bytes[i + 1] = data->bytes[i + indexOffset];
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800395a:	6a3a      	ldr	r2, [r7, #32]
 800395c:	440a      	add	r2, r1
 800395e:	441a      	add	r2, r3
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	3301      	adds	r3, #1
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	3338      	adds	r3, #56	; 0x38
 8003968:	443b      	add	r3, r7
 800396a:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int i = 0; i < len; i++)
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	3301      	adds	r3, #1
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003974:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003978:	429a      	cmp	r2, r3
 800397a:	dbeb      	blt.n	8003954 <txSendThread+0x15e>
		if (link->canSend(id, bytes, len + 1)) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	3201      	adds	r2, #1
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	f107 010c 	add.w	r1, r7, #12
 800398c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398e:	4798      	blx	r3
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d037      	beq.n	8003a06 <txSendThread+0x210>
			isSuccess = 1;
 8003996:	2301      	movs	r3, #1
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
			data->track = SYNC_LAYER_CAN_END_REQ;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2204      	movs	r2, #4
 800399e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039a2:	e030      	b.n	8003a06 <txSendThread+0x210>
#ifdef CONSOLE_ENABLE
		else
			console(CONSOLE_WARNING, __func__, "MISSING DATA> 0x%x : %d, ...\n",
					id, bytes[0]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_END_REQ) {
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d12b      	bne.n	8003a06 <txSendThread+0x210>
		len = 8;
 80039ae:	2308      	movs	r3, #8
 80039b0:	857b      	strh	r3, [r7, #42]	; 0x2a
		id = link->endReqID;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
		*(uint32_t*) bytes = data->id;
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	601a      	str	r2, [r3, #0]
		data->crc = crc32_calculate(data->bytes, data->size);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	891b      	ldrh	r3, [r3, #8]
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 ff27 	bl	8004820 <crc32_calculate>
 80039d2:	4602      	mov	r2, r0
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	621a      	str	r2, [r3, #32]
		*(uint32_t*) (&bytes[4]) = data->crc;
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	3304      	adds	r3, #4
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	6a12      	ldr	r2, [r2, #32]
 80039e2:	601a      	str	r2, [r3, #0]
		if (link->canSend(id, bytes, len)) {
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	f107 010c 	add.w	r1, r7, #12
 80039f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039f2:	4798      	blx	r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <txSendThread+0x210>
			isSuccess = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
			data->track = SYNC_LAYER_CAN_END_ACK;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2205      	movs	r2, #5
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			console(CONSOLE_WARNING, __func__, "END REQ> 0x%x : 0x%x, 0x%x \n",
					id, *(uint32_t*) bytes, *(uint32_t*) (&bytes[4]));
#endif
	}

	if (isSuccess)
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d006      	beq.n	8003a1a <txSendThread+0x224>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 8003a0c:	f7ff feec 	bl	80037e8 <getMillis>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28

	if (getMillis() > data->waitTill) {
 8003a1a:	f7ff fee5 	bl	80037e8 <getMillis>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d916      	bls.n	8003a56 <txSendThread+0x260>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_WARNING, __func__, "TIMEOUT>0x%x : %ld < %ld\n", data->id,
			TRANSMIT_TIMEOUT, getMillis() - data->waitTill+TRANSMIT_TIMEOUT);
	#endif
		data->isTimeOut = 1;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		data->numTry--;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	7a9b      	ldrb	r3, [r3, #10]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	729a      	strb	r2, [r3, #10]
		if (data->numTry > 0) {
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	7a9b      	ldrb	r3, [r3, #10]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <txSendThread+0x258>
			data->track = SYNC_LAYER_CAN_START_REQ;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a4c:	e003      	b.n	8003a56 <txSendThread+0x260>
#ifdef CONSOLE_ENABLE
				console(CONSOLE_WARNING, __func__, "RETRY>0x%x : %d\n", data->id,
						data->numTry);
	#endif
		} else {
			data->track = SYNC_LAYER_CAN_TRANSMIT_FAILED;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2207      	movs	r2, #7
 8003a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				console(CONSOLE_ERROR, __func__, "RETRY EXCEEDS>0x%x\n", data->id);
	#endif
		}
	}

	return isSuccess;
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3738      	adds	r7, #56	; 0x38
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <txReceiveThread>:
 * @param id	: CAN ID
 * @param bytes	: bytes received from CAN
 * @param len	: length of CAN bytes received
 */
static int txReceiveThread(SyncLayerCANLink *link, SyncLayerCANData *data,
		uint32_t id, uint8_t *bytes, uint16_t len) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
	int isSuccess = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]

	if (data->track == SYNC_LAYER_CAN_START_ACK && id == link->startAckID) {
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10b      	bne.n	8003a94 <txReceiveThread+0x34>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d106      	bne.n	8003a94 <txReceiveThread+0x34>
		isSuccess = 1;
 8003a86:	2301      	movs	r3, #1
 8003a88:	617b      	str	r3, [r7, #20]
		data->track = SYNC_LAYER_CAN_DATA;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a92:	e03e      	b.n	8003b12 <txReceiveThread+0xb2>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "START ACK>0x%x : 0x%x, %d, %d\n", id,
				*(uint32_t*) (bytes), *(uint16_t*) (&bytes[4]),bytes[6]);
#endif

	} else if (data->track == SYNC_LAYER_CAN_END_ACK && id == link->endAckID) {
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d139      	bne.n	8003b12 <txReceiveThread+0xb2>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d134      	bne.n	8003b12 <txReceiveThread+0xb2>
		isSuccess = 1;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
		uint8_t missingDataAvailable = bytes[4];
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	74fb      	strb	r3, [r7, #19]
		uint8_t missingFrameIndex = bytes[5];
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	795b      	ldrb	r3, [r3, #5]
 8003ab6:	74bb      	strb	r3, [r7, #18]
		data->doesCRCMatch = bytes[6];
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	799a      	ldrb	r2, [r3, #6]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		if (missingDataAvailable) {
 8003ac2:	7cfb      	ldrb	r3, [r7, #19]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <txReceiveThread+0x78>
			data->frameIndex = missingFrameIndex;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	7cba      	ldrb	r2, [r7, #18]
 8003acc:	72da      	strb	r2, [r3, #11]
			data->track = SYNC_LAYER_CAN_MISSING_DATA;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ad6:	e01c      	b.n	8003b12 <txReceiveThread+0xb2>
		} else {
			if (data->doesCRCMatch) {
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <txReceiveThread+0x8c>
				data->track = SYNC_LAYER_CAN_TRANSMIT_SUCCESS;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2206      	movs	r2, #6
 8003ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003aea:	e012      	b.n	8003b12 <txReceiveThread+0xb2>
			} else {
#ifdef CONSOLE_ENABLE
				console(CONSOLE_WARNING, __func__, "CRC ERROR>0x%x : 0x%x \n",
						data->id, data->crc);
#endif
				data->numTry--;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	7a9b      	ldrb	r3, [r3, #10]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	729a      	strb	r2, [r3, #10]
				if (data->numTry > 0) {
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	7a9b      	ldrb	r3, [r3, #10]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d004      	beq.n	8003b0a <txReceiveThread+0xaa>
					data->track = SYNC_LAYER_CAN_START_REQ;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b08:	e003      	b.n	8003b12 <txReceiveThread+0xb2>
#ifdef CONSOLE_ENABLE
					console(CONSOLE_WARNING, __func__, "RETRY>0x%x : %d\n",
							data->id, data->numTry);
#endif
				} else {
					data->track = SYNC_LAYER_CAN_TRANSMIT_FAILED;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		console(CONSOLE_INFO, __func__, "END ACK>0x%x : 0x%x, %d, %d, %d \n",
				id, *(uint32_t*) bytes, bytes[4], bytes[5], bytes[6]);
#endif
	}

	if (isSuccess)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d006      	beq.n	8003b26 <txReceiveThread+0xc6>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 8003b18:	f7ff fe66 	bl	80037e8 <getMillis>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28


	return isSuccess;
 8003b26:	697b      	ldr	r3, [r7, #20]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <rxSendThread>:
/**
 * Receive thread for receiving should be called in thread continuously
 * @param link 	: Link where data is to be received
 * @param data	: Data that is to be received
 */
static int rxSendThread(SyncLayerCANLink *link, SyncLayerCANData *data) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b090      	sub	sp, #64	; 0x40
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
	int isSuccess = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t id;
	uint8_t bytes[8];
	if (data->track == SYNC_LAYER_CAN_START_ACK) {
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d122      	bne.n	8003b8e <rxSendThread+0x5e>
		id = link->startAckID;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
		*(uint32_t*) bytes = data->id;
 8003b4e:	f107 0308 	add.w	r3, r7, #8
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	601a      	str	r2, [r3, #0]
		*(uint16_t*) (&bytes[4]) = data->size;
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	8912      	ldrh	r2, [r2, #8]
 8003b62:	801a      	strh	r2, [r3, #0]
		bytes[6] = data->numTry;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	7a9b      	ldrb	r3, [r3, #10]
 8003b68:	73bb      	strb	r3, [r7, #14]
		if (link->canSend(id, bytes, 8)) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f107 0108 	add.w	r1, r7, #8
 8003b72:	2208      	movs	r2, #8
 8003b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b76:	4798      	blx	r3
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80e5 	beq.w	8003d4a <rxSendThread+0x21a>
			isSuccess = 1;
 8003b80:	2301      	movs	r3, #1
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
			data->track = SYNC_LAYER_CAN_DATA;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003b8c:	e0dd      	b.n	8003d4a <rxSendThread+0x21a>
		else
			console(CONSOLE_WARNING, __func__,
					"START ACK> 0x%x : 0x%x, %d, %d (failed)\n", id,
					*(uint32_t*) bytes, *(uint16_t*) (&bytes[4]),bytes[6]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_END_ACK) {
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	f040 80d8 	bne.w	8003d4a <rxSendThread+0x21a>
		id = link->endAckID;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
		*(uint32_t*) bytes = data->id;
 8003ba0:	f107 0308 	add.w	r3, r7, #8
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	601a      	str	r2, [r3, #0]

		uint8_t missingDataAvailable = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		int missingFrameIndex = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
		int totalFrame = data->size / 7 + (data->size % 7 != 0);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	891a      	ldrh	r2, [r3, #8]
 8003bb8:	4b78      	ldr	r3, [pc, #480]	; (8003d9c <rxSendThread+0x26c>)
 8003bba:	fba3 1302 	umull	r1, r3, r3, r2
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	0852      	lsrs	r2, r2, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	4618      	mov	r0, r3
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	891a      	ldrh	r2, [r3, #8]
 8003bce:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <rxSendThread+0x26c>)
 8003bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bd4:	1ad1      	subs	r1, r2, r3
 8003bd6:	0849      	lsrs	r1, r1, #1
 8003bd8:	440b      	add	r3, r1
 8003bda:	0899      	lsrs	r1, r3, #2
 8003bdc:	460b      	mov	r3, r1
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	1a5b      	subs	r3, r3, r1
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf14      	ite	ne
 8003bea:	2301      	movne	r3, #1
 8003bec:	2300      	moveq	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4403      	add	r3, r0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
		int totalGroupFrame = totalFrame / 8 + (totalFrame % 8 != 0);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	da00      	bge.n	8003bfc <rxSendThread+0xcc>
 8003bfa:	3307      	adds	r3, #7
 8003bfc:	10db      	asrs	r3, r3, #3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4413      	add	r3, r2
 8003c12:	623b      	str	r3, [r7, #32]
		for (int group = 0; group < totalGroupFrame; group++) {
 8003c14:	2300      	movs	r3, #0
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30
 8003c18:	e031      	b.n	8003c7e <rxSendThread+0x14e>
			uint8_t record = data->frameRecords[group];
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	4413      	add	r3, r2
 8003c20:	330c      	adds	r3, #12
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	77fb      	strb	r3, [r7, #31]
			int remFrame = totalFrame - (group * 8);
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
			int bitLen = (remFrame > 8) ? 8 : remFrame;
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	bfa8      	it	ge
 8003c36:	2308      	movge	r3, #8
 8003c38:	617b      	str	r3, [r7, #20]
			for (int bit = 0; bit < bitLen; bit++) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3e:	e013      	b.n	8003c68 <rxSendThread+0x138>
				if (!(record & (1 << bit))) {
 8003c40:	7ffa      	ldrb	r2, [r7, #31]
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	fa42 f303 	asr.w	r3, r2, r3
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d108      	bne.n	8003c62 <rxSendThread+0x132>
					missingDataAvailable = 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					missingFrameIndex = bit + 8 * group;
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5c:	4413      	add	r3, r2
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8003c60:	e006      	b.n	8003c70 <rxSendThread+0x140>
			for (int bit = 0; bit < bitLen; bit++) {
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	3301      	adds	r3, #1
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	dbe7      	blt.n	8003c40 <rxSendThread+0x110>
				}
			}
			if (missingDataAvailable)
 8003c70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <rxSendThread+0x158>
		for (int group = 0; group < totalGroupFrame; group++) {
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	dbc9      	blt.n	8003c1a <rxSendThread+0xea>
 8003c86:	e000      	b.n	8003c8a <rxSendThread+0x15a>
				break;
 8003c88:	bf00      	nop
		}

		if (missingDataAvailable) {
 8003c8a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d015      	beq.n	8003cbe <rxSendThread+0x18e>
			bytes[4] = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	733b      	strb	r3, [r7, #12]
			bytes[5] = missingFrameIndex;
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	737b      	strb	r3, [r7, #13]
			if (link->canSend(id, bytes, 8)) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f107 0108 	add.w	r1, r7, #8
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca8:	4798      	blx	r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d04c      	beq.n	8003d4a <rxSendThread+0x21a>
				isSuccess = 1;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
				data->track = SYNC_LAYER_CAN_MISSING_DATA;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003cbc:	e045      	b.n	8003d4a <rxSendThread+0x21a>
				console(CONSOLE_WARNING, __func__,
						"END ACK> 0x%x : 0x%x, %d, %d, %d (failed)\n", id,
						*(uint32_t*) bytes, bytes[4], bytes[5], bytes[6]);
#endif
		} else {
			bytes[4] = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	733b      	strb	r3, [r7, #12]
			bytes[5] = 0;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	737b      	strb	r3, [r7, #13]
			uint32_t crc = crc32_calculate(data->bytes, data->size);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	891b      	ldrh	r3, [r3, #8]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f000 fda5 	bl	8004820 <crc32_calculate>
 8003cd6:	6138      	str	r0, [r7, #16]
			data->doesCRCMatch = data->crc == crc;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			bytes[6] = data->doesCRCMatch;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf6:	73bb      	strb	r3, [r7, #14]

			if (link->canSend(id, bytes, 8)) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f107 0108 	add.w	r1, r7, #8
 8003d00:	2208      	movs	r2, #8
 8003d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d04:	4798      	blx	r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01e      	beq.n	8003d4a <rxSendThread+0x21a>
				isSuccess = 1;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (data->doesCRCMatch)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <rxSendThread+0x1f4>
					data->track = SYNC_LAYER_CAN_RECEIVE_SUCCESS;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d22:	e012      	b.n	8003d4a <rxSendThread+0x21a>
#ifdef CONSOLE_ENABLE
					console(CONSOLE_WARNING, __func__,
							"CRC ERROR> 0x%x : 0x%x != 0x%x\n", data->id,
							data->crc, crc);
#endif
					data->numTry--;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	7a9b      	ldrb	r3, [r3, #10]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	729a      	strb	r2, [r3, #10]
					if (data->numTry > 0) {
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	7a9b      	ldrb	r3, [r3, #10]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <rxSendThread+0x212>
						data->track = SYNC_LAYER_CAN_START_REQ;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d40:	e003      	b.n	8003d4a <rxSendThread+0x21a>
#ifdef CONSOLE_ENABLE
						console(CONSOLE_WARNING, __func__, "RETRY>0x%x, %d\n",
								data->id, data->numTry);
#endif
					} else {
						data->track = SYNC_LAYER_CAN_RECEIVE_FAILED;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2209      	movs	r2, #9
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif
		}

	}

	if (isSuccess)
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d006      	beq.n	8003d5e <rxSendThread+0x22e>
		data->waitTill = getMillis() + RECEIVE_TIMEOUT;
 8003d50:	f7ff fd4a 	bl	80037e8 <getMillis>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28

	if (getMillis() > data->waitTill) {
 8003d5e:	f7ff fd43 	bl	80037e8 <getMillis>
 8003d62:	4602      	mov	r2, r0
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d912      	bls.n	8003d92 <rxSendThread+0x262>
		data->numTry--;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	7a9b      	ldrb	r3, [r3, #10]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	729a      	strb	r2, [r3, #10]
		if (data->numTry > 0) {
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	7a9b      	ldrb	r3, [r3, #10]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <rxSendThread+0x25a>
			data->track = SYNC_LAYER_CAN_START_REQ;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d88:	e003      	b.n	8003d92 <rxSendThread+0x262>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_WARNING, __func__, "RETRY>0x%x, %d\n", data->id,
					data->numTry);
#endif
		} else {
			data->track = SYNC_LAYER_CAN_RECEIVE_FAILED;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2209      	movs	r2, #9
 8003d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		console(CONSOLE_ERROR, __func__, "TIMEOUT>0x%x : %ld < %ld\n", data->id,
		RECEIVE_TIMEOUT, getMillis() - data->waitTill+RECEIVE_TIMEOUT);
#endif
	}

	return isSuccess;
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3740      	adds	r7, #64	; 0x40
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	24924925 	.word	0x24924925

08003da0 <rxReceiveThread>:
 * @param id	: CAN ID
 * @param bytes	: bytes received from CAN
 * @param len	: length of CAN bytes received
 */
static int rxReceiveThread(SyncLayerCANLink *link, SyncLayerCANData *data,
		uint32_t id, uint8_t *bytes, uint16_t len) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b090      	sub	sp, #64	; 0x40
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
	int isSuccess = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (data->track == SYNC_LAYER_CAN_START_REQ && id == link->startReqID) {
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d122      	bne.n	8003e02 <rxReceiveThread+0x62>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d11d      	bne.n	8003e02 <rxReceiveThread+0x62>
		for (int i = 0; i < sizeof(data->frameRecords); i++)
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dca:	e008      	b.n	8003dde <rxReceiveThread+0x3e>
			data->frameRecords[i] = 0;
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	4413      	add	r3, r2
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data->frameRecords); i++)
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	3301      	adds	r3, #1
 8003ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2b12      	cmp	r3, #18
 8003de2:	d9f3      	bls.n	8003dcc <rxReceiveThread+0x2c>
		isSuccess = 1;
 8003de4:	2301      	movs	r3, #1
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
		data->size = *(uint16_t*) (&bytes[4]);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	889a      	ldrh	r2, [r3, #4]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	811a      	strh	r2, [r3, #8]
		data->numTry = bytes[6];
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	799a      	ldrb	r2, [r3, #6]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	729a      	strb	r2, [r3, #10]
		data->track = SYNC_LAYER_CAN_START_ACK;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e00:	e09a      	b.n	8003f38 <rxReceiveThread+0x198>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "START REQ>0x%x : 0x%x, %d, %d\n", id,
				*(uint32_t*) (bytes), *(uint16_t*) (&bytes[4]),bytes[6]);
#endif
	} else if (id == link->endReqID) {
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d10a      	bne.n	8003e22 <rxReceiveThread+0x82>
		isSuccess = 1;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		data->crc = *(uint32_t*) (&bytes[4]);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	621a      	str	r2, [r3, #32]
		data->track = SYNC_LAYER_CAN_END_ACK;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2205      	movs	r2, #5
 8003e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e20:	e08a      	b.n	8003f38 <rxReceiveThread+0x198>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "END REQ>0x%x : 0x%x, 0x%x\n", id, id,
				*(uint32_t*) bytes, *(uint32_t*) (&bytes));
#endif
	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d13e      	bne.n	8003eaa <rxReceiveThread+0x10a>
		isSuccess = 1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t frameIndex = bytes[0];
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	77fb      	strb	r3, [r7, #31]
		int indexOffset = frameIndex * 7;
 8003e36:	7ffa      	ldrb	r2, [r7, #31]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
		int recordIndex = frameIndex / 8;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	08db      	lsrs	r3, r3, #3
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	617b      	str	r3, [r7, #20]
		int bitIndex = frameIndex % 8;
 8003e48:	7ffb      	ldrb	r3, [r7, #31]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	613b      	str	r3, [r7, #16]
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	4413      	add	r3, r2
 8003e56:	330c      	adds	r3, #12
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b25a      	sxtb	r2, r3
				| (1 << bitIndex);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	b25b      	sxtb	r3, r3
 8003e66:	4313      	orrs	r3, r2
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	b2d9      	uxtb	r1, r3
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	330c      	adds	r3, #12
 8003e74:	460a      	mov	r2, r1
 8003e76:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (len - 1); i++)
 8003e78:	2300      	movs	r3, #0
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7c:	e00e      	b.n	8003e9c <rxReceiveThread+0xfc>
			data->bytes[indexOffset + i] = bytes[i + 1];
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	3301      	adds	r3, #1
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	441a      	add	r2, r3
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	69b8      	ldr	r0, [r7, #24]
 8003e8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e8e:	4401      	add	r1, r0
 8003e90:	440b      	add	r3, r1
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < (len - 1); i++)
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	3301      	adds	r3, #1
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	dbea      	blt.n	8003e7e <rxReceiveThread+0xde>
 8003ea8:	e046      	b.n	8003f38 <rxReceiveThread+0x198>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "DATA>0x%x : %d, ...\n", id, bytes[0]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_MISSING_DATA) {
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d141      	bne.n	8003f38 <rxReceiveThread+0x198>
		isSuccess = 1;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t frameIndex = bytes[0];
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		int indexOffset = frameIndex * 7;
 8003ec0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
		int recordIndex = frameIndex / 8;
 8003ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
		int bitIndex = frameIndex % 8;
 8003ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	623b      	str	r3, [r7, #32]
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	4413      	add	r3, r2
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	b25a      	sxtb	r2, r3
				| (1 << bitIndex);
 8003eec:	2101      	movs	r1, #1
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef4:	b25b      	sxtb	r3, r3
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	b2d9      	uxtb	r1, r3
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	4413      	add	r3, r2
 8003f02:	330c      	adds	r3, #12
 8003f04:	460a      	mov	r2, r1
 8003f06:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f0c:	e00e      	b.n	8003f2c <rxReceiveThread+0x18c>
			data->bytes[indexOffset + i] = bytes[i + 1];
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	3301      	adds	r3, #1
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	441a      	add	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1e:	4401      	add	r1, r0
 8003f20:	440b      	add	r3, r1
 8003f22:	7812      	ldrb	r2, [r2, #0]
 8003f24:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	3301      	adds	r3, #1
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f30:	3b01      	subs	r3, #1
 8003f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f34:	429a      	cmp	r2, r3
 8003f36:	dbea      	blt.n	8003f0e <rxReceiveThread+0x16e>
		console(CONSOLE_INFO, __func__, "MISSING DATA>0x%x : %d, ...\n", id,
				bytes[0]);
#endif
	}

	if (isSuccess)
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d006      	beq.n	8003f4c <rxReceiveThread+0x1ac>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 8003f3e:	f7ff fc53 	bl	80037e8 <getMillis>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	629a      	str	r2, [r3, #40]	; 0x28

	return isSuccess;
 8003f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3740      	adds	r7, #64	; 0x40
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <get2power>:
#include "buddy_heap.h"
#include "stdio.h"

typedef uint32_t AddrType;

static int get2power(int exponent) {
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	return (1 << exponent);
 8003f5e:	2201      	movs	r2, #1
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <getLog2>:

static int getLog2(int size) {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	int exponent = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
	for (; get2power(exponent) < size; exponent++);
 8003f7c:	e002      	b.n	8003f84 <getLog2+0x14>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3301      	adds	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff ffe6 	bl	8003f56 <get2power>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	dcf5      	bgt.n	8003f7e <getLog2+0xe>
	return exponent;
 8003f92:	68fb      	ldr	r3, [r7, #12]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <setMap>:

static void setMap(uint8_t *map, int mapIdx, int value) {
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
	int mainIdx = mapIdx / 8;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da00      	bge.n	8003fb0 <setMap+0x14>
 8003fae:	3307      	adds	r3, #7
 8003fb0:	10db      	asrs	r3, r3, #3
 8003fb2:	617b      	str	r3, [r7, #20]
	int bitIdx = mapIdx % 8;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	425a      	negs	r2, r3
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	f002 0207 	and.w	r2, r2, #7
 8003fc0:	bf58      	it	pl
 8003fc2:	4253      	negpl	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
	if (value)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <setMap+0x54>
		map[mainIdx] |= (1 << bitIdx);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25a      	sxtb	r2, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	fa01 f303 	lsl.w	r3, r1, r3
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	b259      	sxtb	r1, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	b2ca      	uxtb	r2, r1
 8003fec:	701a      	strb	r2, [r3, #0]
	else
		map[mainIdx] &= ~(1 << bitIdx);
}
 8003fee:	e012      	b.n	8004016 <setMap+0x7a>
		map[mainIdx] &= ~(1 << bitIdx);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	b25a      	sxtb	r2, r3
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	b25b      	sxtb	r3, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	b25b      	sxtb	r3, r3
 8004008:	4013      	ands	r3, r2
 800400a:	b259      	sxtb	r1, r3
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	b2ca      	uxtb	r2, r1
 8004014:	701a      	strb	r2, [r3, #0]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr

08004020 <getMap>:

static int getMap(const uint8_t *map, int mapIdx) {
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	int mainIdx = mapIdx / 8;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	da00      	bge.n	8004032 <getMap+0x12>
 8004030:	3307      	adds	r3, #7
 8004032:	10db      	asrs	r3, r3, #3
 8004034:	60fb      	str	r3, [r7, #12]
	int bitIdx = mapIdx % 8;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	425a      	negs	r2, r3
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	f002 0207 	and.w	r2, r2, #7
 8004042:	bf58      	it	pl
 8004044:	4253      	negpl	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
	return (map[mainIdx] & (1 << bitIdx)) != 0;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	fa42 f303 	asr.w	r3, r2, r3
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <isValidPointer>:
 * @param heap      : Pointer to buddy heap instance
 * @param ptr       : Pointer to the allocated memory
 * @return          : 1 ptr belongs to this heap
 *                  : 0 ptr doesn't belongs to this heap
 */
static int isValidPointer(BuddyHeap heap, void *ptr) {
 8004070:	b084      	sub	sp, #16
 8004072:	b490      	push	{r4, r7}
 8004074:	af00      	add	r7, sp, #0
 8004076:	f107 0408 	add.w	r4, r7, #8
 800407a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (((AddrType) ptr < (AddrType) (heap.memory)) || ((AddrType) ptr >= ((AddrType) (heap.memory)) + heap.maxSize))
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	461a      	mov	r2, r3
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	429a      	cmp	r2, r3
 8004086:	d806      	bhi.n	8004096 <isValidPointer+0x26>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	461a      	mov	r2, r3
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	441a      	add	r2, r3
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	429a      	cmp	r2, r3
 8004094:	d801      	bhi.n	800409a <isValidPointer+0x2a>
		return 0;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <isValidPointer+0x2c>
	return 1;
 800409a:	2301      	movs	r3, #1
}
 800409c:	4618      	mov	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc90      	pop	{r4, r7}
 80040a2:	b004      	add	sp, #16
 80040a4:	4770      	bx	lr
	...

080040a8 <printRecursion>:

static void printRecursion(BuddyHeap heap, int origin, int level, int blockSize) {
 80040a8:	b084      	sub	sp, #16
 80040aa:	b590      	push	{r4, r7, lr}
 80040ac:	b089      	sub	sp, #36	; 0x24
 80040ae:	af06      	add	r7, sp, #24
 80040b0:	f107 0418 	add.w	r4, r7, #24
 80040b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int mapIdx = get2power(level) - 1 + origin / blockSize;
 80040b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040ba:	f7ff ff4c 	bl	8003f56 <get2power>
 80040be:	4603      	mov	r3, r0
 80040c0:	1e5a      	subs	r2, r3, #1
 80040c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c6:	fb91 f3f3 	sdiv	r3, r1, r3
 80040ca:	4413      	add	r3, r2
 80040cc:	603b      	str	r3, [r7, #0]
	if (getMap(heap.map, mapIdx)) {
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	6839      	ldr	r1, [r7, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff ffa4 	bl	8004020 <getMap>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d021      	beq.n	8004122 <printRecursion+0x7a>
		for (int i = 0; i < blockSize / heap.minSize; ++i)
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	e016      	b.n	8004112 <printRecursion+0x6a>
			printf("0x%x : %d\n", origin + i * heap.minSize, heap.memory[origin + i * heap.minSize]);
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	fb03 f202 	mul.w	r2, r3, r2
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	18d0      	adds	r0, r2, r3
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	fb02 f101 	mul.w	r1, r2, r1
 80040fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040fc:	440a      	add	r2, r1
 80040fe:	4413      	add	r3, r2
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	4601      	mov	r1, r0
 8004106:	482b      	ldr	r0, [pc, #172]	; (80041b4 <printRecursion+0x10c>)
 8004108:	f001 fa66 	bl	80055d8 <iprintf>
		for (int i = 0; i < blockSize / heap.minSize; ++i)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3301      	adds	r3, #1
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004116:	fb92 f3f3 	sdiv	r3, r2, r3
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbe1      	blt.n	80040e4 <printRecursion+0x3c>
		return;
 8004120:	e042      	b.n	80041a8 <printRecursion+0x100>
	} else if (level == (heap.nMax - heap.nMin)) {
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800412a:	429a      	cmp	r2, r3
 800412c:	d104      	bne.n	8004138 <printRecursion+0x90>
		printf("0x%x : _\n", origin);
 800412e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004130:	4821      	ldr	r0, [pc, #132]	; (80041b8 <printRecursion+0x110>)
 8004132:	f001 fa51 	bl	80055d8 <iprintf>
		return;
 8004136:	e037      	b.n	80041a8 <printRecursion+0x100>
	}

	if (blockSize <= heap.minSize)
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800413c:	429a      	cmp	r2, r3
 800413e:	dd32      	ble.n	80041a6 <printRecursion+0xfe>
		return;

	printRecursion(heap, origin, level + 1, blockSize / 2);
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004146:	0fd9      	lsrs	r1, r3, #31
 8004148:	440b      	add	r3, r1
 800414a:	105b      	asrs	r3, r3, #1
 800414c:	9305      	str	r3, [sp, #20]
 800414e:	9204      	str	r2, [sp, #16]
 8004150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004152:	9303      	str	r3, [sp, #12]
 8004154:	466c      	mov	r4, sp
 8004156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800415e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004168:	f7ff ff9e 	bl	80040a8 <printRecursion>
	printRecursion(heap, origin + blockSize / 2, level + 1, blockSize / 2);
 800416c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416e:	0fda      	lsrs	r2, r3, #31
 8004170:	4413      	add	r3, r2
 8004172:	105b      	asrs	r3, r3, #1
 8004174:	461a      	mov	r2, r3
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	441a      	add	r2, r3
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	1c59      	adds	r1, r3, #1
 800417e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004180:	0fd8      	lsrs	r0, r3, #31
 8004182:	4403      	add	r3, r0
 8004184:	105b      	asrs	r3, r3, #1
 8004186:	9305      	str	r3, [sp, #20]
 8004188:	9104      	str	r1, [sp, #16]
 800418a:	9203      	str	r2, [sp, #12]
 800418c:	466c      	mov	r4, sp
 800418e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800419a:	f107 0318 	add.w	r3, r7, #24
 800419e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041a0:	f7ff ff82 	bl	80040a8 <printRecursion>
 80041a4:	e000      	b.n	80041a8 <printRecursion+0x100>
		return;
 80041a6:	bf00      	nop
}
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80041b0:	b004      	add	sp, #16
 80041b2:	4770      	bx	lr
 80041b4:	080065e4 	.word	0x080065e4
 80041b8:	080065f0 	.word	0x080065f0

080041bc <printMemory>:

/**
 * This prints the memory
 * @param heap      : Pointer to buddy heap instance
 */
static void printMemory(BuddyHeap heap) {
 80041bc:	b084      	sub	sp, #16
 80041be:	b590      	push	{r4, r7, lr}
 80041c0:	b087      	sub	sp, #28
 80041c2:	af06      	add	r7, sp, #24
 80041c4:	f107 0410 	add.w	r4, r7, #16
 80041c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printRecursion(heap, 0, 0, heap.maxSize);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	9305      	str	r3, [sp, #20]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9304      	str	r3, [sp, #16]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9303      	str	r3, [sp, #12]
 80041d8:	466c      	mov	r4, sp
 80041da:	f107 0320 	add.w	r3, r7, #32
 80041de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041e6:	f107 0310 	add.w	r3, r7, #16
 80041ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041ec:	f7ff ff5c 	bl	80040a8 <printRecursion>
}
 80041f0:	bf00      	nop
 80041f2:	3704      	adds	r7, #4
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80041fa:	b004      	add	sp, #16
 80041fc:	4770      	bx	lr
	...

08004200 <printMap>:

/**
 * This prints buddy heap mapper structure
 * @param heap      : Pointer to buddy heap instance
 */
static void printMap(BuddyHeap heap) {
 8004200:	b084      	sub	sp, #16
 8004202:	b590      	push	{r4, r7, lr}
 8004204:	b08d      	sub	sp, #52	; 0x34
 8004206:	af00      	add	r7, sp, #0
 8004208:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800420c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int level = 0; level < heap.nMax + 1 - heap.nMin; ++level) {
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004214:	e094      	b.n	8004340 <printMap+0x140>
		int len = get2power(level);
 8004216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004218:	f7ff fe9d 	bl	8003f56 <get2power>
 800421c:	6138      	str	r0, [r7, #16]
		int mapIdx = len - 1;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3b01      	subs	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
		int offset = get2power(heap.nMax - heap.nMin - level) - 1;
 8004224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004228:	1ad2      	subs	r2, r2, r3
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fe91 	bl	8003f56 <get2power>
 8004234:	4603      	mov	r3, r0
 8004236:	3b01      	subs	r3, #1
 8004238:	60bb      	str	r3, [r7, #8]
		int diff = get2power(heap.nMax + 1 - heap.nMin - level) - 1;
 800423a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	1ad2      	subs	r2, r2, r3
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fe85 	bl	8003f56 <get2power>
 800424c:	4603      	mov	r3, r0
 800424e:	3b01      	subs	r3, #1
 8004250:	607b      	str	r3, [r7, #4]

		printf("%4d : ", heap.maxSize / get2power(level));
 8004252:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8004254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004256:	f7ff fe7e 	bl	8003f56 <get2power>
 800425a:	4603      	mov	r3, r0
 800425c:	fb94 f3f3 	sdiv	r3, r4, r3
 8004260:	4619      	mov	r1, r3
 8004262:	483f      	ldr	r0, [pc, #252]	; (8004360 <printMap+0x160>)
 8004264:	f001 f9b8 	bl	80055d8 <iprintf>
		for (int j = 0; j < offset; ++j)
 8004268:	2300      	movs	r3, #0
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28
 800426c:	e005      	b.n	800427a <printMap+0x7a>
			printf(" ");
 800426e:	2020      	movs	r0, #32
 8004270:	f001 f9ca 	bl	8005608 <putchar>
		for (int j = 0; j < offset; ++j)
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	3301      	adds	r3, #1
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	dbf5      	blt.n	800426e <printMap+0x6e>
		for (int j = 0; j < len; ++j) {
 8004282:	2300      	movs	r3, #0
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
 8004286:	e01b      	b.n	80042c0 <printMap+0xc0>
			printf("%d", getMap(heap.map, mapIdx + j));
 8004288:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	4413      	add	r3, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7ff fec5 	bl	8004020 <getMap>
 8004296:	4603      	mov	r3, r0
 8004298:	4619      	mov	r1, r3
 800429a:	4832      	ldr	r0, [pc, #200]	; (8004364 <printMap+0x164>)
 800429c:	f001 f99c 	bl	80055d8 <iprintf>
			for (int i = 0; i < diff; ++i)
 80042a0:	2300      	movs	r3, #0
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	e005      	b.n	80042b2 <printMap+0xb2>
				printf(" ");
 80042a6:	2020      	movs	r0, #32
 80042a8:	f001 f9ae 	bl	8005608 <putchar>
			for (int i = 0; i < diff; ++i)
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	3301      	adds	r3, #1
 80042b0:	623b      	str	r3, [r7, #32]
 80042b2:	6a3a      	ldr	r2, [r7, #32]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	dbf5      	blt.n	80042a6 <printMap+0xa6>
		for (int j = 0; j < len; ++j) {
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	3301      	adds	r3, #1
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	dbdf      	blt.n	8004288 <printMap+0x88>
		}

		if (level == heap.nMax - heap.nMin) {
 80042c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d103      	bne.n	80042dc <printMap+0xdc>
			printf("\n");
 80042d4:	200a      	movs	r0, #10
 80042d6:	f001 f997 	bl	8005608 <putchar>
			break;
 80042da:	e03a      	b.n	8004352 <printMap+0x152>
		}

		printf("\n       ");
 80042dc:	4822      	ldr	r0, [pc, #136]	; (8004368 <printMap+0x168>)
 80042de:	f001 f97b 	bl	80055d8 <iprintf>
		for (int j = 0; j < offset - 1; ++j)
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	e005      	b.n	80042f4 <printMap+0xf4>
			printf(" ");
 80042e8:	2020      	movs	r0, #32
 80042ea:	f001 f98d 	bl	8005608 <putchar>
		for (int j = 0; j < offset - 1; ++j)
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3301      	adds	r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	69fa      	ldr	r2, [r7, #28]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	dbf4      	blt.n	80042e8 <printMap+0xe8>
		for (int j = 0; j < len; ++j) {
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e013      	b.n	800432c <printMap+0x12c>
			printf("/ \\");
 8004304:	4819      	ldr	r0, [pc, #100]	; (800436c <printMap+0x16c>)
 8004306:	f001 f967 	bl	80055d8 <iprintf>
			for (int i = 0; i < diff - 2; ++i)
 800430a:	2300      	movs	r3, #0
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e005      	b.n	800431c <printMap+0x11c>
				printf(" ");
 8004310:	2020      	movs	r0, #32
 8004312:	f001 f979 	bl	8005608 <putchar>
			for (int i = 0; i < diff - 2; ++i)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3301      	adds	r3, #1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b02      	subs	r3, #2
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	429a      	cmp	r2, r3
 8004324:	dbf4      	blt.n	8004310 <printMap+0x110>
		for (int j = 0; j < len; ++j) {
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	3301      	adds	r3, #1
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	429a      	cmp	r2, r3
 8004332:	dbe7      	blt.n	8004304 <printMap+0x104>
		}
		printf("\n");
 8004334:	200a      	movs	r0, #10
 8004336:	f001 f967 	bl	8005608 <putchar>
	for (int level = 0; level < heap.nMax + 1 - heap.nMin; ++level) {
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	3301      	adds	r3, #1
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434a:	429a      	cmp	r2, r3
 800434c:	f6ff af63 	blt.w	8004216 <printMap+0x16>
	}
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	3734      	adds	r7, #52	; 0x34
 8004356:	46bd      	mov	sp, r7
 8004358:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800435c:	b004      	add	sp, #16
 800435e:	4770      	bx	lr
 8004360:	080065fc 	.word	0x080065fc
 8004364:	08006604 	.word	0x08006604
 8004368:	08006608 	.word	0x08006608
 800436c:	08006614 	.word	0x08006614

08004370 <print>:

/**
 * This prints both map and memory of buddy heap
 * @param heap      : Pointer to buddy heap instance
 */
static void print(BuddyHeap heap) {
 8004370:	b084      	sub	sp, #16
 8004372:	b590      	push	{r4, r7, lr}
 8004374:	b085      	sub	sp, #20
 8004376:	af04      	add	r7, sp, #16
 8004378:	f107 0410 	add.w	r4, r7, #16
 800437c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printf("******************\n");
 8004380:	4810      	ldr	r0, [pc, #64]	; (80043c4 <print+0x54>)
 8004382:	f001 f9c3 	bl	800570c <puts>
	printMemory(heap);
 8004386:	466c      	mov	r4, sp
 8004388:	f107 0320 	add.w	r3, r7, #32
 800438c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800439a:	f7ff ff0f 	bl	80041bc <printMemory>
	printMap(heap);
 800439e:	466c      	mov	r4, sp
 80043a0:	f107 0320 	add.w	r3, r7, #32
 80043a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043ac:	f107 0310 	add.w	r3, r7, #16
 80043b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043b2:	f7ff ff25 	bl	8004200 <printMap>
}
 80043b6:	bf00      	nop
 80043b8:	3704      	adds	r7, #4
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80043c0:	b004      	add	sp, #16
 80043c2:	4770      	bx	lr
 80043c4:	08006618 	.word	0x08006618

080043c8 <allocateRecursion>:

static int allocateRecursion(BuddyHeap *heap, int origin, int level, int blockSize, int requiredSize, int updateMap) {
 80043c8:	b590      	push	{r4, r7, lr}
 80043ca:	b08d      	sub	sp, #52	; 0x34
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
	int mapIdx = get2power(level) - 1 + origin / blockSize;
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fdbd 	bl	8003f56 <get2power>
 80043dc:	4603      	mov	r3, r0
 80043de:	1e5a      	subs	r2, r3, #1
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	fb91 f3f3 	sdiv	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
	if (getMap(heap->map, mapIdx) || blockSize < requiredSize)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fe14 	bl	8004020 <getMap>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <allocateRecursion+0x3e>
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004402:	429a      	cmp	r2, r3
 8004404:	da02      	bge.n	800440c <allocateRecursion+0x44>
		return -1;
 8004406:	f04f 33ff 	mov.w	r3, #4294967295
 800440a:	e08d      	b.n	8004528 <allocateRecursion+0x160>
	else if (blockSize == heap->minSize) {
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d10b      	bne.n	800442e <allocateRecursion+0x66>
		if (updateMap)
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d006      	beq.n	800442a <allocateRecursion+0x62>
			setMap(heap->map, mapIdx, 1); //map[mapIdx]=1;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fdb9 	bl	8003f9c <setMap>
		return origin;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	e07c      	b.n	8004528 <allocateRecursion+0x160>
	} else if (blockSize == requiredSize) {
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	429a      	cmp	r2, r3
 8004434:	d148      	bne.n	80044c8 <allocateRecursion+0x100>
		int leftIndex = allocateRecursion(heap, origin, level + 1, blockSize / 2, blockSize / 2, 0);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1c59      	adds	r1, r3, #1
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	0fda      	lsrs	r2, r3, #31
 800443e:	4413      	add	r3, r2
 8004440:	105b      	asrs	r3, r3, #1
 8004442:	4618      	mov	r0, r3
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	0fda      	lsrs	r2, r3, #31
 8004448:	4413      	add	r3, r2
 800444a:	105b      	asrs	r3, r3, #1
 800444c:	461a      	mov	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	9301      	str	r3, [sp, #4]
 8004452:	9200      	str	r2, [sp, #0]
 8004454:	4603      	mov	r3, r0
 8004456:	460a      	mov	r2, r1
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7ff ffb4 	bl	80043c8 <allocateRecursion>
 8004460:	61b8      	str	r0, [r7, #24]
		int rightIndex = allocateRecursion(heap, origin + blockSize / 2, level + 1, blockSize / 2, blockSize / 2, 0);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	0fda      	lsrs	r2, r3, #31
 8004466:	4413      	add	r3, r2
 8004468:	105b      	asrs	r3, r3, #1
 800446a:	461a      	mov	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	18d1      	adds	r1, r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1c58      	adds	r0, r3, #1
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	0fda      	lsrs	r2, r3, #31
 8004478:	4413      	add	r3, r2
 800447a:	105b      	asrs	r3, r3, #1
 800447c:	461c      	mov	r4, r3
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	0fda      	lsrs	r2, r3, #31
 8004482:	4413      	add	r3, r2
 8004484:	105b      	asrs	r3, r3, #1
 8004486:	461a      	mov	r2, r3
 8004488:	2300      	movs	r3, #0
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	9200      	str	r2, [sp, #0]
 800448e:	4623      	mov	r3, r4
 8004490:	4602      	mov	r2, r0
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f7ff ff98 	bl	80043c8 <allocateRecursion>
 8004498:	6178      	str	r0, [r7, #20]
		if (leftIndex == -1 || rightIndex == -1)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d003      	beq.n	80044aa <allocateRecursion+0xe2>
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d102      	bne.n	80044b0 <allocateRecursion+0xe8>
			return -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	e03b      	b.n	8004528 <allocateRecursion+0x160>
		if (updateMap)
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <allocateRecursion+0xfc>
			setMap(heap->map, mapIdx, 1); //map[mapIdx]=1;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fd6c 	bl	8003f9c <setMap>
		return origin;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	e02f      	b.n	8004528 <allocateRecursion+0x160>
	} else {
		int leftIndex = allocateRecursion(heap, origin, level + 1, blockSize / 2, requiredSize, updateMap);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	1c59      	adds	r1, r3, #1
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	0fda      	lsrs	r2, r3, #31
 80044d0:	4413      	add	r3, r2
 80044d2:	105b      	asrs	r3, r3, #1
 80044d4:	461a      	mov	r2, r3
 80044d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4613      	mov	r3, r2
 80044e0:	460a      	mov	r2, r1
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff ff6f 	bl	80043c8 <allocateRecursion>
 80044ea:	6238      	str	r0, [r7, #32]
		if (leftIndex >= 0)
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	db01      	blt.n	80044f6 <allocateRecursion+0x12e>
			return leftIndex;
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	e018      	b.n	8004528 <allocateRecursion+0x160>
		int rightIndex = allocateRecursion(heap, origin + blockSize / 2, level + 1, blockSize / 2, requiredSize, updateMap);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	0fda      	lsrs	r2, r3, #31
 80044fa:	4413      	add	r3, r2
 80044fc:	105b      	asrs	r3, r3, #1
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	18d1      	adds	r1, r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	1c58      	adds	r0, r3, #1
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	0fda      	lsrs	r2, r3, #31
 800450c:	4413      	add	r3, r2
 800450e:	105b      	asrs	r3, r3, #1
 8004510:	461a      	mov	r2, r3
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	4613      	mov	r3, r2
 800451c:	4602      	mov	r2, r0
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff ff52 	bl	80043c8 <allocateRecursion>
 8004524:	61f8      	str	r0, [r7, #28]
		return rightIndex;
 8004526:	69fb      	ldr	r3, [r7, #28]
	}
}
 8004528:	4618      	mov	r0, r3
 800452a:	372c      	adds	r7, #44	; 0x2c
 800452c:	46bd      	mov	sp, r7
 800452e:	bd90      	pop	{r4, r7, pc}

08004530 <allocate>:
 * @param heap      : Pointer to buddy heap instance
 * @param size      : Size to be allocated
 * @return          : Pointer to the allocated memory
 *                  : NULL if heap memory is not available
 */
static void* allocate(BuddyHeap *heap, int size) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	int exponent = getLog2(size);
 800453a:	6838      	ldr	r0, [r7, #0]
 800453c:	f7ff fd18 	bl	8003f70 <getLog2>
 8004540:	6178      	str	r0, [r7, #20]
	int requiredSize = get2power(exponent);
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff fd07 	bl	8003f56 <get2power>
 8004548:	6138      	str	r0, [r7, #16]
	int memIdx = allocateRecursion(heap, 0, 0, heap->maxSize, requiredSize, 1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	2301      	movs	r3, #1
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	2200      	movs	r2, #0
 800455a:	2100      	movs	r1, #0
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff ff33 	bl	80043c8 <allocateRecursion>
 8004562:	60f8      	str	r0, [r7, #12]
	if (memIdx == -1)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d101      	bne.n	8004570 <allocate+0x40>
		return NULL;
 800456c:	2300      	movs	r3, #0
 800456e:	e003      	b.n	8004578 <allocate+0x48>
	return &(heap->memory[memIdx]);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <deallocateRecursion>:

static int deallocateRecursion(BuddyHeap *heap, int origin, int level, int blockSize, int requiredMemIdx) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
	int mapIdx = get2power(level) - 1 + origin / blockSize;
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff fce1 	bl	8003f56 <get2power>
 8004594:	4603      	mov	r3, r0
 8004596:	1e5a      	subs	r2, r3, #1
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	fb91 f3f3 	sdiv	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	61fb      	str	r3, [r7, #28]
	if (getMap(heap->map, mapIdx) == 1 && origin == requiredMemIdx) {
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	69f9      	ldr	r1, [r7, #28]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fd38 	bl	8004020 <getMap>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d10c      	bne.n	80045d0 <deallocateRecursion+0x50>
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d108      	bne.n	80045d0 <deallocateRecursion+0x50>
		setMap(heap->map, mapIdx, 0);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	69f9      	ldr	r1, [r7, #28]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7ff fce8 	bl	8003f9c <setMap>
		return mapIdx;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	e033      	b.n	8004638 <deallocateRecursion+0xb8>
	}
	if (blockSize == heap->minSize) {
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d102      	bne.n	80045e0 <deallocateRecursion+0x60>
		return -1;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e02b      	b.n	8004638 <deallocateRecursion+0xb8>
	} else {
		int leftIndex = deallocateRecursion(heap, origin, level + 1, blockSize / 2, requiredMemIdx);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	0fda      	lsrs	r2, r3, #31
 80045e8:	4413      	add	r3, r2
 80045ea:	105b      	asrs	r3, r3, #1
 80045ec:	461a      	mov	r2, r3
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	460a      	mov	r2, r1
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff ffc1 	bl	8004580 <deallocateRecursion>
 80045fe:	61b8      	str	r0, [r7, #24]
		if (leftIndex >= 0)
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	db01      	blt.n	800460a <deallocateRecursion+0x8a>
			return leftIndex;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	e016      	b.n	8004638 <deallocateRecursion+0xb8>
		int rightIndex = deallocateRecursion(heap, origin + blockSize / 2, level + 1, blockSize / 2, requiredMemIdx);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	0fda      	lsrs	r2, r3, #31
 800460e:	4413      	add	r3, r2
 8004610:	105b      	asrs	r3, r3, #1
 8004612:	461a      	mov	r2, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	18d1      	adds	r1, r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	1c58      	adds	r0, r3, #1
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	0fda      	lsrs	r2, r3, #31
 8004620:	4413      	add	r3, r2
 8004622:	105b      	asrs	r3, r3, #1
 8004624:	461a      	mov	r2, r3
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	4602      	mov	r2, r0
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff ffa6 	bl	8004580 <deallocateRecursion>
 8004634:	6178      	str	r0, [r7, #20]
		return rightIndex;
 8004636:	697b      	ldr	r3, [r7, #20]
	}
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <deallocate>:
 * @param heap      : Pointer to buddy heap instance
 * @param ptr       : Pointer to the allocated memory
 * @return          : 1 if successfully deallocated
 *                  : 0 if ptr is not valid address or not belongs to this heap
 */
static int deallocate(BuddyHeap *heap, void *ptr) {
 8004640:	b590      	push	{r4, r7, lr}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af04      	add	r7, sp, #16
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
	if (!isValidPointer(*heap, ptr))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	9203      	str	r2, [sp, #12]
 8004650:	466c      	mov	r4, sp
 8004652:	f103 0210 	add.w	r2, r3, #16
 8004656:	ca07      	ldmia	r2, {r0, r1, r2}
 8004658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800465c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800465e:	f7ff fd07 	bl	8004070 <isValidPointer>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <deallocate+0x2c>
		return 0;
 8004668:	2300      	movs	r3, #0
 800466a:	e015      	b.n	8004698 <deallocate+0x58>

	int memIdx = (int) ((AddrType) ptr - (AddrType) (heap->memory));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
	int mapIdx = deallocateRecursion(heap, 0, 0, heap->maxSize, memIdx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691a      	ldr	r2, [r3, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	2200      	movs	r2, #0
 8004682:	2100      	movs	r1, #0
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ff7b 	bl	8004580 <deallocateRecursion>
 800468a:	60b8      	str	r0, [r7, #8]
	return mapIdx > 0;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	bfcc      	ite	gt
 8004692:	2301      	movgt	r3, #1
 8004694:	2300      	movle	r3, #0
 8004696:	b2db      	uxtb	r3, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bd90      	pop	{r4, r7, pc}

080046a0 <new>:
 * @param buffer        : Buffer for memory and map
 * @param bufferSize    : Size of buffer given in bytes
 * @param minSize       : Least size of memory that gets allocated (If 2bytes is minimum size then allocation of 1byte takes 2bytes)
 * @return              : Initiated Buddy heap
 */
static BuddyHeap new(uint8_t *buffer, int bufferSize, int minSize) {
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b090      	sub	sp, #64	; 0x40
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < bufferSize; ++i)
 80046ae:	2300      	movs	r3, #0
 80046b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b2:	e007      	b.n	80046c4 <new+0x24>
		buffer[i] = 0;
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	2200      	movs	r2, #0
 80046bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < bufferSize; ++i)
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	3301      	adds	r3, #1
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	dbf3      	blt.n	80046b4 <new+0x14>

	int maxSize = (bufferSize * 4 * minSize) / (1 + 4 * minSize);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	fb02 f303 	mul.w	r3, r2, r3
 80046d4:	009a      	lsls	r2, r3, #2
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	3301      	adds	r3, #1
 80046dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
	int nMax = getLog2(maxSize);
 80046e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046e4:	f7ff fc44 	bl	8003f70 <getLog2>
 80046e8:	63b8      	str	r0, [r7, #56]	; 0x38
	if (get2power(nMax) > maxSize)
 80046ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046ec:	f7ff fc33 	bl	8003f56 <get2power>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	4293      	cmp	r3, r2
 80046f6:	da02      	bge.n	80046fe <new+0x5e>
		nMax = nMax - 1;
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	3b01      	subs	r3, #1
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
	maxSize = get2power(nMax);
 80046fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004700:	f7ff fc29 	bl	8003f56 <get2power>
 8004704:	6378      	str	r0, [r7, #52]	; 0x34
	int mapSize = mapSize(maxSize, minSize);
 8004706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004708:	005a      	lsls	r2, r3, #1
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	da00      	bge.n	8004716 <new+0x76>
 8004714:	3307      	adds	r3, #7
 8004716:	10db      	asrs	r3, r3, #3
 8004718:	633b      	str	r3, [r7, #48]	; 0x30

	BuddyHeap heap;
	heap.memory = buffer;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	617b      	str	r3, [r7, #20]
	heap.map = &buffer[maxSize];
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	4413      	add	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
	heap.maxSize = maxSize;
 8004726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
	heap.minSize = minSize;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
	heap.mapSize = mapSize;
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
	heap.nMax = nMax;
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	61fb      	str	r3, [r7, #28]
	heap.nMin = getLog2(minSize);
 8004736:	6838      	ldr	r0, [r7, #0]
 8004738:	f7ff fc1a 	bl	8003f70 <getLog2>
 800473c:	4603      	mov	r3, r0
 800473e:	623b      	str	r3, [r7, #32]
	return heap;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	461d      	mov	r5, r3
 8004744:	f107 0414 	add.w	r4, r7, #20
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004750:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	3740      	adds	r7, #64	; 0x40
 8004758:	46bd      	mov	sp, r7
 800475a:	bdb0      	pop	{r4, r5, r7, pc}

0800475c <crc_init>:
    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};
static uint32_t crc_value;
void crc_init(void){
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
    crc_value=0xFFFFFFFF;
 8004760:	4b03      	ldr	r3, [pc, #12]	; (8004770 <crc_init+0x14>)
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	601a      	str	r2, [r3, #0]
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	200036c8 	.word	0x200036c8

08004774 <crc32_accumulate>:
uint32_t crc32_accumulate(uint8_t *bytes,uint32_t len){
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	; 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
    uint32_t crc = crc_value;
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <crc32_accumulate+0xa4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	61fb      	str	r3, [r7, #28]
    uint32_t limit = len/4+(len%4>0?1:0);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	f002 0203 	and.w	r2, r2, #3
 800478e:	2a00      	cmp	r2, #0
 8004790:	d001      	beq.n	8004796 <crc32_accumulate+0x22>
 8004792:	2201      	movs	r2, #1
 8004794:	e000      	b.n	8004798 <crc32_accumulate+0x24>
 8004796:	2200      	movs	r2, #0
 8004798:	4413      	add	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
    for(int i=0;i<limit;i++){
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e02d      	b.n	80047fe <crc32_accumulate+0x8a>
        for(int j=3;j>=0;j--){
 80047a2:	2303      	movs	r3, #3
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e024      	b.n	80047f2 <crc32_accumulate+0x7e>
            uint32_t count = (4*i+j);
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	009a      	lsls	r2, r3, #2
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
            if(count<len)
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d20f      	bcs.n	80047da <crc32_accumulate+0x66>
                crc = (crc<<8) ^ table[(((crc>>24)^bytes[count]) & 0xff)];
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	021a      	lsls	r2, r3, #8
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	4401      	add	r1, r0
 80047c8:	7809      	ldrb	r1, [r1, #0]
 80047ca:	404b      	eors	r3, r1
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	4913      	ldr	r1, [pc, #76]	; (800481c <crc32_accumulate+0xa8>)
 80047d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047d4:	4053      	eors	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	e008      	b.n	80047ec <crc32_accumulate+0x78>
            else
                crc = (crc<<8) ^ table[((crc>>24) & 0xff)];
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	021a      	lsls	r2, r3, #8
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	490e      	ldr	r1, [pc, #56]	; (800481c <crc32_accumulate+0xa8>)
 80047e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047e8:	4053      	eors	r3, r2
 80047ea:	61fb      	str	r3, [r7, #28]
        for(int j=3;j>=0;j--){
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	dad7      	bge.n	80047a8 <crc32_accumulate+0x34>
    for(int i=0;i<limit;i++){
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	d8cd      	bhi.n	80047a2 <crc32_accumulate+0x2e>
        }
    }
    crc_value = crc;
 8004806:	4a04      	ldr	r2, [pc, #16]	; (8004818 <crc32_accumulate+0xa4>)
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	6013      	str	r3, [r2, #0]
    return crc;
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3724      	adds	r7, #36	; 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	200036c8 	.word	0x200036c8
 800481c:	20000074 	.word	0x20000074

08004820 <crc32_calculate>:
uint32_t crc32_calculate(uint8_t *bytes,uint32_t len){
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    crc_init();
 800482a:	f7ff ff97 	bl	800475c <crc_init>
    crc32_accumulate(bytes,len);
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff9f 	bl	8004774 <crc32_accumulate>
    return crc_value;
 8004836:	4b03      	ldr	r3, [pc, #12]	; (8004844 <crc32_calculate+0x24>)
 8004838:	681b      	ldr	r3, [r3, #0]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	200036c8 	.word	0x200036c8

08004848 <hashFunc>:
/**
 * This converts key into hasKey
 * @param key   : Actual Key
 * @return      : Hash Key
 */
static int hashFunc(int key) {
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	return key % MAP_SIZE;
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <hashFunc+0x28>)
 8004854:	fb83 3102 	smull	r3, r1, r3, r2
 8004858:	17d3      	asrs	r3, r2, #31
 800485a:	1ac9      	subs	r1, r1, r3
 800485c:	460b      	mov	r3, r1
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	440b      	add	r3, r1
 8004862:	1ad1      	subs	r1, r2, r3
 8004864:	460b      	mov	r3, r1
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	55555556 	.word	0x55555556

08004874 <allocateMemory>:
 *                      : NULL for dynamic heap
 * @param sizeInByte    : Size in bytes
 * @return              : Pointer to allocated memory
 *                      : NULL if there exist no memory for allocation
 */
static void* allocateMemory(BuddyHeap *heap, int sizeInByte) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
	if (sizeInByte <= 0)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	dc01      	bgt.n	8004888 <allocateMemory+0x14>
		return NULL;
 8004884:	2300      	movs	r3, #0
 8004886:	e019      	b.n	80048bc <allocateMemory+0x48>
	void *ptr;
	ptr = heap != NULL ? StaticBuddyHeap.malloc(heap, sizeInByte) : malloc(sizeInByte);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <allocateMemory+0x28>
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <allocateMemory+0x50>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	4798      	blx	r3
 8004898:	4603      	mov	r3, r0
 800489a:	e004      	b.n	80048a6 <allocateMemory+0x32>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fd98 	bl	80053d4 <malloc>
 80048a4:	4603      	mov	r3, r0
 80048a6:	60fb      	str	r3, [r7, #12]
	if (ptr != NULL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <allocateMemory+0x46>
		allocatedMemory += sizeInByte;
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <allocateMemory+0x54>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <allocateMemory+0x54>)
 80048b8:	6013      	str	r3, [r2, #0]
	return ptr;
 80048ba:	68fb      	ldr	r3, [r7, #12]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000058 	.word	0x20000058
 80048c8:	200036cc 	.word	0x200036cc

080048cc <freeMemory>:
 *                      : NULL for dynamic heap
 * @param pointer       : Pointer to allocated Memory
 * @param sizeInByte    : Size to be freed
 * @return              : 1 for success (OR) 0 for failed
 */
static int freeMemory(BuddyHeap *heap, void *pointer, int sizeInByte) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	if (pointer == NULL || sizeInByte <= 0)
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <freeMemory+0x18>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dc01      	bgt.n	80048e8 <freeMemory+0x1c>
		return 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e012      	b.n	800490e <freeMemory+0x42>
	heap != NULL ? StaticBuddyHeap.free(heap, pointer) : free(pointer);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <freeMemory+0x2e>
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <freeMemory+0x4c>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	4798      	blx	r3
 80048f8:	e002      	b.n	8004900 <freeMemory+0x34>
 80048fa:	68b8      	ldr	r0, [r7, #8]
 80048fc:	f000 fd72 	bl	80053e4 <free>
	allocatedMemory -= sizeInByte;
 8004900:	4b06      	ldr	r3, [pc, #24]	; (800491c <freeMemory+0x50>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	4a04      	ldr	r2, [pc, #16]	; (800491c <freeMemory+0x50>)
 800490a:	6013      	str	r3, [r2, #0]
	return 1;
 800490c:	2301      	movs	r3, #1
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000058 	.word	0x20000058
 800491c:	200036cc 	.word	0x200036cc

08004920 <validMemory>:

/**
 * Check if memory pointer exist in defined memory
 */
static int validMemory(const char *func, BuddyHeap *heap, void *ptr) {
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af04      	add	r7, sp, #16
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
	if (ptr == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <validMemory+0x16>
		return 1;
 8004932:	2301      	movs	r3, #1
 8004934:	e043      	b.n	80049be <validMemory+0x9e>
	uint32_t addr = (uint32_t) ptr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	617b      	str	r3, [r7, #20]
	if (heap == NULL) {
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d114      	bne.n	800496a <validMemory+0x4a>
		if (addr < 0x20000000 || addr > 0x20004fff) {
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004946:	d303      	bcc.n	8004950 <validMemory+0x30>
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4a1f      	ldr	r2, [pc, #124]	; (80049c8 <validMemory+0xa8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d335      	bcc.n	80049bc <validMemory+0x9c>
			printf("HashMap-%s:\n", func);
 8004950:	68f9      	ldr	r1, [r7, #12]
 8004952:	481e      	ldr	r0, [pc, #120]	; (80049cc <validMemory+0xac>)
 8004954:	f000 fe40 	bl	80055d8 <iprintf>
			printf("Memory : 0x20000000 - 0x20004fff\n");
 8004958:	481d      	ldr	r0, [pc, #116]	; (80049d0 <validMemory+0xb0>)
 800495a:	f000 fed7 	bl	800570c <puts>
			printf("Ptr : %p\n\n", ptr);
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	481c      	ldr	r0, [pc, #112]	; (80049d4 <validMemory+0xb4>)
 8004962:	f000 fe39 	bl	80055d8 <iprintf>
//			*(uint8_t*)NULL = 10;
			return 0;
 8004966:	2300      	movs	r3, #0
 8004968:	e029      	b.n	80049be <validMemory+0x9e>
		}
	} else {
		if (!StaticBuddyHeap.isValidPointer(*heap, ptr)) {
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <validMemory+0xb8>)
 800496c:	699d      	ldr	r5, [r3, #24]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	9203      	str	r2, [sp, #12]
 8004974:	466c      	mov	r4, sp
 8004976:	f103 0210 	add.w	r2, r3, #16
 800497a:	ca07      	ldmia	r2, {r0, r1, r2}
 800497c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004980:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004982:	47a8      	blx	r5
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d118      	bne.n	80049bc <validMemory+0x9c>
			printf("HashMap-%s:\n", func);
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	480f      	ldr	r0, [pc, #60]	; (80049cc <validMemory+0xac>)
 800498e:	f000 fe23 	bl	80055d8 <iprintf>
			printf("Heap : %p\n", heap);
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	4811      	ldr	r0, [pc, #68]	; (80049dc <validMemory+0xbc>)
 8004996:	f000 fe1f 	bl	80055d8 <iprintf>
			printf("Memory : %p - %p\n", heap->memory, heap->memory + heap->maxSize);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	6819      	ldr	r1, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	6912      	ldr	r2, [r2, #16]
 80049a6:	4413      	add	r3, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	480d      	ldr	r0, [pc, #52]	; (80049e0 <validMemory+0xc0>)
 80049ac:	f000 fe14 	bl	80055d8 <iprintf>
			printf("Ptr : %p\n\n", ptr);
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4808      	ldr	r0, [pc, #32]	; (80049d4 <validMemory+0xb4>)
 80049b4:	f000 fe10 	bl	80055d8 <iprintf>
//			*(uint8_t*) NULL = 10;
			return 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <validMemory+0x9e>
		}

	}
	return 1;
 80049bc:	2301      	movs	r3, #1
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdb0      	pop	{r4, r5, r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20005000 	.word	0x20005000
 80049cc:	0800662c 	.word	0x0800662c
 80049d0:	0800663c 	.word	0x0800663c
 80049d4:	08006660 	.word	0x08006660
 80049d8:	20000058 	.word	0x20000058
 80049dc:	0800666c 	.word	0x0800666c
 80049e0:	08006678 	.word	0x08006678

080049e4 <new>:
 * It allocates the memory for HashMap and return allocated HashMap
 * @param heap          : Pointer to static heap
 *                      : NULL for dynamic heap
 * @return : Allocated HashMap (!!! Must be free using free) (OR) NULL if heap is full
 */
static HashMap* new(BuddyHeap *heap) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	//Allocate memory for hash map
	HashMap *map = allocateMemory(heap, sizeof(HashMap));
 80049ec:	2114      	movs	r1, #20
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ff40 	bl	8004874 <allocateMemory>
 80049f4:	60b8      	str	r0, [r7, #8]

	//Invalid memory
	if (!validMemory(__func__, heap, map))
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4813      	ldr	r0, [pc, #76]	; (8004a48 <new+0x64>)
 80049fc:	f7ff ff90 	bl	8004920 <validMemory>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <new+0x26>
		return NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e01a      	b.n	8004a40 <new+0x5c>

	//Heap is full
	if (map == NULL)
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <new+0x30>
		return NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e015      	b.n	8004a40 <new+0x5c>

	//Heap for map
	map->heap = heap;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	611a      	str	r2, [r3, #16]

	//Filling all entries with NULL
	for (int i = 0; i < MAP_SIZE; ++i)
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e008      	b.n	8004a32 <new+0x4e>
		map->entries[i] = NULL;
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < MAP_SIZE; ++i)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	ddf3      	ble.n	8004a20 <new+0x3c>

	//Make initial size zero
	map->size = 0;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]

	return map;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	08006738 	.word	0x08006738

08004a4c <print>:

/**
 * Prints the contents of hash map
 * @param map  : Hash map
 */
static void print(HashMap *map) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	if (map == NULL) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <print+0x16>
		printf("map is NULL!!!\n");
 8004a5a:	481a      	ldr	r0, [pc, #104]	; (8004ac4 <print+0x78>)
 8004a5c:	f000 fe56 	bl	800570c <puts>
		return;
 8004a60:	e02d      	b.n	8004abe <print+0x72>
	}

	for (int i = 0; i < MAP_SIZE; ++i) {
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	e027      	b.n	8004ab8 <print+0x6c>
		printf("%4d: ", i);
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	4817      	ldr	r0, [pc, #92]	; (8004ac8 <print+0x7c>)
 8004a6c:	f000 fdb4 	bl	80055d8 <iprintf>
		Entry *entry = map->entries[i];
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < MAX_LOOP; ++j) {
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e00e      	b.n	8004aa0 <print+0x54>
			if (entry == NULL)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <print+0x5e>
				break;
			printf("%d >> ", entry->key);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	480f      	ldr	r0, [pc, #60]	; (8004acc <print+0x80>)
 8004a90:	f000 fda2 	bl	80055d8 <iprintf>
			entry = entry->nextEntry;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < MAX_LOOP; ++j) {
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa6:	dbec      	blt.n	8004a82 <print+0x36>
 8004aa8:	e000      	b.n	8004aac <print+0x60>
				break;
 8004aaa:	bf00      	nop
		}
		printf("\n");
 8004aac:	200a      	movs	r0, #10
 8004aae:	f000 fdab 	bl	8005608 <putchar>
	for (int i = 0; i < MAP_SIZE; ++i) {
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	ddd4      	ble.n	8004a68 <print+0x1c>
	}
}
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	0800668c 	.word	0x0800668c
 8004ac8:	0800669c 	.word	0x0800669c
 8004acc:	080066a4 	.word	0x080066a4

08004ad0 <insert>:
 * @param map   : HashMap
 * @param key   : Key for value
 * @param value : Value to be inserted of type HashMapType
 * @return      : Same map (OR) NULL if heap is full or map is null
 */
static HashMap* insert(HashMap *map, int key, HashMapType value) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	//If map is NULL then return NULL
	if (map == NULL)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <insert+0x16>
		return NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	e079      	b.n	8004bda <insert+0x10a>

	//Allocate Memory for @Entry
	Entry *newEntry = allocateMemory(map->heap, sizeof(Entry));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	210c      	movs	r1, #12
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fec1 	bl	8004874 <allocateMemory>
 8004af2:	6178      	str	r0, [r7, #20]
	if (!validMemory(__func__, map->heap, newEntry))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4619      	mov	r1, r3
 8004afc:	4839      	ldr	r0, [pc, #228]	; (8004be4 <insert+0x114>)
 8004afe:	f7ff ff0f 	bl	8004920 <validMemory>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <insert+0x3c>
		return NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e066      	b.n	8004bda <insert+0x10a>

	//If heap is full then return NULL
	if (newEntry == NULL)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <insert+0x46>
		return NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e061      	b.n	8004bda <insert+0x10a>

	//Fill the data in entry
	newEntry->key = key;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	601a      	str	r2, [r3, #0]
	newEntry->value = value;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	605a      	str	r2, [r3, #4]
	newEntry->nextEntry = NULL; //make next entry is empty
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]

	//Calculate hashKey
	int hashKey = hashFunc(key);
 8004b28:	68b8      	ldr	r0, [r7, #8]
 8004b2a:	f7ff fe8d 	bl	8004848 <hashFunc>
 8004b2e:	6138      	str	r0, [r7, #16]

	//Get the top of entry of corresponding hashmap
	Entry *entry = map->entries[hashKey];
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	61fb      	str	r3, [r7, #28]

	if (entry == NULL) {
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <insert+0x80>
		//If top entry is empty fill the entry
		map->entries[hashKey] = newEntry;
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	e03e      	b.n	8004bce <insert+0xfe>
	} else {
		int l = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61bb      	str	r3, [r7, #24]
		for (; l < MAX_LOOP; ++l) {
 8004b54:	e028      	b.n	8004ba8 <insert+0xd8>
			//Check if key already exist
			if (entry->key == key) {
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d10b      	bne.n	8004b78 <insert+0xa8>
				//Only update value
				entry->value = value;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	605a      	str	r2, [r3, #4]

				//Free allocated memory for @newEntry
				freeMemory(map->heap, newEntry, sizeof(Entry));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	6979      	ldr	r1, [r7, #20]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff feac 	bl	80048cc <freeMemory>
				return map;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	e030      	b.n	8004bda <insert+0x10a>
			}

			//If entry is invalid pointer break
			if (!validMemory(__func__, map->heap, entry))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4818      	ldr	r0, [pc, #96]	; (8004be4 <insert+0x114>)
 8004b82:	f7ff fecd 	bl	8004920 <validMemory>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d012      	beq.n	8004bb2 <insert+0xe2>
				break;

			//If next entry is empty(@NULL) break
			if (entry->nextEntry == NULL) {
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <insert+0xcc>
				entry->nextEntry = newEntry;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	609a      	str	r2, [r3, #8]
				break;
 8004b9a:	e00b      	b.n	8004bb4 <insert+0xe4>
			}
			//If this entry is not empty select next entry
			entry = entry->nextEntry;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	61fb      	str	r3, [r7, #28]
		for (; l < MAX_LOOP; ++l) {
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bae:	dbd2      	blt.n	8004b56 <insert+0x86>
 8004bb0:	e000      	b.n	8004bb4 <insert+0xe4>
				break;
 8004bb2:	bf00      	nop
		}

		//If @MAX_LOOP exceeds then entry is not inserted
		if (l >= MAX_LOOP) {
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bba:	db08      	blt.n	8004bce <insert+0xfe>
			//Free allocated memory for @newEntry
			freeMemory(map->heap, newEntry, sizeof(Entry));
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	220c      	movs	r2, #12
 8004bc2:	6979      	ldr	r1, [r7, #20]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fe81 	bl	80048cc <freeMemory>
			return NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e005      	b.n	8004bda <insert+0x10a>
		}
	}
	//If entry is inserted then increase the size
	map->size++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

	//Return same @map
	return map;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	0800673c 	.word	0x0800673c

08004be8 <get>:
 * It searches the value corresponding to the key and return value
 * @param map   : HashMap
 * @param key   : Key for value
 * @return      : Value corresponding to the key (OR) NULL if key doesn't exist found
 */
static HashMapType get(HashMap *map, int key) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	//If map is NULL return NULL
	if (map == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <get+0x14>
		return HASH_MAP_NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e030      	b.n	8004c5e <get+0x76>

	//Calculate hashKey
	int hashKey = hashFunc(key);
 8004bfc:	6838      	ldr	r0, [r7, #0]
 8004bfe:	f7ff fe23 	bl	8004848 <hashFunc>
 8004c02:	60f8      	str	r0, [r7, #12]

	//Get the top of entry for corresponding hashmap
	Entry *entry = map->entries[hashKey];
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	617b      	str	r3, [r7, #20]
	for (int l = 0; l < MAX_LOOP; ++l) {
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	e01c      	b.n	8004c50 <get+0x68>
		//If entry is invalid pointer then break
		if (!validMemory(__func__, map->heap, entry))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4812      	ldr	r0, [pc, #72]	; (8004c68 <get+0x80>)
 8004c20:	f7ff fe7e 	bl	8004920 <validMemory>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <get+0x72>
			break;

		//If this entry is empty value doesn't exist in map so return NULL
		if (entry == NULL)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <get+0x4c>
			return HASH_MAP_NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e014      	b.n	8004c5e <get+0x76>

		//If key is found return value
		if (entry->key == key)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d102      	bne.n	8004c44 <get+0x5c>
			return entry->value;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	e00c      	b.n	8004c5e <get+0x76>

		//If key is not found then go to next entry
		entry = entry->nextEntry;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	617b      	str	r3, [r7, #20]
	for (int l = 0; l < MAX_LOOP; ++l) {
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c56:	dbde      	blt.n	8004c16 <get+0x2e>
 8004c58:	e000      	b.n	8004c5c <get+0x74>
			break;
 8004c5a:	bf00      	nop
	}

	//If loop exceeds the limit and no key is found then return NULL
	return HASH_MAP_NULL;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	08006744 	.word	0x08006744

08004c6c <delete>:
 * It deletes the values in hash map corresponding to given key
 * @param map   : HashMap
 * @param key   : Key for value
 * @return      : Same map (OR) NULL if key is not found or map is NULL
 */
static HashMap* delete(HashMap *map, int key) {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	//If map is NULL return NULL
	if (map == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <delete+0x14>
		return NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e04f      	b.n	8004d20 <delete+0xb4>

	//Calculate hashKey
	int hashKey = hashFunc(key);
 8004c80:	6838      	ldr	r0, [r7, #0]
 8004c82:	f7ff fde1 	bl	8004848 <hashFunc>
 8004c86:	6138      	str	r0, [r7, #16]

	//Get the top of entry of corresponding hashmap
	Entry *entry = map->entries[hashKey];
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	61fb      	str	r3, [r7, #28]
	//Initially previous entry is NULL
	Entry *prevEntry = NULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
	for (int l = 0; l < MAX_LOOP; ++l) {
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e037      	b.n	8004d0e <delete+0xa2>
		//If entry is invalid pointer then break
		if (!validMemory(__func__, map->heap, entry))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4820      	ldr	r0, [pc, #128]	; (8004d28 <delete+0xbc>)
 8004ca8:	f7ff fe3a 	bl	8004920 <validMemory>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d032      	beq.n	8004d18 <delete+0xac>
			break;
		//If entry is empty key doesn't exist
		if (entry == NULL)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d031      	beq.n	8004d1c <delete+0xb0>
			break;

		//Key found
		if (entry->key == key) {
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d11d      	bne.n	8004cfe <delete+0x92>
			//Copy next entry
			Entry *nextEntry = entry->nextEntry;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60fb      	str	r3, [r7, #12]

			if (prevEntry == NULL)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <delete+0x70>
				// If prevEntry is NULL then this entry is top entry
				map->entries[hashKey] = nextEntry;
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	e002      	b.n	8004ce2 <delete+0x76>
			else
				// If prevEntry is not NULL then this entry is branch entry
				prevEntry->nextEntry = nextEntry;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	609a      	str	r2, [r3, #8]

			//Deallocate memory for this entry
			freeMemory(map->heap, entry, sizeof(Entry));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	69f9      	ldr	r1, [r7, #28]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fdee 	bl	80048cc <freeMemory>

			//Decrease the size
			map->size--;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
			return map;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	e010      	b.n	8004d20 <delete+0xb4>
		}

		//Go to next entry if key is not found
		prevEntry = entry;
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	61bb      	str	r3, [r7, #24]
		entry = entry->nextEntry;
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	61fb      	str	r3, [r7, #28]
	for (int l = 0; l < MAX_LOOP; ++l) {
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d14:	dbc3      	blt.n	8004c9e <delete+0x32>
 8004d16:	e002      	b.n	8004d1e <delete+0xb2>
			break;
 8004d18:	bf00      	nop
 8004d1a:	e000      	b.n	8004d1e <delete+0xb2>
			break;
 8004d1c:	bf00      	nop
	}

	//If key is not found return NULL
	return NULL;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3720      	adds	r7, #32
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	08006748 	.word	0x08006748

08004d2c <getKeys>:
 * @param map   : HashMap
 * @param keys  : Array of integer of size equal to size of map
 * @param len	: stores actual length of keys
 * @return      : same map (OR) NULL if map is NULL
 */
static HashMap* getKeys(HashMap *map, int keys[], int *len) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
	//If map is NULL return NULL
	if (map == NULL)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <getKeys+0x16>
		return NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e03b      	b.n	8004dba <getKeys+0x8e>

	int keyIndex = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
	for (int entryIndex = 0; entryIndex < MAP_SIZE; ++entryIndex) {
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e02f      	b.n	8004dac <getKeys+0x80>
		//Get top entry
		Entry *entry = map->entries[entryIndex];
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	617b      	str	r3, [r7, #20]

		for (int l = 0; l < MAX_LOOP; ++l) {
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e01b      	b.n	8004d96 <getKeys+0x6a>
			//If entry is invalid pointer then break
			if (!validMemory(__func__, map->heap, entry))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4619      	mov	r1, r3
 8004d66:	4817      	ldr	r0, [pc, #92]	; (8004dc4 <getKeys+0x98>)
 8004d68:	f7ff fdda 	bl	8004920 <validMemory>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d016      	beq.n	8004da0 <getKeys+0x74>
				break;
			//If entry is empty then break loop
			if (entry == NULL)
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d015      	beq.n	8004da4 <getKeys+0x78>
				break;

			//If entry is not empty
			keys[keyIndex++] = entry->key; // Copy key and increase keyIndex
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	61fa      	str	r2, [r7, #28]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4413      	add	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	601a      	str	r2, [r3, #0]
			entry = entry->nextEntry; //Go to next entry
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	617b      	str	r3, [r7, #20]
		for (int l = 0; l < MAX_LOOP; ++l) {
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3301      	adds	r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d9c:	dbdf      	blt.n	8004d5e <getKeys+0x32>
 8004d9e:	e002      	b.n	8004da6 <getKeys+0x7a>
				break;
 8004da0:	bf00      	nop
 8004da2:	e000      	b.n	8004da6 <getKeys+0x7a>
				break;
 8004da4:	bf00      	nop
	for (int entryIndex = 0; entryIndex < MAP_SIZE; ++entryIndex) {
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	3301      	adds	r3, #1
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	ddcc      	ble.n	8004d4c <getKeys+0x20>
		}
	}

	*len = keyIndex;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	601a      	str	r2, [r3, #0]

	return map;
 8004db8:	68fb      	ldr	r3, [r7, #12]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08006750 	.word	0x08006750

08004dc8 <isKeyExist>:
 * It searches if key exist or not in map
 * @param map   : HashMap
 * @param key   : Key to be searched
 * @return      : 1 if key exist (OR) 0 if key doesn't exist
 */
static int isKeyExist(HashMap *map, int key) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	//If map is NULL return false
	if (map == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <isKeyExist+0x14>
		return 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e02f      	b.n	8004e3c <isKeyExist+0x74>

	//Calculate hashKey
	int hashKey = hashFunc(key);
 8004ddc:	6838      	ldr	r0, [r7, #0]
 8004dde:	f7ff fd33 	bl	8004848 <hashFunc>
 8004de2:	60f8      	str	r0, [r7, #12]

	//Get the top of entry for corresponding hashmap
	Entry *entry = map->entries[hashKey];
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	617b      	str	r3, [r7, #20]
	for (int l = 0; l < MAX_LOOP; ++l) {
 8004df0:	2300      	movs	r3, #0
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	e01b      	b.n	8004e2e <isKeyExist+0x66>
		//If entry is invalid pointer then break
		if (!validMemory(__func__, map->heap, entry))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4811      	ldr	r0, [pc, #68]	; (8004e44 <isKeyExist+0x7c>)
 8004e00:	f7ff fd8e 	bl	8004920 <validMemory>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <isKeyExist+0x70>
			break;
		//If this entry is empty key doesn't exist in map
		if (entry == NULL)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <isKeyExist+0x4c>
			return 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	e013      	b.n	8004e3c <isKeyExist+0x74>

		//If key is found return true
		if (entry->key == key)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d101      	bne.n	8004e22 <isKeyExist+0x5a>
			return 1;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e00c      	b.n	8004e3c <isKeyExist+0x74>

		//If key is not found then go to next entry
		entry = entry->nextEntry;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	617b      	str	r3, [r7, #20]
	for (int l = 0; l < MAX_LOOP; ++l) {
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e34:	dbdf      	blt.n	8004df6 <isKeyExist+0x2e>
 8004e36:	e000      	b.n	8004e3a <isKeyExist+0x72>
			break;
 8004e38:	bf00      	nop
	}

	//If loop exceeds the limit and no key is found then return false
	return 0;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08006758 	.word	0x08006758

08004e48 <freeMap>:
 * Computation Cost : O(n^2)\n
 * It delete all the entries and free memories allocated by map
 * @param mapPtr: Address of pointer to HashMap
 * @return      : 1 for success (OR) 0 for failed
 */
static int freeMap(HashMap **mapPtr) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	HashMap *map = *mapPtr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	617b      	str	r3, [r7, #20]
	//If map is NULL
	if (map == NULL)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <freeMap+0x18>
		return 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e061      	b.n	8004f24 <freeMap+0xdc>

	int size = map->size;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	613b      	str	r3, [r7, #16]
	//If map is empty
	if (size == 0) {
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <freeMap+0x3c>
		//Free hash map memory
		freeMemory(map->heap, map, sizeof(HashMap));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	2214      	movs	r2, #20
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fd29 	bl	80048cc <freeMemory>
		*mapPtr = NULL;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
		return 1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e04f      	b.n	8004f24 <freeMap+0xdc>
	}

	//Delete all entries
	for (int entryIndex = 0; entryIndex < MAP_SIZE; ++entryIndex) {
 8004e84:	2300      	movs	r3, #0
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	e03e      	b.n	8004f08 <freeMap+0xc0>
		for (int l = 0; l < MAX_LOOP; ++l) {
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e030      	b.n	8004ef2 <freeMap+0xaa>
			//If entry is invalid pointer then break
			if (!validMemory(__func__, map->heap, map->entries[entryIndex]))
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	6919      	ldr	r1, [r3, #16]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	4822      	ldr	r0, [pc, #136]	; (8004f2c <freeMap+0xe4>)
 8004ea2:	f7ff fd3d 	bl	8004920 <validMemory>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d027      	beq.n	8004efc <freeMap+0xb4>
				break;
			//If entry is empty then break loop
			if (map->entries[entryIndex] == NULL)
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d022      	beq.n	8004f00 <freeMap+0xb8>
				break;

			//If entry is not empty
			Entry *entry = map->entries[entryIndex];
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]

			// If prevEntry is NULL then this entry is top entry
			map->entries[entryIndex] = entry->nextEntry;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	605a      	str	r2, [r3, #4]

			//Deallocate memory for this entry
			freeMemory(map->heap, entry, sizeof(Entry));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	220c      	movs	r2, #12
 8004eda:	68f9      	ldr	r1, [r7, #12]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fcf5 	bl	80048cc <freeMemory>

			map->size--;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	1e5a      	subs	r2, r3, #1
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]
		for (int l = 0; l < MAX_LOOP; ++l) {
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef8:	dbca      	blt.n	8004e90 <freeMap+0x48>
 8004efa:	e002      	b.n	8004f02 <freeMap+0xba>
				break;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <freeMap+0xba>
				break;
 8004f00:	bf00      	nop
	for (int entryIndex = 0; entryIndex < MAP_SIZE; ++entryIndex) {
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	3301      	adds	r3, #1
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	ddbd      	ble.n	8004e8a <freeMap+0x42>
		}
	}

	//Free memory for hash map
	freeMemory(map->heap, map, sizeof(HashMap));
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2214      	movs	r2, #20
 8004f14:	6979      	ldr	r1, [r7, #20]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff fcd8 	bl	80048cc <freeMemory>

	*mapPtr = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

	return 1; //freeing memory success
 8004f22:	2301      	movs	r3, #1
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	08006764 	.word	0x08006764

08004f30 <getAllocatedMemories>:

/**
 * This return allocated memory for hash map till now
 * @return  : Allocated memories
 */
static int getAllocatedMemories() {
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
	return allocatedMemory;
 8004f34:	4b02      	ldr	r3, [pc, #8]	; (8004f40 <getAllocatedMemories+0x10>)
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr
 8004f40:	200036cc 	.word	0x200036cc

08004f44 <allocateMemory>:
 *                      : NULL for dynamic heap
 * @param sizeInByte    : Size in bytes
 * @return              : Pointer to allocated memory
 *                      : NULL if there exist no memory for allocation
 */
static void* allocateMemory(BuddyHeap *heap, int sizeInByte) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	if (sizeInByte <= 0)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dc01      	bgt.n	8004f58 <allocateMemory+0x14>
		return NULL;
 8004f54:	2300      	movs	r3, #0
 8004f56:	e019      	b.n	8004f8c <allocateMemory+0x48>
	void *ptr;
	ptr = heap != NULL ? StaticBuddyHeap.malloc(heap, sizeInByte) : malloc(sizeInByte);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <allocateMemory+0x28>
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <allocateMemory+0x50>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
 8004f68:	4603      	mov	r3, r0
 8004f6a:	e004      	b.n	8004f76 <allocateMemory+0x32>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 fa30 	bl	80053d4 <malloc>
 8004f74:	4603      	mov	r3, r0
 8004f76:	60fb      	str	r3, [r7, #12]
	if (ptr != NULL)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <allocateMemory+0x46>
		allocatedMemory += sizeInByte;
 8004f7e:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <allocateMemory+0x54>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	4413      	add	r3, r2
 8004f86:	4a04      	ldr	r2, [pc, #16]	; (8004f98 <allocateMemory+0x54>)
 8004f88:	6013      	str	r3, [r2, #0]
	return ptr;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000058 	.word	0x20000058
 8004f98:	200036d0 	.word	0x200036d0

08004f9c <freeMemory>:
 *                      : NULL for dynamic heap
 * @param pointer       : Pointer to allocated Memory
 * @param sizeInByte    : Size to be freed
 * @return              : 1 for success (OR) 0 for failed
 */
static int freeMemory(BuddyHeap *heap, void *pointer, int sizeInByte) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
	if (pointer == NULL || sizeInByte <= 0)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <freeMemory+0x18>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dc01      	bgt.n	8004fb8 <freeMemory+0x1c>
		return 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e012      	b.n	8004fde <freeMemory+0x42>
	heap != NULL ? StaticBuddyHeap.free(heap, pointer) : free(pointer);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d005      	beq.n	8004fca <freeMemory+0x2e>
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <freeMemory+0x4c>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	4798      	blx	r3
 8004fc8:	e002      	b.n	8004fd0 <freeMemory+0x34>
 8004fca:	68b8      	ldr	r0, [r7, #8]
 8004fcc:	f000 fa0a 	bl	80053e4 <free>
	allocatedMemory -= sizeInByte;
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <freeMemory+0x50>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	4a04      	ldr	r2, [pc, #16]	; (8004fec <freeMemory+0x50>)
 8004fda:	6013      	str	r3, [r2, #0]
	return 1;
 8004fdc:	2301      	movs	r3, #1
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000058 	.word	0x20000058
 8004fec:	200036d0 	.word	0x200036d0

08004ff0 <validMemory>:

/**
 * Check if memory pointer exist in defined memory
 */
static int validMemory(const char *func, BuddyHeap *heap, void *ptr) {
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b08a      	sub	sp, #40	; 0x28
 8004ff4:	af04      	add	r7, sp, #16
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
	if (ptr == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <validMemory+0x16>
		return 1;
 8005002:	2301      	movs	r3, #1
 8005004:	e043      	b.n	800508e <validMemory+0x9e>
	uint32_t addr = (uint32_t) ptr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	617b      	str	r3, [r7, #20]
	if (heap == NULL) {
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d114      	bne.n	800503a <validMemory+0x4a>
		if (addr < 0x20000000 || addr > 0x20004fff) {
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005016:	d303      	bcc.n	8005020 <validMemory+0x30>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <validMemory+0xa8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d335      	bcc.n	800508c <validMemory+0x9c>
			printf("HashMap-%s:\n", func);
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	481e      	ldr	r0, [pc, #120]	; (800509c <validMemory+0xac>)
 8005024:	f000 fad8 	bl	80055d8 <iprintf>
			printf("Memory : 0x20000000 - 0x20004fff\n");
 8005028:	481d      	ldr	r0, [pc, #116]	; (80050a0 <validMemory+0xb0>)
 800502a:	f000 fb6f 	bl	800570c <puts>
			printf("Ptr : %p\n\n", ptr);
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	481c      	ldr	r0, [pc, #112]	; (80050a4 <validMemory+0xb4>)
 8005032:	f000 fad1 	bl	80055d8 <iprintf>
//			*(uint8_t*)NULL = 10;
			return 0;
 8005036:	2300      	movs	r3, #0
 8005038:	e029      	b.n	800508e <validMemory+0x9e>
		}
	} else {
		if (!StaticBuddyHeap.isValidPointer(*heap, ptr)) {
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <validMemory+0xb8>)
 800503c:	699d      	ldr	r5, [r3, #24]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	466c      	mov	r4, sp
 8005046:	f103 0210 	add.w	r2, r3, #16
 800504a:	ca07      	ldmia	r2, {r0, r1, r2}
 800504c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005050:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005052:	47a8      	blx	r5
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d118      	bne.n	800508c <validMemory+0x9c>
			printf("HashMap-%s:\n", func);
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	480f      	ldr	r0, [pc, #60]	; (800509c <validMemory+0xac>)
 800505e:	f000 fabb 	bl	80055d8 <iprintf>
			printf("Heap : %p\n", heap);
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	4811      	ldr	r0, [pc, #68]	; (80050ac <validMemory+0xbc>)
 8005066:	f000 fab7 	bl	80055d8 <iprintf>
			printf("Memory : %p - %p\n", heap->memory, heap->memory + heap->maxSize);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6819      	ldr	r1, [r3, #0]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	6912      	ldr	r2, [r2, #16]
 8005076:	4413      	add	r3, r2
 8005078:	461a      	mov	r2, r3
 800507a:	480d      	ldr	r0, [pc, #52]	; (80050b0 <validMemory+0xc0>)
 800507c:	f000 faac 	bl	80055d8 <iprintf>
			printf("Ptr : %p\n\n", ptr);
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4808      	ldr	r0, [pc, #32]	; (80050a4 <validMemory+0xb4>)
 8005084:	f000 faa8 	bl	80055d8 <iprintf>
//			*(uint8_t*) NULL = 10;
			return 0;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <validMemory+0x9e>
		}

	}
	return 1;
 800508c:	2301      	movs	r3, #1
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bdb0      	pop	{r4, r5, r7, pc}
 8005096:	bf00      	nop
 8005098:	20005000 	.word	0x20005000
 800509c:	080066ac 	.word	0x080066ac
 80050a0:	080066bc 	.word	0x080066bc
 80050a4:	080066e0 	.word	0x080066e0
 80050a8:	20000058 	.word	0x20000058
 80050ac:	080066ec 	.word	0x080066ec
 80050b0:	080066f8 	.word	0x080066f8

080050b4 <new>:
 * @param heap          : Pointer to static heap
 *                      : NULL for dynamic heap
 * @printEachElementFunc : Call back function called for each data when print is called
 * @return : Allocated Queue (!!! Must be free using free) (OR) NULL if heap is full
 */
static Queue* new(BuddyHeap *heap, void (*printEachElementFunc)(QueueType value)) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	//Allocate memory for hash map
	Queue *queue = allocateMemory(heap, sizeof(Queue));
 80050be:	2114      	movs	r1, #20
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff3f 	bl	8004f44 <allocateMemory>
 80050c6:	60f8      	str	r0, [r7, #12]

	//Invalid memory
	if (!validMemory(__func__, heap, queue))
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4810      	ldr	r0, [pc, #64]	; (8005110 <new+0x5c>)
 80050ce:	f7ff ff8f 	bl	8004ff0 <validMemory>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <new+0x28>
		return NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	e014      	b.n	8005106 <new+0x52>

	//Heap is full
	if (queue == NULL)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <new+0x32>
		return NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e00f      	b.n	8005106 <new+0x52>

	queue->heap = heap;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

	queue->printEachElement = printEachElementFunc;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]

	//Making both front and back null
	queue->front = NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	609a      	str	r2, [r3, #8]
	queue->back = NULL;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	60da      	str	r2, [r3, #12]

	//Make initial size zero
	queue->size = 0;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	605a      	str	r2, [r3, #4]

	return queue;
 8005104:	68fb      	ldr	r3, [r7, #12]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	0800676c 	.word	0x0800676c

08005114 <enqueue>:
 * It adds the element to the end of the queue
 * @param queue     : Queue
 * @param value     : Value to be added in queue
 * @return          : Same que (OR) NULL if heap is full or queue is null
 */
static Queue* enqueue(Queue *queue, QueueType value) {
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	//If map is NULL then return NULL
	if (queue == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <enqueue+0x14>
		return NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	e035      	b.n	8005194 <enqueue+0x80>

	//Allocate Memory for newData
	QueueData *newData = allocateMemory(queue->heap, sizeof(QueueData));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2108      	movs	r1, #8
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ff08 	bl	8004f44 <allocateMemory>
 8005134:	60f8      	str	r0, [r7, #12]

	//If newData is invalid pointer return NULL
	if (!validMemory(__func__, queue->heap, newData))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4619      	mov	r1, r3
 800513e:	4817      	ldr	r0, [pc, #92]	; (800519c <enqueue+0x88>)
 8005140:	f7ff ff56 	bl	8004ff0 <validMemory>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <enqueue+0x3a>
		return NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	e022      	b.n	8005194 <enqueue+0x80>

	//If heap is full then return NULL
	if (newData == NULL)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <enqueue+0x44>
		return NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	e01d      	b.n	8005194 <enqueue+0x80>

	//Fill the value in data
	newData->value = value;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	601a      	str	r2, [r3, #0]
	newData->next = NULL; //make next data is empty
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	605a      	str	r2, [r3, #4]

	//Get the last data
	if (queue->size == 0) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <enqueue+0x66>
		//If que is empty
		queue->front = newData;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	609a      	str	r2, [r3, #8]
		queue->back = newData;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	e006      	b.n	8005188 <enqueue+0x74>
	} else {
		queue->back->next = newData;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	605a      	str	r2, [r3, #4]
		queue->back = newData;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	60da      	str	r2, [r3, #12]
	}
	//If data is added then increase the size
	queue->size++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	605a      	str	r2, [r3, #4]

	//Return same @queue
	return queue;
 8005192:	687b      	ldr	r3, [r7, #4]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	08006770 	.word	0x08006770

080051a0 <dequeue>:
 * Computation Cost : O(1)\n
 * It remove the element from the front of the queue and return it
 * @param queue     : Queue
 * @return          : Element in front (OR) QUE_NULL if queue is empty or queue is null
 */
static QueueType dequeue(Queue *queue) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	//If map is NULL then return NULL
	if (queue == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <dequeue+0x12>
		return QUEUE_NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e026      	b.n	8005200 <dequeue+0x60>

	//Get the last data
	if (queue->size == 0) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <dequeue+0x1e>
		//If que is empty
		return QUEUE_NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e020      	b.n	8005200 <dequeue+0x60>
	} else {
		//Get the front data of queue
		QueueData *frontData = queue->front;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60fb      	str	r3, [r7, #12]
		QueueType value = frontData->value;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	60bb      	str	r3, [r7, #8]

		//Put front second data in the front
		queue->front = frontData->next;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]

		//Deallocate the allocated memory by front data
		freeMemory(queue->heap, frontData, sizeof(QueueData));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2208      	movs	r2, #8
 80051d8:	68f9      	ldr	r1, [r7, #12]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fede 	bl	8004f9c <freeMemory>

		//Decrease the size of queue
		queue->size--;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	1e5a      	subs	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]
		if (queue->size == 0) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d105      	bne.n	80051fe <dequeue+0x5e>
			queue->front = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	609a      	str	r2, [r3, #8]
			queue->back = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	60da      	str	r2, [r3, #12]
		}
		return value;
 80051fe:	68bb      	ldr	r3, [r7, #8]
	}
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <peek>:
 * Computation Cost : O(1)\n
 * It returns the element from the front of the queue without removing it
 * @param queue     : Queue
 * @return          : Element in front (OR) QUE_NULL if queue is empty or queue is null
 */
static QueueType peek(Queue *queue) {
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	//If map is NULL then return NULL
	if (queue == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <peek+0x12>
		return QUEUE_NULL;
 8005216:	2300      	movs	r3, #0
 8005218:	e008      	b.n	800522c <peek+0x24>

	if (queue->size == 0) {
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <peek+0x1e>
		//If que is empty
		return QUEUE_NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	e002      	b.n	800522c <peek+0x24>
	} else {
		//Return the front element of queue
		return queue->front->value;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	681b      	ldr	r3, [r3, #0]
	}
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <freeQue>:
 * Computation Cost : O(n)\n
 * It delete all the data and free memories allocated by queue
 * @param queuePtr  : Address of pointer to queue
 * @return          : 1 for success (OR) 0 for failed
 */
static int freeQue(Queue **queuePtr) {
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
	Queue *queue = *queuePtr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	613b      	str	r3, [r7, #16]
	//If queue is NULL
	if (queue == NULL)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <freeQue+0x18>
		return 0;
 800524a:	2300      	movs	r3, #0
 800524c:	e029      	b.n	80052a2 <freeQue+0x6c>

	int size = queue->size;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	60fb      	str	r3, [r7, #12]
	//If queue is empty
	if (size == 0) {
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <freeQue+0x3c>
		//Free hash map memory
		freeMemory(queue->heap, queue, sizeof(Queue));
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2214      	movs	r2, #20
 8005260:	6939      	ldr	r1, [r7, #16]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fe9a 	bl	8004f9c <freeMemory>
		*queuePtr = NULL;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
		return 1;
 800526e:	2301      	movs	r3, #1
 8005270:	e017      	b.n	80052a2 <freeQue+0x6c>
	}

	//Delete all data
	for (int i = 0; i < size; ++i)
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	e005      	b.n	8005284 <freeQue+0x4e>
		dequeue(queue);
 8005278:	6938      	ldr	r0, [r7, #16]
 800527a:	f7ff ff91 	bl	80051a0 <dequeue>
	for (int i = 0; i < size; ++i)
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	3301      	adds	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	429a      	cmp	r2, r3
 800528a:	dbf5      	blt.n	8005278 <freeQue+0x42>

	//Free memory for queue
	freeMemory(queue->heap, queue, sizeof(Queue));
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2214      	movs	r2, #20
 8005292:	6939      	ldr	r1, [r7, #16]
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff fe81 	bl	8004f9c <freeMemory>

	*queuePtr = NULL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

	return 1; //freeing memory success
 80052a0:	2301      	movs	r3, #1
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <doesExist>:
 * It checks if the value exists in the queue
 * @param queue     : Queue
 * @param value     : Value to be added in queue
 * @return          : 1 if exists (OR) 0 else wise
 */
static int doesExist(Queue *queue, QueueType value) {
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
	if (value == QUEUE_NULL)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <doesExist+0x14>
		return 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e023      	b.n	8005306 <doesExist+0x5c>
	//If map is NULL then return NULL
	if (queue == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <doesExist+0x1e>
		return 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e01e      	b.n	8005306 <doesExist+0x5c>

	if (queue->size == 0) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <doesExist+0x2a>
		//If que is empty
		return 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e018      	b.n	8005306 <doesExist+0x5c>
	} else {
		QueueData *data = queue->front;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < queue->size; ++i) {
 80052da:	2300      	movs	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]
 80052de:	e00c      	b.n	80052fa <doesExist+0x50>
			if (data->value == value)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d101      	bne.n	80052ee <doesExist+0x44>
				return 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e00b      	b.n	8005306 <doesExist+0x5c>
			data = data->next;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < queue->size; ++i) {
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	429a      	cmp	r2, r3
 8005302:	dbed      	blt.n	80052e0 <doesExist+0x36>
		}
		return 0;
 8005304:	2300      	movs	r3, #0
	}
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <print>:

/**
 * This will print the contents of que
 * @param queue : Queue to be printed
 */
static void print(Queue *queue) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	if (queue == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01e      	beq.n	800535c <print+0x4c>
		return;

	if (queue->printEachElement == NULL)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01c      	beq.n	8005360 <print+0x50>
		return;

	QueueData *data = queue->front;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < queue->size; ++i) {
 800532c:	2300      	movs	r3, #0
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	e00e      	b.n	8005350 <print+0x40>
		if (data == NULL)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <print+0x54>
			break;
		queue->printEachElement(data->value);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
		data = data->next;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < queue->size; ++i) {
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	3301      	adds	r3, #1
 800534e:	60bb      	str	r3, [r7, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	429a      	cmp	r2, r3
 8005358:	dbeb      	blt.n	8005332 <print+0x22>
 800535a:	e004      	b.n	8005366 <print+0x56>
		return;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <print+0x56>
		return;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <print+0x56>
			break;
 8005364:	bf00      	nop
	}
}
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <getAllocatedMemories>:

/**
 * This return allocated memory for queue till now
 * @return  : Allocated memories
 */
static int getAllocatedMemories() {
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	return allocatedMemory;
 8005370:	4b02      	ldr	r3, [pc, #8]	; (800537c <getAllocatedMemories+0x10>)
 8005372:	681b      	ldr	r3, [r3, #0]
}
 8005374:	4618      	mov	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	200036d0 	.word	0x200036d0

08005380 <__errno>:
 8005380:	4b01      	ldr	r3, [pc, #4]	; (8005388 <__errno+0x8>)
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	200004b8 	.word	0x200004b8

0800538c <__libc_init_array>:
 800538c:	b570      	push	{r4, r5, r6, lr}
 800538e:	2600      	movs	r6, #0
 8005390:	4d0c      	ldr	r5, [pc, #48]	; (80053c4 <__libc_init_array+0x38>)
 8005392:	4c0d      	ldr	r4, [pc, #52]	; (80053c8 <__libc_init_array+0x3c>)
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	42a6      	cmp	r6, r4
 800539a:	d109      	bne.n	80053b0 <__libc_init_array+0x24>
 800539c:	f001 f8a6 	bl	80064ec <_init>
 80053a0:	2600      	movs	r6, #0
 80053a2:	4d0a      	ldr	r5, [pc, #40]	; (80053cc <__libc_init_array+0x40>)
 80053a4:	4c0a      	ldr	r4, [pc, #40]	; (80053d0 <__libc_init_array+0x44>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	42a6      	cmp	r6, r4
 80053ac:	d105      	bne.n	80053ba <__libc_init_array+0x2e>
 80053ae:	bd70      	pop	{r4, r5, r6, pc}
 80053b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053b4:	4798      	blx	r3
 80053b6:	3601      	adds	r6, #1
 80053b8:	e7ee      	b.n	8005398 <__libc_init_array+0xc>
 80053ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80053be:	4798      	blx	r3
 80053c0:	3601      	adds	r6, #1
 80053c2:	e7f2      	b.n	80053aa <__libc_init_array+0x1e>
 80053c4:	08006810 	.word	0x08006810
 80053c8:	08006810 	.word	0x08006810
 80053cc:	08006810 	.word	0x08006810
 80053d0:	08006814 	.word	0x08006814

080053d4 <malloc>:
 80053d4:	4b02      	ldr	r3, [pc, #8]	; (80053e0 <malloc+0xc>)
 80053d6:	4601      	mov	r1, r0
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	f000 b889 	b.w	80054f0 <_malloc_r>
 80053de:	bf00      	nop
 80053e0:	200004b8 	.word	0x200004b8

080053e4 <free>:
 80053e4:	4b02      	ldr	r3, [pc, #8]	; (80053f0 <free+0xc>)
 80053e6:	4601      	mov	r1, r0
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	f000 b819 	b.w	8005420 <_free_r>
 80053ee:	bf00      	nop
 80053f0:	200004b8 	.word	0x200004b8

080053f4 <memcpy>:
 80053f4:	440a      	add	r2, r1
 80053f6:	4291      	cmp	r1, r2
 80053f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053fc:	d100      	bne.n	8005400 <memcpy+0xc>
 80053fe:	4770      	bx	lr
 8005400:	b510      	push	{r4, lr}
 8005402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005406:	4291      	cmp	r1, r2
 8005408:	f803 4f01 	strb.w	r4, [r3, #1]!
 800540c:	d1f9      	bne.n	8005402 <memcpy+0xe>
 800540e:	bd10      	pop	{r4, pc}

08005410 <memset>:
 8005410:	4603      	mov	r3, r0
 8005412:	4402      	add	r2, r0
 8005414:	4293      	cmp	r3, r2
 8005416:	d100      	bne.n	800541a <memset+0xa>
 8005418:	4770      	bx	lr
 800541a:	f803 1b01 	strb.w	r1, [r3], #1
 800541e:	e7f9      	b.n	8005414 <memset+0x4>

08005420 <_free_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4605      	mov	r5, r0
 8005424:	2900      	cmp	r1, #0
 8005426:	d040      	beq.n	80054aa <_free_r+0x8a>
 8005428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542c:	1f0c      	subs	r4, r1, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	bfb8      	it	lt
 8005432:	18e4      	addlt	r4, r4, r3
 8005434:	f000 fc5e 	bl	8005cf4 <__malloc_lock>
 8005438:	4a1c      	ldr	r2, [pc, #112]	; (80054ac <_free_r+0x8c>)
 800543a:	6813      	ldr	r3, [r2, #0]
 800543c:	b933      	cbnz	r3, 800544c <_free_r+0x2c>
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	6014      	str	r4, [r2, #0]
 8005442:	4628      	mov	r0, r5
 8005444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005448:	f000 bc5a 	b.w	8005d00 <__malloc_unlock>
 800544c:	42a3      	cmp	r3, r4
 800544e:	d908      	bls.n	8005462 <_free_r+0x42>
 8005450:	6820      	ldr	r0, [r4, #0]
 8005452:	1821      	adds	r1, r4, r0
 8005454:	428b      	cmp	r3, r1
 8005456:	bf01      	itttt	eq
 8005458:	6819      	ldreq	r1, [r3, #0]
 800545a:	685b      	ldreq	r3, [r3, #4]
 800545c:	1809      	addeq	r1, r1, r0
 800545e:	6021      	streq	r1, [r4, #0]
 8005460:	e7ed      	b.n	800543e <_free_r+0x1e>
 8005462:	461a      	mov	r2, r3
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	b10b      	cbz	r3, 800546c <_free_r+0x4c>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d9fa      	bls.n	8005462 <_free_r+0x42>
 800546c:	6811      	ldr	r1, [r2, #0]
 800546e:	1850      	adds	r0, r2, r1
 8005470:	42a0      	cmp	r0, r4
 8005472:	d10b      	bne.n	800548c <_free_r+0x6c>
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	4401      	add	r1, r0
 8005478:	1850      	adds	r0, r2, r1
 800547a:	4283      	cmp	r3, r0
 800547c:	6011      	str	r1, [r2, #0]
 800547e:	d1e0      	bne.n	8005442 <_free_r+0x22>
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4401      	add	r1, r0
 8005486:	6011      	str	r1, [r2, #0]
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	e7da      	b.n	8005442 <_free_r+0x22>
 800548c:	d902      	bls.n	8005494 <_free_r+0x74>
 800548e:	230c      	movs	r3, #12
 8005490:	602b      	str	r3, [r5, #0]
 8005492:	e7d6      	b.n	8005442 <_free_r+0x22>
 8005494:	6820      	ldr	r0, [r4, #0]
 8005496:	1821      	adds	r1, r4, r0
 8005498:	428b      	cmp	r3, r1
 800549a:	bf01      	itttt	eq
 800549c:	6819      	ldreq	r1, [r3, #0]
 800549e:	685b      	ldreq	r3, [r3, #4]
 80054a0:	1809      	addeq	r1, r1, r0
 80054a2:	6021      	streq	r1, [r4, #0]
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	6054      	str	r4, [r2, #4]
 80054a8:	e7cb      	b.n	8005442 <_free_r+0x22>
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200036d4 	.word	0x200036d4

080054b0 <sbrk_aligned>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0e      	ldr	r6, [pc, #56]	; (80054ec <sbrk_aligned+0x3c>)
 80054b4:	460c      	mov	r4, r1
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	4605      	mov	r5, r0
 80054ba:	b911      	cbnz	r1, 80054c2 <sbrk_aligned+0x12>
 80054bc:	f000 f92e 	bl	800571c <_sbrk_r>
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 f929 	bl	800571c <_sbrk_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d00a      	beq.n	80054e4 <sbrk_aligned+0x34>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d007      	beq.n	80054e8 <sbrk_aligned+0x38>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f91e 	bl	800571c <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d101      	bne.n	80054e8 <sbrk_aligned+0x38>
 80054e4:	f04f 34ff 	mov.w	r4, #4294967295
 80054e8:	4620      	mov	r0, r4
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	200036d8 	.word	0x200036d8

080054f0 <_malloc_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	1ccd      	adds	r5, r1, #3
 80054f6:	f025 0503 	bic.w	r5, r5, #3
 80054fa:	3508      	adds	r5, #8
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	bf38      	it	cc
 8005500:	250c      	movcc	r5, #12
 8005502:	2d00      	cmp	r5, #0
 8005504:	4607      	mov	r7, r0
 8005506:	db01      	blt.n	800550c <_malloc_r+0x1c>
 8005508:	42a9      	cmp	r1, r5
 800550a:	d905      	bls.n	8005518 <_malloc_r+0x28>
 800550c:	230c      	movs	r3, #12
 800550e:	2600      	movs	r6, #0
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4630      	mov	r0, r6
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	4e2e      	ldr	r6, [pc, #184]	; (80055d4 <_malloc_r+0xe4>)
 800551a:	f000 fbeb 	bl	8005cf4 <__malloc_lock>
 800551e:	6833      	ldr	r3, [r6, #0]
 8005520:	461c      	mov	r4, r3
 8005522:	bb34      	cbnz	r4, 8005572 <_malloc_r+0x82>
 8005524:	4629      	mov	r1, r5
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff ffc2 	bl	80054b0 <sbrk_aligned>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	4604      	mov	r4, r0
 8005530:	d14d      	bne.n	80055ce <_malloc_r+0xde>
 8005532:	6834      	ldr	r4, [r6, #0]
 8005534:	4626      	mov	r6, r4
 8005536:	2e00      	cmp	r6, #0
 8005538:	d140      	bne.n	80055bc <_malloc_r+0xcc>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4631      	mov	r1, r6
 800553e:	4638      	mov	r0, r7
 8005540:	eb04 0803 	add.w	r8, r4, r3
 8005544:	f000 f8ea 	bl	800571c <_sbrk_r>
 8005548:	4580      	cmp	r8, r0
 800554a:	d13a      	bne.n	80055c2 <_malloc_r+0xd2>
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	3503      	adds	r5, #3
 8005550:	1a6d      	subs	r5, r5, r1
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	4638      	mov	r0, r7
 8005560:	4629      	mov	r1, r5
 8005562:	f7ff ffa5 	bl	80054b0 <sbrk_aligned>
 8005566:	3001      	adds	r0, #1
 8005568:	d02b      	beq.n	80055c2 <_malloc_r+0xd2>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	442b      	add	r3, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	e00e      	b.n	8005590 <_malloc_r+0xa0>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	1b52      	subs	r2, r2, r5
 8005576:	d41e      	bmi.n	80055b6 <_malloc_r+0xc6>
 8005578:	2a0b      	cmp	r2, #11
 800557a:	d916      	bls.n	80055aa <_malloc_r+0xba>
 800557c:	1961      	adds	r1, r4, r5
 800557e:	42a3      	cmp	r3, r4
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	bf18      	it	ne
 8005584:	6059      	strne	r1, [r3, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	bf08      	it	eq
 800558a:	6031      	streq	r1, [r6, #0]
 800558c:	5162      	str	r2, [r4, r5]
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	4638      	mov	r0, r7
 8005592:	f104 060b 	add.w	r6, r4, #11
 8005596:	f000 fbb3 	bl	8005d00 <__malloc_unlock>
 800559a:	f026 0607 	bic.w	r6, r6, #7
 800559e:	1d23      	adds	r3, r4, #4
 80055a0:	1af2      	subs	r2, r6, r3
 80055a2:	d0b6      	beq.n	8005512 <_malloc_r+0x22>
 80055a4:	1b9b      	subs	r3, r3, r6
 80055a6:	50a3      	str	r3, [r4, r2]
 80055a8:	e7b3      	b.n	8005512 <_malloc_r+0x22>
 80055aa:	6862      	ldr	r2, [r4, #4]
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	bf0c      	ite	eq
 80055b0:	6032      	streq	r2, [r6, #0]
 80055b2:	605a      	strne	r2, [r3, #4]
 80055b4:	e7ec      	b.n	8005590 <_malloc_r+0xa0>
 80055b6:	4623      	mov	r3, r4
 80055b8:	6864      	ldr	r4, [r4, #4]
 80055ba:	e7b2      	b.n	8005522 <_malloc_r+0x32>
 80055bc:	4634      	mov	r4, r6
 80055be:	6876      	ldr	r6, [r6, #4]
 80055c0:	e7b9      	b.n	8005536 <_malloc_r+0x46>
 80055c2:	230c      	movs	r3, #12
 80055c4:	4638      	mov	r0, r7
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	f000 fb9a 	bl	8005d00 <__malloc_unlock>
 80055cc:	e7a1      	b.n	8005512 <_malloc_r+0x22>
 80055ce:	6025      	str	r5, [r4, #0]
 80055d0:	e7de      	b.n	8005590 <_malloc_r+0xa0>
 80055d2:	bf00      	nop
 80055d4:	200036d4 	.word	0x200036d4

080055d8 <iprintf>:
 80055d8:	b40f      	push	{r0, r1, r2, r3}
 80055da:	4b0a      	ldr	r3, [pc, #40]	; (8005604 <iprintf+0x2c>)
 80055dc:	b513      	push	{r0, r1, r4, lr}
 80055de:	681c      	ldr	r4, [r3, #0]
 80055e0:	b124      	cbz	r4, 80055ec <iprintf+0x14>
 80055e2:	69a3      	ldr	r3, [r4, #24]
 80055e4:	b913      	cbnz	r3, 80055ec <iprintf+0x14>
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 fa7e 	bl	8005ae8 <__sinit>
 80055ec:	ab05      	add	r3, sp, #20
 80055ee:	4620      	mov	r0, r4
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	68a1      	ldr	r1, [r4, #8]
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f000 fbb1 	bl	8005d5c <_vfiprintf_r>
 80055fa:	b002      	add	sp, #8
 80055fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005600:	b004      	add	sp, #16
 8005602:	4770      	bx	lr
 8005604:	200004b8 	.word	0x200004b8

08005608 <putchar>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4b08      	ldr	r3, [pc, #32]	; (800562c <putchar+0x24>)
 800560c:	4605      	mov	r5, r0
 800560e:	681c      	ldr	r4, [r3, #0]
 8005610:	b124      	cbz	r4, 800561c <putchar+0x14>
 8005612:	69a3      	ldr	r3, [r4, #24]
 8005614:	b913      	cbnz	r3, 800561c <putchar+0x14>
 8005616:	4620      	mov	r0, r4
 8005618:	f000 fa66 	bl	8005ae8 <__sinit>
 800561c:	4629      	mov	r1, r5
 800561e:	4620      	mov	r0, r4
 8005620:	68a2      	ldr	r2, [r4, #8]
 8005622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005626:	f000 be5f 	b.w	80062e8 <_putc_r>
 800562a:	bf00      	nop
 800562c:	200004b8 	.word	0x200004b8

08005630 <_puts_r>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	460e      	mov	r6, r1
 8005634:	4605      	mov	r5, r0
 8005636:	b118      	cbz	r0, 8005640 <_puts_r+0x10>
 8005638:	6983      	ldr	r3, [r0, #24]
 800563a:	b90b      	cbnz	r3, 8005640 <_puts_r+0x10>
 800563c:	f000 fa54 	bl	8005ae8 <__sinit>
 8005640:	69ab      	ldr	r3, [r5, #24]
 8005642:	68ac      	ldr	r4, [r5, #8]
 8005644:	b913      	cbnz	r3, 800564c <_puts_r+0x1c>
 8005646:	4628      	mov	r0, r5
 8005648:	f000 fa4e 	bl	8005ae8 <__sinit>
 800564c:	4b2c      	ldr	r3, [pc, #176]	; (8005700 <_puts_r+0xd0>)
 800564e:	429c      	cmp	r4, r3
 8005650:	d120      	bne.n	8005694 <_puts_r+0x64>
 8005652:	686c      	ldr	r4, [r5, #4]
 8005654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005656:	07db      	lsls	r3, r3, #31
 8005658:	d405      	bmi.n	8005666 <_puts_r+0x36>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	0598      	lsls	r0, r3, #22
 800565e:	d402      	bmi.n	8005666 <_puts_r+0x36>
 8005660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005662:	f000 fadf 	bl	8005c24 <__retarget_lock_acquire_recursive>
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	0719      	lsls	r1, r3, #28
 800566a:	d51d      	bpl.n	80056a8 <_puts_r+0x78>
 800566c:	6923      	ldr	r3, [r4, #16]
 800566e:	b1db      	cbz	r3, 80056a8 <_puts_r+0x78>
 8005670:	3e01      	subs	r6, #1
 8005672:	68a3      	ldr	r3, [r4, #8]
 8005674:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005678:	3b01      	subs	r3, #1
 800567a:	60a3      	str	r3, [r4, #8]
 800567c:	bb39      	cbnz	r1, 80056ce <_puts_r+0x9e>
 800567e:	2b00      	cmp	r3, #0
 8005680:	da38      	bge.n	80056f4 <_puts_r+0xc4>
 8005682:	4622      	mov	r2, r4
 8005684:	210a      	movs	r1, #10
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f858 	bl	800573c <__swbuf_r>
 800568c:	3001      	adds	r0, #1
 800568e:	d011      	beq.n	80056b4 <_puts_r+0x84>
 8005690:	250a      	movs	r5, #10
 8005692:	e011      	b.n	80056b8 <_puts_r+0x88>
 8005694:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <_puts_r+0xd4>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d101      	bne.n	800569e <_puts_r+0x6e>
 800569a:	68ac      	ldr	r4, [r5, #8]
 800569c:	e7da      	b.n	8005654 <_puts_r+0x24>
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <_puts_r+0xd8>)
 80056a0:	429c      	cmp	r4, r3
 80056a2:	bf08      	it	eq
 80056a4:	68ec      	ldreq	r4, [r5, #12]
 80056a6:	e7d5      	b.n	8005654 <_puts_r+0x24>
 80056a8:	4621      	mov	r1, r4
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 f898 	bl	80057e0 <__swsetup_r>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d0dd      	beq.n	8005670 <_puts_r+0x40>
 80056b4:	f04f 35ff 	mov.w	r5, #4294967295
 80056b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056ba:	07da      	lsls	r2, r3, #31
 80056bc:	d405      	bmi.n	80056ca <_puts_r+0x9a>
 80056be:	89a3      	ldrh	r3, [r4, #12]
 80056c0:	059b      	lsls	r3, r3, #22
 80056c2:	d402      	bmi.n	80056ca <_puts_r+0x9a>
 80056c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c6:	f000 faae 	bl	8005c26 <__retarget_lock_release_recursive>
 80056ca:	4628      	mov	r0, r5
 80056cc:	bd70      	pop	{r4, r5, r6, pc}
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	da04      	bge.n	80056dc <_puts_r+0xac>
 80056d2:	69a2      	ldr	r2, [r4, #24]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	dc06      	bgt.n	80056e6 <_puts_r+0xb6>
 80056d8:	290a      	cmp	r1, #10
 80056da:	d004      	beq.n	80056e6 <_puts_r+0xb6>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	6022      	str	r2, [r4, #0]
 80056e2:	7019      	strb	r1, [r3, #0]
 80056e4:	e7c5      	b.n	8005672 <_puts_r+0x42>
 80056e6:	4622      	mov	r2, r4
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 f827 	bl	800573c <__swbuf_r>
 80056ee:	3001      	adds	r0, #1
 80056f0:	d1bf      	bne.n	8005672 <_puts_r+0x42>
 80056f2:	e7df      	b.n	80056b4 <_puts_r+0x84>
 80056f4:	250a      	movs	r5, #10
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	6022      	str	r2, [r4, #0]
 80056fc:	701d      	strb	r5, [r3, #0]
 80056fe:	e7db      	b.n	80056b8 <_puts_r+0x88>
 8005700:	0800679c 	.word	0x0800679c
 8005704:	080067bc 	.word	0x080067bc
 8005708:	0800677c 	.word	0x0800677c

0800570c <puts>:
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <puts+0xc>)
 800570e:	4601      	mov	r1, r0
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	f7ff bf8d 	b.w	8005630 <_puts_r>
 8005716:	bf00      	nop
 8005718:	200004b8 	.word	0x200004b8

0800571c <_sbrk_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	2300      	movs	r3, #0
 8005720:	4d05      	ldr	r5, [pc, #20]	; (8005738 <_sbrk_r+0x1c>)
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	f7fa ff3a 	bl	80005a0 <_sbrk>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_sbrk_r+0x1a>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_sbrk_r+0x1a>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	200036e0 	.word	0x200036e0

0800573c <__swbuf_r>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	460e      	mov	r6, r1
 8005740:	4614      	mov	r4, r2
 8005742:	4605      	mov	r5, r0
 8005744:	b118      	cbz	r0, 800574e <__swbuf_r+0x12>
 8005746:	6983      	ldr	r3, [r0, #24]
 8005748:	b90b      	cbnz	r3, 800574e <__swbuf_r+0x12>
 800574a:	f000 f9cd 	bl	8005ae8 <__sinit>
 800574e:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <__swbuf_r+0x98>)
 8005750:	429c      	cmp	r4, r3
 8005752:	d12b      	bne.n	80057ac <__swbuf_r+0x70>
 8005754:	686c      	ldr	r4, [r5, #4]
 8005756:	69a3      	ldr	r3, [r4, #24]
 8005758:	60a3      	str	r3, [r4, #8]
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	071a      	lsls	r2, r3, #28
 800575e:	d52f      	bpl.n	80057c0 <__swbuf_r+0x84>
 8005760:	6923      	ldr	r3, [r4, #16]
 8005762:	b36b      	cbz	r3, 80057c0 <__swbuf_r+0x84>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	b2f6      	uxtb	r6, r6
 800576a:	1ac0      	subs	r0, r0, r3
 800576c:	6963      	ldr	r3, [r4, #20]
 800576e:	4637      	mov	r7, r6
 8005770:	4283      	cmp	r3, r0
 8005772:	dc04      	bgt.n	800577e <__swbuf_r+0x42>
 8005774:	4621      	mov	r1, r4
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f922 	bl	80059c0 <_fflush_r>
 800577c:	bb30      	cbnz	r0, 80057cc <__swbuf_r+0x90>
 800577e:	68a3      	ldr	r3, [r4, #8]
 8005780:	3001      	adds	r0, #1
 8005782:	3b01      	subs	r3, #1
 8005784:	60a3      	str	r3, [r4, #8]
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	6022      	str	r2, [r4, #0]
 800578c:	701e      	strb	r6, [r3, #0]
 800578e:	6963      	ldr	r3, [r4, #20]
 8005790:	4283      	cmp	r3, r0
 8005792:	d004      	beq.n	800579e <__swbuf_r+0x62>
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	07db      	lsls	r3, r3, #31
 8005798:	d506      	bpl.n	80057a8 <__swbuf_r+0x6c>
 800579a:	2e0a      	cmp	r6, #10
 800579c:	d104      	bne.n	80057a8 <__swbuf_r+0x6c>
 800579e:	4621      	mov	r1, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	f000 f90d 	bl	80059c0 <_fflush_r>
 80057a6:	b988      	cbnz	r0, 80057cc <__swbuf_r+0x90>
 80057a8:	4638      	mov	r0, r7
 80057aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <__swbuf_r+0x9c>)
 80057ae:	429c      	cmp	r4, r3
 80057b0:	d101      	bne.n	80057b6 <__swbuf_r+0x7a>
 80057b2:	68ac      	ldr	r4, [r5, #8]
 80057b4:	e7cf      	b.n	8005756 <__swbuf_r+0x1a>
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <__swbuf_r+0xa0>)
 80057b8:	429c      	cmp	r4, r3
 80057ba:	bf08      	it	eq
 80057bc:	68ec      	ldreq	r4, [r5, #12]
 80057be:	e7ca      	b.n	8005756 <__swbuf_r+0x1a>
 80057c0:	4621      	mov	r1, r4
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f80c 	bl	80057e0 <__swsetup_r>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d0cb      	beq.n	8005764 <__swbuf_r+0x28>
 80057cc:	f04f 37ff 	mov.w	r7, #4294967295
 80057d0:	e7ea      	b.n	80057a8 <__swbuf_r+0x6c>
 80057d2:	bf00      	nop
 80057d4:	0800679c 	.word	0x0800679c
 80057d8:	080067bc 	.word	0x080067bc
 80057dc:	0800677c 	.word	0x0800677c

080057e0 <__swsetup_r>:
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <__swsetup_r+0xcc>)
 80057e2:	b570      	push	{r4, r5, r6, lr}
 80057e4:	681d      	ldr	r5, [r3, #0]
 80057e6:	4606      	mov	r6, r0
 80057e8:	460c      	mov	r4, r1
 80057ea:	b125      	cbz	r5, 80057f6 <__swsetup_r+0x16>
 80057ec:	69ab      	ldr	r3, [r5, #24]
 80057ee:	b913      	cbnz	r3, 80057f6 <__swsetup_r+0x16>
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f979 	bl	8005ae8 <__sinit>
 80057f6:	4b2e      	ldr	r3, [pc, #184]	; (80058b0 <__swsetup_r+0xd0>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	d10f      	bne.n	800581c <__swsetup_r+0x3c>
 80057fc:	686c      	ldr	r4, [r5, #4]
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005804:	0719      	lsls	r1, r3, #28
 8005806:	d42c      	bmi.n	8005862 <__swsetup_r+0x82>
 8005808:	06dd      	lsls	r5, r3, #27
 800580a:	d411      	bmi.n	8005830 <__swsetup_r+0x50>
 800580c:	2309      	movs	r3, #9
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005814:	f04f 30ff 	mov.w	r0, #4294967295
 8005818:	81a3      	strh	r3, [r4, #12]
 800581a:	e03e      	b.n	800589a <__swsetup_r+0xba>
 800581c:	4b25      	ldr	r3, [pc, #148]	; (80058b4 <__swsetup_r+0xd4>)
 800581e:	429c      	cmp	r4, r3
 8005820:	d101      	bne.n	8005826 <__swsetup_r+0x46>
 8005822:	68ac      	ldr	r4, [r5, #8]
 8005824:	e7eb      	b.n	80057fe <__swsetup_r+0x1e>
 8005826:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <__swsetup_r+0xd8>)
 8005828:	429c      	cmp	r4, r3
 800582a:	bf08      	it	eq
 800582c:	68ec      	ldreq	r4, [r5, #12]
 800582e:	e7e6      	b.n	80057fe <__swsetup_r+0x1e>
 8005830:	0758      	lsls	r0, r3, #29
 8005832:	d512      	bpl.n	800585a <__swsetup_r+0x7a>
 8005834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005836:	b141      	cbz	r1, 800584a <__swsetup_r+0x6a>
 8005838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800583c:	4299      	cmp	r1, r3
 800583e:	d002      	beq.n	8005846 <__swsetup_r+0x66>
 8005840:	4630      	mov	r0, r6
 8005842:	f7ff fded 	bl	8005420 <_free_r>
 8005846:	2300      	movs	r3, #0
 8005848:	6363      	str	r3, [r4, #52]	; 0x34
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	2300      	movs	r3, #0
 8005854:	6063      	str	r3, [r4, #4]
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	6023      	str	r3, [r4, #0]
 800585a:	89a3      	ldrh	r3, [r4, #12]
 800585c:	f043 0308 	orr.w	r3, r3, #8
 8005860:	81a3      	strh	r3, [r4, #12]
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	b94b      	cbnz	r3, 800587a <__swsetup_r+0x9a>
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800586c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005870:	d003      	beq.n	800587a <__swsetup_r+0x9a>
 8005872:	4621      	mov	r1, r4
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f9fd 	bl	8005c74 <__smakebuf_r>
 800587a:	89a0      	ldrh	r0, [r4, #12]
 800587c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005880:	f010 0301 	ands.w	r3, r0, #1
 8005884:	d00a      	beq.n	800589c <__swsetup_r+0xbc>
 8005886:	2300      	movs	r3, #0
 8005888:	60a3      	str	r3, [r4, #8]
 800588a:	6963      	ldr	r3, [r4, #20]
 800588c:	425b      	negs	r3, r3
 800588e:	61a3      	str	r3, [r4, #24]
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	b943      	cbnz	r3, 80058a6 <__swsetup_r+0xc6>
 8005894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005898:	d1ba      	bne.n	8005810 <__swsetup_r+0x30>
 800589a:	bd70      	pop	{r4, r5, r6, pc}
 800589c:	0781      	lsls	r1, r0, #30
 800589e:	bf58      	it	pl
 80058a0:	6963      	ldrpl	r3, [r4, #20]
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	e7f4      	b.n	8005890 <__swsetup_r+0xb0>
 80058a6:	2000      	movs	r0, #0
 80058a8:	e7f7      	b.n	800589a <__swsetup_r+0xba>
 80058aa:	bf00      	nop
 80058ac:	200004b8 	.word	0x200004b8
 80058b0:	0800679c 	.word	0x0800679c
 80058b4:	080067bc 	.word	0x080067bc
 80058b8:	0800677c 	.word	0x0800677c

080058bc <__sflush_r>:
 80058bc:	898a      	ldrh	r2, [r1, #12]
 80058be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c0:	4605      	mov	r5, r0
 80058c2:	0710      	lsls	r0, r2, #28
 80058c4:	460c      	mov	r4, r1
 80058c6:	d457      	bmi.n	8005978 <__sflush_r+0xbc>
 80058c8:	684b      	ldr	r3, [r1, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dc04      	bgt.n	80058d8 <__sflush_r+0x1c>
 80058ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dc01      	bgt.n	80058d8 <__sflush_r+0x1c>
 80058d4:	2000      	movs	r0, #0
 80058d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058da:	2e00      	cmp	r6, #0
 80058dc:	d0fa      	beq.n	80058d4 <__sflush_r+0x18>
 80058de:	2300      	movs	r3, #0
 80058e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e4:	682f      	ldr	r7, [r5, #0]
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	d032      	beq.n	8005950 <__sflush_r+0x94>
 80058ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	075a      	lsls	r2, r3, #29
 80058f0:	d505      	bpl.n	80058fe <__sflush_r+0x42>
 80058f2:	6863      	ldr	r3, [r4, #4]
 80058f4:	1ac0      	subs	r0, r0, r3
 80058f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058f8:	b10b      	cbz	r3, 80058fe <__sflush_r+0x42>
 80058fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058fc:	1ac0      	subs	r0, r0, r3
 80058fe:	2300      	movs	r3, #0
 8005900:	4602      	mov	r2, r0
 8005902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005904:	4628      	mov	r0, r5
 8005906:	6a21      	ldr	r1, [r4, #32]
 8005908:	47b0      	blx	r6
 800590a:	1c43      	adds	r3, r0, #1
 800590c:	89a3      	ldrh	r3, [r4, #12]
 800590e:	d106      	bne.n	800591e <__sflush_r+0x62>
 8005910:	6829      	ldr	r1, [r5, #0]
 8005912:	291d      	cmp	r1, #29
 8005914:	d82c      	bhi.n	8005970 <__sflush_r+0xb4>
 8005916:	4a29      	ldr	r2, [pc, #164]	; (80059bc <__sflush_r+0x100>)
 8005918:	40ca      	lsrs	r2, r1
 800591a:	07d6      	lsls	r6, r2, #31
 800591c:	d528      	bpl.n	8005970 <__sflush_r+0xb4>
 800591e:	2200      	movs	r2, #0
 8005920:	6062      	str	r2, [r4, #4]
 8005922:	6922      	ldr	r2, [r4, #16]
 8005924:	04d9      	lsls	r1, r3, #19
 8005926:	6022      	str	r2, [r4, #0]
 8005928:	d504      	bpl.n	8005934 <__sflush_r+0x78>
 800592a:	1c42      	adds	r2, r0, #1
 800592c:	d101      	bne.n	8005932 <__sflush_r+0x76>
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	b903      	cbnz	r3, 8005934 <__sflush_r+0x78>
 8005932:	6560      	str	r0, [r4, #84]	; 0x54
 8005934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005936:	602f      	str	r7, [r5, #0]
 8005938:	2900      	cmp	r1, #0
 800593a:	d0cb      	beq.n	80058d4 <__sflush_r+0x18>
 800593c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005940:	4299      	cmp	r1, r3
 8005942:	d002      	beq.n	800594a <__sflush_r+0x8e>
 8005944:	4628      	mov	r0, r5
 8005946:	f7ff fd6b 	bl	8005420 <_free_r>
 800594a:	2000      	movs	r0, #0
 800594c:	6360      	str	r0, [r4, #52]	; 0x34
 800594e:	e7c2      	b.n	80058d6 <__sflush_r+0x1a>
 8005950:	6a21      	ldr	r1, [r4, #32]
 8005952:	2301      	movs	r3, #1
 8005954:	4628      	mov	r0, r5
 8005956:	47b0      	blx	r6
 8005958:	1c41      	adds	r1, r0, #1
 800595a:	d1c7      	bne.n	80058ec <__sflush_r+0x30>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0c4      	beq.n	80058ec <__sflush_r+0x30>
 8005962:	2b1d      	cmp	r3, #29
 8005964:	d001      	beq.n	800596a <__sflush_r+0xae>
 8005966:	2b16      	cmp	r3, #22
 8005968:	d101      	bne.n	800596e <__sflush_r+0xb2>
 800596a:	602f      	str	r7, [r5, #0]
 800596c:	e7b2      	b.n	80058d4 <__sflush_r+0x18>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	e7ae      	b.n	80058d6 <__sflush_r+0x1a>
 8005978:	690f      	ldr	r7, [r1, #16]
 800597a:	2f00      	cmp	r7, #0
 800597c:	d0aa      	beq.n	80058d4 <__sflush_r+0x18>
 800597e:	0793      	lsls	r3, r2, #30
 8005980:	bf18      	it	ne
 8005982:	2300      	movne	r3, #0
 8005984:	680e      	ldr	r6, [r1, #0]
 8005986:	bf08      	it	eq
 8005988:	694b      	ldreq	r3, [r1, #20]
 800598a:	1bf6      	subs	r6, r6, r7
 800598c:	600f      	str	r7, [r1, #0]
 800598e:	608b      	str	r3, [r1, #8]
 8005990:	2e00      	cmp	r6, #0
 8005992:	dd9f      	ble.n	80058d4 <__sflush_r+0x18>
 8005994:	4633      	mov	r3, r6
 8005996:	463a      	mov	r2, r7
 8005998:	4628      	mov	r0, r5
 800599a:	6a21      	ldr	r1, [r4, #32]
 800599c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80059a0:	47e0      	blx	ip
 80059a2:	2800      	cmp	r0, #0
 80059a4:	dc06      	bgt.n	80059b4 <__sflush_r+0xf8>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	e790      	b.n	80058d6 <__sflush_r+0x1a>
 80059b4:	4407      	add	r7, r0
 80059b6:	1a36      	subs	r6, r6, r0
 80059b8:	e7ea      	b.n	8005990 <__sflush_r+0xd4>
 80059ba:	bf00      	nop
 80059bc:	20400001 	.word	0x20400001

080059c0 <_fflush_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	b913      	cbnz	r3, 80059d0 <_fflush_r+0x10>
 80059ca:	2500      	movs	r5, #0
 80059cc:	4628      	mov	r0, r5
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	b118      	cbz	r0, 80059da <_fflush_r+0x1a>
 80059d2:	6983      	ldr	r3, [r0, #24]
 80059d4:	b90b      	cbnz	r3, 80059da <_fflush_r+0x1a>
 80059d6:	f000 f887 	bl	8005ae8 <__sinit>
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <_fflush_r+0x6c>)
 80059dc:	429c      	cmp	r4, r3
 80059de:	d11b      	bne.n	8005a18 <_fflush_r+0x58>
 80059e0:	686c      	ldr	r4, [r5, #4]
 80059e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0ef      	beq.n	80059ca <_fflush_r+0xa>
 80059ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059ec:	07d0      	lsls	r0, r2, #31
 80059ee:	d404      	bmi.n	80059fa <_fflush_r+0x3a>
 80059f0:	0599      	lsls	r1, r3, #22
 80059f2:	d402      	bmi.n	80059fa <_fflush_r+0x3a>
 80059f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059f6:	f000 f915 	bl	8005c24 <__retarget_lock_acquire_recursive>
 80059fa:	4628      	mov	r0, r5
 80059fc:	4621      	mov	r1, r4
 80059fe:	f7ff ff5d 	bl	80058bc <__sflush_r>
 8005a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a04:	4605      	mov	r5, r0
 8005a06:	07da      	lsls	r2, r3, #31
 8005a08:	d4e0      	bmi.n	80059cc <_fflush_r+0xc>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	059b      	lsls	r3, r3, #22
 8005a0e:	d4dd      	bmi.n	80059cc <_fflush_r+0xc>
 8005a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a12:	f000 f908 	bl	8005c26 <__retarget_lock_release_recursive>
 8005a16:	e7d9      	b.n	80059cc <_fflush_r+0xc>
 8005a18:	4b05      	ldr	r3, [pc, #20]	; (8005a30 <_fflush_r+0x70>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	d101      	bne.n	8005a22 <_fflush_r+0x62>
 8005a1e:	68ac      	ldr	r4, [r5, #8]
 8005a20:	e7df      	b.n	80059e2 <_fflush_r+0x22>
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <_fflush_r+0x74>)
 8005a24:	429c      	cmp	r4, r3
 8005a26:	bf08      	it	eq
 8005a28:	68ec      	ldreq	r4, [r5, #12]
 8005a2a:	e7da      	b.n	80059e2 <_fflush_r+0x22>
 8005a2c:	0800679c 	.word	0x0800679c
 8005a30:	080067bc 	.word	0x080067bc
 8005a34:	0800677c 	.word	0x0800677c

08005a38 <std>:
 8005a38:	2300      	movs	r3, #0
 8005a3a:	b510      	push	{r4, lr}
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a46:	6083      	str	r3, [r0, #8]
 8005a48:	8181      	strh	r1, [r0, #12]
 8005a4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a4c:	81c2      	strh	r2, [r0, #14]
 8005a4e:	6183      	str	r3, [r0, #24]
 8005a50:	4619      	mov	r1, r3
 8005a52:	2208      	movs	r2, #8
 8005a54:	305c      	adds	r0, #92	; 0x5c
 8005a56:	f7ff fcdb 	bl	8005410 <memset>
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <std+0x38>)
 8005a5c:	6224      	str	r4, [r4, #32]
 8005a5e:	6263      	str	r3, [r4, #36]	; 0x24
 8005a60:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <std+0x3c>)
 8005a62:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a64:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <std+0x40>)
 8005a66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <std+0x44>)
 8005a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a6c:	bd10      	pop	{r4, pc}
 8005a6e:	bf00      	nop
 8005a70:	08006379 	.word	0x08006379
 8005a74:	0800639b 	.word	0x0800639b
 8005a78:	080063d3 	.word	0x080063d3
 8005a7c:	080063f7 	.word	0x080063f7

08005a80 <_cleanup_r>:
 8005a80:	4901      	ldr	r1, [pc, #4]	; (8005a88 <_cleanup_r+0x8>)
 8005a82:	f000 b8af 	b.w	8005be4 <_fwalk_reent>
 8005a86:	bf00      	nop
 8005a88:	080059c1 	.word	0x080059c1

08005a8c <__sfmoreglue>:
 8005a8c:	2268      	movs	r2, #104	; 0x68
 8005a8e:	b570      	push	{r4, r5, r6, lr}
 8005a90:	1e4d      	subs	r5, r1, #1
 8005a92:	4355      	muls	r5, r2
 8005a94:	460e      	mov	r6, r1
 8005a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a9a:	f7ff fd29 	bl	80054f0 <_malloc_r>
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	b140      	cbz	r0, 8005ab4 <__sfmoreglue+0x28>
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8005aa8:	300c      	adds	r0, #12
 8005aaa:	60a0      	str	r0, [r4, #8]
 8005aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ab0:	f7ff fcae 	bl	8005410 <memset>
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	bd70      	pop	{r4, r5, r6, pc}

08005ab8 <__sfp_lock_acquire>:
 8005ab8:	4801      	ldr	r0, [pc, #4]	; (8005ac0 <__sfp_lock_acquire+0x8>)
 8005aba:	f000 b8b3 	b.w	8005c24 <__retarget_lock_acquire_recursive>
 8005abe:	bf00      	nop
 8005ac0:	200036dd 	.word	0x200036dd

08005ac4 <__sfp_lock_release>:
 8005ac4:	4801      	ldr	r0, [pc, #4]	; (8005acc <__sfp_lock_release+0x8>)
 8005ac6:	f000 b8ae 	b.w	8005c26 <__retarget_lock_release_recursive>
 8005aca:	bf00      	nop
 8005acc:	200036dd 	.word	0x200036dd

08005ad0 <__sinit_lock_acquire>:
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <__sinit_lock_acquire+0x8>)
 8005ad2:	f000 b8a7 	b.w	8005c24 <__retarget_lock_acquire_recursive>
 8005ad6:	bf00      	nop
 8005ad8:	200036de 	.word	0x200036de

08005adc <__sinit_lock_release>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__sinit_lock_release+0x8>)
 8005ade:	f000 b8a2 	b.w	8005c26 <__retarget_lock_release_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	200036de 	.word	0x200036de

08005ae8 <__sinit>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	4604      	mov	r4, r0
 8005aec:	f7ff fff0 	bl	8005ad0 <__sinit_lock_acquire>
 8005af0:	69a3      	ldr	r3, [r4, #24]
 8005af2:	b11b      	cbz	r3, 8005afc <__sinit+0x14>
 8005af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af8:	f7ff bff0 	b.w	8005adc <__sinit_lock_release>
 8005afc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b00:	6523      	str	r3, [r4, #80]	; 0x50
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <__sinit+0x68>)
 8005b04:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <__sinit+0x6c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	bf08      	it	eq
 8005b0e:	2301      	moveq	r3, #1
 8005b10:	4620      	mov	r0, r4
 8005b12:	bf08      	it	eq
 8005b14:	61a3      	streq	r3, [r4, #24]
 8005b16:	f000 f81f 	bl	8005b58 <__sfp>
 8005b1a:	6060      	str	r0, [r4, #4]
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 f81b 	bl	8005b58 <__sfp>
 8005b22:	60a0      	str	r0, [r4, #8]
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 f817 	bl	8005b58 <__sfp>
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2104      	movs	r1, #4
 8005b2e:	60e0      	str	r0, [r4, #12]
 8005b30:	6860      	ldr	r0, [r4, #4]
 8005b32:	f7ff ff81 	bl	8005a38 <std>
 8005b36:	2201      	movs	r2, #1
 8005b38:	2109      	movs	r1, #9
 8005b3a:	68a0      	ldr	r0, [r4, #8]
 8005b3c:	f7ff ff7c 	bl	8005a38 <std>
 8005b40:	2202      	movs	r2, #2
 8005b42:	2112      	movs	r1, #18
 8005b44:	68e0      	ldr	r0, [r4, #12]
 8005b46:	f7ff ff77 	bl	8005a38 <std>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61a3      	str	r3, [r4, #24]
 8005b4e:	e7d1      	b.n	8005af4 <__sinit+0xc>
 8005b50:	08006778 	.word	0x08006778
 8005b54:	08005a81 	.word	0x08005a81

08005b58 <__sfp>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	4607      	mov	r7, r0
 8005b5c:	f7ff ffac 	bl	8005ab8 <__sfp_lock_acquire>
 8005b60:	4b1e      	ldr	r3, [pc, #120]	; (8005bdc <__sfp+0x84>)
 8005b62:	681e      	ldr	r6, [r3, #0]
 8005b64:	69b3      	ldr	r3, [r6, #24]
 8005b66:	b913      	cbnz	r3, 8005b6e <__sfp+0x16>
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f7ff ffbd 	bl	8005ae8 <__sinit>
 8005b6e:	3648      	adds	r6, #72	; 0x48
 8005b70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	d503      	bpl.n	8005b80 <__sfp+0x28>
 8005b78:	6833      	ldr	r3, [r6, #0]
 8005b7a:	b30b      	cbz	r3, 8005bc0 <__sfp+0x68>
 8005b7c:	6836      	ldr	r6, [r6, #0]
 8005b7e:	e7f7      	b.n	8005b70 <__sfp+0x18>
 8005b80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b84:	b9d5      	cbnz	r5, 8005bbc <__sfp+0x64>
 8005b86:	4b16      	ldr	r3, [pc, #88]	; (8005be0 <__sfp+0x88>)
 8005b88:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b8c:	60e3      	str	r3, [r4, #12]
 8005b8e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b90:	f000 f847 	bl	8005c22 <__retarget_lock_init_recursive>
 8005b94:	f7ff ff96 	bl	8005ac4 <__sfp_lock_release>
 8005b98:	2208      	movs	r2, #8
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ba4:	6025      	str	r5, [r4, #0]
 8005ba6:	61a5      	str	r5, [r4, #24]
 8005ba8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bac:	f7ff fc30 	bl	8005410 <memset>
 8005bb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bb8:	4620      	mov	r0, r4
 8005bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bbc:	3468      	adds	r4, #104	; 0x68
 8005bbe:	e7d9      	b.n	8005b74 <__sfp+0x1c>
 8005bc0:	2104      	movs	r1, #4
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	f7ff ff62 	bl	8005a8c <__sfmoreglue>
 8005bc8:	4604      	mov	r4, r0
 8005bca:	6030      	str	r0, [r6, #0]
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d1d5      	bne.n	8005b7c <__sfp+0x24>
 8005bd0:	f7ff ff78 	bl	8005ac4 <__sfp_lock_release>
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	e7ee      	b.n	8005bb8 <__sfp+0x60>
 8005bda:	bf00      	nop
 8005bdc:	08006778 	.word	0x08006778
 8005be0:	ffff0001 	.word	0xffff0001

08005be4 <_fwalk_reent>:
 8005be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005be8:	4606      	mov	r6, r0
 8005bea:	4688      	mov	r8, r1
 8005bec:	2700      	movs	r7, #0
 8005bee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bf6:	f1b9 0901 	subs.w	r9, r9, #1
 8005bfa:	d505      	bpl.n	8005c08 <_fwalk_reent+0x24>
 8005bfc:	6824      	ldr	r4, [r4, #0]
 8005bfe:	2c00      	cmp	r4, #0
 8005c00:	d1f7      	bne.n	8005bf2 <_fwalk_reent+0xe>
 8005c02:	4638      	mov	r0, r7
 8005c04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c08:	89ab      	ldrh	r3, [r5, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d907      	bls.n	8005c1e <_fwalk_reent+0x3a>
 8005c0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c12:	3301      	adds	r3, #1
 8005c14:	d003      	beq.n	8005c1e <_fwalk_reent+0x3a>
 8005c16:	4629      	mov	r1, r5
 8005c18:	4630      	mov	r0, r6
 8005c1a:	47c0      	blx	r8
 8005c1c:	4307      	orrs	r7, r0
 8005c1e:	3568      	adds	r5, #104	; 0x68
 8005c20:	e7e9      	b.n	8005bf6 <_fwalk_reent+0x12>

08005c22 <__retarget_lock_init_recursive>:
 8005c22:	4770      	bx	lr

08005c24 <__retarget_lock_acquire_recursive>:
 8005c24:	4770      	bx	lr

08005c26 <__retarget_lock_release_recursive>:
 8005c26:	4770      	bx	lr

08005c28 <__swhatbuf_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	460e      	mov	r6, r1
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	4614      	mov	r4, r2
 8005c32:	2900      	cmp	r1, #0
 8005c34:	461d      	mov	r5, r3
 8005c36:	b096      	sub	sp, #88	; 0x58
 8005c38:	da08      	bge.n	8005c4c <__swhatbuf_r+0x24>
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c40:	602a      	str	r2, [r5, #0]
 8005c42:	061a      	lsls	r2, r3, #24
 8005c44:	d410      	bmi.n	8005c68 <__swhatbuf_r+0x40>
 8005c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4a:	e00e      	b.n	8005c6a <__swhatbuf_r+0x42>
 8005c4c:	466a      	mov	r2, sp
 8005c4e:	f000 fbf9 	bl	8006444 <_fstat_r>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	dbf1      	blt.n	8005c3a <__swhatbuf_r+0x12>
 8005c56:	9a01      	ldr	r2, [sp, #4]
 8005c58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c60:	425a      	negs	r2, r3
 8005c62:	415a      	adcs	r2, r3
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	e7ee      	b.n	8005c46 <__swhatbuf_r+0x1e>
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	b016      	add	sp, #88	; 0x58
 8005c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c74 <__smakebuf_r>:
 8005c74:	898b      	ldrh	r3, [r1, #12]
 8005c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c78:	079d      	lsls	r5, r3, #30
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	d507      	bpl.n	8005c90 <__smakebuf_r+0x1c>
 8005c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	6163      	str	r3, [r4, #20]
 8005c8c:	b002      	add	sp, #8
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
 8005c90:	466a      	mov	r2, sp
 8005c92:	ab01      	add	r3, sp, #4
 8005c94:	f7ff ffc8 	bl	8005c28 <__swhatbuf_r>
 8005c98:	9900      	ldr	r1, [sp, #0]
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff fc27 	bl	80054f0 <_malloc_r>
 8005ca2:	b948      	cbnz	r0, 8005cb8 <__smakebuf_r+0x44>
 8005ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ca8:	059a      	lsls	r2, r3, #22
 8005caa:	d4ef      	bmi.n	8005c8c <__smakebuf_r+0x18>
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	f043 0302 	orr.w	r3, r3, #2
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	e7e3      	b.n	8005c80 <__smakebuf_r+0xc>
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <__smakebuf_r+0x7c>)
 8005cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cbc:	89a3      	ldrh	r3, [r4, #12]
 8005cbe:	6020      	str	r0, [r4, #0]
 8005cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	6120      	str	r0, [r4, #16]
 8005cca:	6163      	str	r3, [r4, #20]
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	b15b      	cbz	r3, 8005ce8 <__smakebuf_r+0x74>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cd6:	f000 fbc7 	bl	8006468 <_isatty_r>
 8005cda:	b128      	cbz	r0, 8005ce8 <__smakebuf_r+0x74>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f023 0303 	bic.w	r3, r3, #3
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	89a0      	ldrh	r0, [r4, #12]
 8005cea:	4305      	orrs	r5, r0
 8005cec:	81a5      	strh	r5, [r4, #12]
 8005cee:	e7cd      	b.n	8005c8c <__smakebuf_r+0x18>
 8005cf0:	08005a81 	.word	0x08005a81

08005cf4 <__malloc_lock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_lock+0x8>)
 8005cf6:	f7ff bf95 	b.w	8005c24 <__retarget_lock_acquire_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	200036dc 	.word	0x200036dc

08005d00 <__malloc_unlock>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__malloc_unlock+0x8>)
 8005d02:	f7ff bf90 	b.w	8005c26 <__retarget_lock_release_recursive>
 8005d06:	bf00      	nop
 8005d08:	200036dc 	.word	0x200036dc

08005d0c <__sfputc_r>:
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	b410      	push	{r4}
 8005d10:	3b01      	subs	r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	da07      	bge.n	8005d28 <__sfputc_r+0x1c>
 8005d18:	6994      	ldr	r4, [r2, #24]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	db01      	blt.n	8005d22 <__sfputc_r+0x16>
 8005d1e:	290a      	cmp	r1, #10
 8005d20:	d102      	bne.n	8005d28 <__sfputc_r+0x1c>
 8005d22:	bc10      	pop	{r4}
 8005d24:	f7ff bd0a 	b.w	800573c <__swbuf_r>
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	1c58      	adds	r0, r3, #1
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	7019      	strb	r1, [r3, #0]
 8005d30:	4608      	mov	r0, r1
 8005d32:	bc10      	pop	{r4}
 8005d34:	4770      	bx	lr

08005d36 <__sfputs_r>:
 8005d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d38:	4606      	mov	r6, r0
 8005d3a:	460f      	mov	r7, r1
 8005d3c:	4614      	mov	r4, r2
 8005d3e:	18d5      	adds	r5, r2, r3
 8005d40:	42ac      	cmp	r4, r5
 8005d42:	d101      	bne.n	8005d48 <__sfputs_r+0x12>
 8005d44:	2000      	movs	r0, #0
 8005d46:	e007      	b.n	8005d58 <__sfputs_r+0x22>
 8005d48:	463a      	mov	r2, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	f7ff ffdc 	bl	8005d0c <__sfputc_r>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d1f3      	bne.n	8005d40 <__sfputs_r+0xa>
 8005d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d5c <_vfiprintf_r>:
 8005d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	460d      	mov	r5, r1
 8005d62:	4614      	mov	r4, r2
 8005d64:	4698      	mov	r8, r3
 8005d66:	4606      	mov	r6, r0
 8005d68:	b09d      	sub	sp, #116	; 0x74
 8005d6a:	b118      	cbz	r0, 8005d74 <_vfiprintf_r+0x18>
 8005d6c:	6983      	ldr	r3, [r0, #24]
 8005d6e:	b90b      	cbnz	r3, 8005d74 <_vfiprintf_r+0x18>
 8005d70:	f7ff feba 	bl	8005ae8 <__sinit>
 8005d74:	4b89      	ldr	r3, [pc, #548]	; (8005f9c <_vfiprintf_r+0x240>)
 8005d76:	429d      	cmp	r5, r3
 8005d78:	d11b      	bne.n	8005db2 <_vfiprintf_r+0x56>
 8005d7a:	6875      	ldr	r5, [r6, #4]
 8005d7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7e:	07d9      	lsls	r1, r3, #31
 8005d80:	d405      	bmi.n	8005d8e <_vfiprintf_r+0x32>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	059a      	lsls	r2, r3, #22
 8005d86:	d402      	bmi.n	8005d8e <_vfiprintf_r+0x32>
 8005d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8a:	f7ff ff4b 	bl	8005c24 <__retarget_lock_acquire_recursive>
 8005d8e:	89ab      	ldrh	r3, [r5, #12]
 8005d90:	071b      	lsls	r3, r3, #28
 8005d92:	d501      	bpl.n	8005d98 <_vfiprintf_r+0x3c>
 8005d94:	692b      	ldr	r3, [r5, #16]
 8005d96:	b9eb      	cbnz	r3, 8005dd4 <_vfiprintf_r+0x78>
 8005d98:	4629      	mov	r1, r5
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff fd20 	bl	80057e0 <__swsetup_r>
 8005da0:	b1c0      	cbz	r0, 8005dd4 <_vfiprintf_r+0x78>
 8005da2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da4:	07dc      	lsls	r4, r3, #31
 8005da6:	d50e      	bpl.n	8005dc6 <_vfiprintf_r+0x6a>
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	b01d      	add	sp, #116	; 0x74
 8005dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db2:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <_vfiprintf_r+0x244>)
 8005db4:	429d      	cmp	r5, r3
 8005db6:	d101      	bne.n	8005dbc <_vfiprintf_r+0x60>
 8005db8:	68b5      	ldr	r5, [r6, #8]
 8005dba:	e7df      	b.n	8005d7c <_vfiprintf_r+0x20>
 8005dbc:	4b79      	ldr	r3, [pc, #484]	; (8005fa4 <_vfiprintf_r+0x248>)
 8005dbe:	429d      	cmp	r5, r3
 8005dc0:	bf08      	it	eq
 8005dc2:	68f5      	ldreq	r5, [r6, #12]
 8005dc4:	e7da      	b.n	8005d7c <_vfiprintf_r+0x20>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	0598      	lsls	r0, r3, #22
 8005dca:	d4ed      	bmi.n	8005da8 <_vfiprintf_r+0x4c>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dce:	f7ff ff2a 	bl	8005c26 <__retarget_lock_release_recursive>
 8005dd2:	e7e9      	b.n	8005da8 <_vfiprintf_r+0x4c>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dde:	2330      	movs	r3, #48	; 0x30
 8005de0:	f04f 0901 	mov.w	r9, #1
 8005de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005de8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005fa8 <_vfiprintf_r+0x24c>
 8005dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005df0:	4623      	mov	r3, r4
 8005df2:	469a      	mov	sl, r3
 8005df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005df8:	b10a      	cbz	r2, 8005dfe <_vfiprintf_r+0xa2>
 8005dfa:	2a25      	cmp	r2, #37	; 0x25
 8005dfc:	d1f9      	bne.n	8005df2 <_vfiprintf_r+0x96>
 8005dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8005e02:	d00b      	beq.n	8005e1c <_vfiprintf_r+0xc0>
 8005e04:	465b      	mov	r3, fp
 8005e06:	4622      	mov	r2, r4
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff ff93 	bl	8005d36 <__sfputs_r>
 8005e10:	3001      	adds	r0, #1
 8005e12:	f000 80aa 	beq.w	8005f6a <_vfiprintf_r+0x20e>
 8005e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e18:	445a      	add	r2, fp
 8005e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8005e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a2 	beq.w	8005f6a <_vfiprintf_r+0x20e>
 8005e26:	2300      	movs	r3, #0
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e30:	f10a 0a01 	add.w	sl, sl, #1
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	9307      	str	r3, [sp, #28]
 8005e38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e3c:	931a      	str	r3, [sp, #104]	; 0x68
 8005e3e:	4654      	mov	r4, sl
 8005e40:	2205      	movs	r2, #5
 8005e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e46:	4858      	ldr	r0, [pc, #352]	; (8005fa8 <_vfiprintf_r+0x24c>)
 8005e48:	f000 fb30 	bl	80064ac <memchr>
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	b9d8      	cbnz	r0, 8005e88 <_vfiprintf_r+0x12c>
 8005e50:	06d1      	lsls	r1, r2, #27
 8005e52:	bf44      	itt	mi
 8005e54:	2320      	movmi	r3, #32
 8005e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e5a:	0713      	lsls	r3, r2, #28
 8005e5c:	bf44      	itt	mi
 8005e5e:	232b      	movmi	r3, #43	; 0x2b
 8005e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e64:	f89a 3000 	ldrb.w	r3, [sl]
 8005e68:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6a:	d015      	beq.n	8005e98 <_vfiprintf_r+0x13c>
 8005e6c:	4654      	mov	r4, sl
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f04f 0c0a 	mov.w	ip, #10
 8005e74:	9a07      	ldr	r2, [sp, #28]
 8005e76:	4621      	mov	r1, r4
 8005e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e7c:	3b30      	subs	r3, #48	; 0x30
 8005e7e:	2b09      	cmp	r3, #9
 8005e80:	d94e      	bls.n	8005f20 <_vfiprintf_r+0x1c4>
 8005e82:	b1b0      	cbz	r0, 8005eb2 <_vfiprintf_r+0x156>
 8005e84:	9207      	str	r2, [sp, #28]
 8005e86:	e014      	b.n	8005eb2 <_vfiprintf_r+0x156>
 8005e88:	eba0 0308 	sub.w	r3, r0, r8
 8005e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	46a2      	mov	sl, r4
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	e7d2      	b.n	8005e3e <_vfiprintf_r+0xe2>
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	1d19      	adds	r1, r3, #4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	9103      	str	r1, [sp, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bfbb      	ittet	lt
 8005ea4:	425b      	neglt	r3, r3
 8005ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eaa:	9307      	strge	r3, [sp, #28]
 8005eac:	9307      	strlt	r3, [sp, #28]
 8005eae:	bfb8      	it	lt
 8005eb0:	9204      	strlt	r2, [sp, #16]
 8005eb2:	7823      	ldrb	r3, [r4, #0]
 8005eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb6:	d10c      	bne.n	8005ed2 <_vfiprintf_r+0x176>
 8005eb8:	7863      	ldrb	r3, [r4, #1]
 8005eba:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebc:	d135      	bne.n	8005f2a <_vfiprintf_r+0x1ce>
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	3402      	adds	r4, #2
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	9203      	str	r2, [sp, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bfb8      	it	lt
 8005ecc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005fac <_vfiprintf_r+0x250>
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	4650      	mov	r0, sl
 8005eda:	7821      	ldrb	r1, [r4, #0]
 8005edc:	f000 fae6 	bl	80064ac <memchr>
 8005ee0:	b140      	cbz	r0, 8005ef4 <_vfiprintf_r+0x198>
 8005ee2:	2340      	movs	r3, #64	; 0x40
 8005ee4:	eba0 000a 	sub.w	r0, r0, sl
 8005ee8:	fa03 f000 	lsl.w	r0, r3, r0
 8005eec:	9b04      	ldr	r3, [sp, #16]
 8005eee:	3401      	adds	r4, #1
 8005ef0:	4303      	orrs	r3, r0
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	2206      	movs	r2, #6
 8005efa:	482d      	ldr	r0, [pc, #180]	; (8005fb0 <_vfiprintf_r+0x254>)
 8005efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f00:	f000 fad4 	bl	80064ac <memchr>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d03f      	beq.n	8005f88 <_vfiprintf_r+0x22c>
 8005f08:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <_vfiprintf_r+0x258>)
 8005f0a:	bb1b      	cbnz	r3, 8005f54 <_vfiprintf_r+0x1f8>
 8005f0c:	9b03      	ldr	r3, [sp, #12]
 8005f0e:	3307      	adds	r3, #7
 8005f10:	f023 0307 	bic.w	r3, r3, #7
 8005f14:	3308      	adds	r3, #8
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1a:	443b      	add	r3, r7
 8005f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f1e:	e767      	b.n	8005df0 <_vfiprintf_r+0x94>
 8005f20:	460c      	mov	r4, r1
 8005f22:	2001      	movs	r0, #1
 8005f24:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f28:	e7a5      	b.n	8005e76 <_vfiprintf_r+0x11a>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f04f 0c0a 	mov.w	ip, #10
 8005f30:	4619      	mov	r1, r3
 8005f32:	3401      	adds	r4, #1
 8005f34:	9305      	str	r3, [sp, #20]
 8005f36:	4620      	mov	r0, r4
 8005f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3c:	3a30      	subs	r2, #48	; 0x30
 8005f3e:	2a09      	cmp	r2, #9
 8005f40:	d903      	bls.n	8005f4a <_vfiprintf_r+0x1ee>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0c5      	beq.n	8005ed2 <_vfiprintf_r+0x176>
 8005f46:	9105      	str	r1, [sp, #20]
 8005f48:	e7c3      	b.n	8005ed2 <_vfiprintf_r+0x176>
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f52:	e7f0      	b.n	8005f36 <_vfiprintf_r+0x1da>
 8005f54:	ab03      	add	r3, sp, #12
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	4b16      	ldr	r3, [pc, #88]	; (8005fb8 <_vfiprintf_r+0x25c>)
 8005f5e:	a904      	add	r1, sp, #16
 8005f60:	f3af 8000 	nop.w
 8005f64:	4607      	mov	r7, r0
 8005f66:	1c78      	adds	r0, r7, #1
 8005f68:	d1d6      	bne.n	8005f18 <_vfiprintf_r+0x1bc>
 8005f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	d405      	bmi.n	8005f7c <_vfiprintf_r+0x220>
 8005f70:	89ab      	ldrh	r3, [r5, #12]
 8005f72:	059a      	lsls	r2, r3, #22
 8005f74:	d402      	bmi.n	8005f7c <_vfiprintf_r+0x220>
 8005f76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f78:	f7ff fe55 	bl	8005c26 <__retarget_lock_release_recursive>
 8005f7c:	89ab      	ldrh	r3, [r5, #12]
 8005f7e:	065b      	lsls	r3, r3, #25
 8005f80:	f53f af12 	bmi.w	8005da8 <_vfiprintf_r+0x4c>
 8005f84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f86:	e711      	b.n	8005dac <_vfiprintf_r+0x50>
 8005f88:	ab03      	add	r3, sp, #12
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	462a      	mov	r2, r5
 8005f8e:	4630      	mov	r0, r6
 8005f90:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <_vfiprintf_r+0x25c>)
 8005f92:	a904      	add	r1, sp, #16
 8005f94:	f000 f882 	bl	800609c <_printf_i>
 8005f98:	e7e4      	b.n	8005f64 <_vfiprintf_r+0x208>
 8005f9a:	bf00      	nop
 8005f9c:	0800679c 	.word	0x0800679c
 8005fa0:	080067bc 	.word	0x080067bc
 8005fa4:	0800677c 	.word	0x0800677c
 8005fa8:	080067dc 	.word	0x080067dc
 8005fac:	080067e2 	.word	0x080067e2
 8005fb0:	080067e6 	.word	0x080067e6
 8005fb4:	00000000 	.word	0x00000000
 8005fb8:	08005d37 	.word	0x08005d37

08005fbc <_printf_common>:
 8005fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	4699      	mov	r9, r3
 8005fc4:	688a      	ldr	r2, [r1, #8]
 8005fc6:	690b      	ldr	r3, [r1, #16]
 8005fc8:	4607      	mov	r7, r0
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	bfb8      	it	lt
 8005fce:	4613      	movlt	r3, r2
 8005fd0:	6033      	str	r3, [r6, #0]
 8005fd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fdc:	b10a      	cbz	r2, 8005fe2 <_printf_common+0x26>
 8005fde:	3301      	adds	r3, #1
 8005fe0:	6033      	str	r3, [r6, #0]
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	0699      	lsls	r1, r3, #26
 8005fe6:	bf42      	ittt	mi
 8005fe8:	6833      	ldrmi	r3, [r6, #0]
 8005fea:	3302      	addmi	r3, #2
 8005fec:	6033      	strmi	r3, [r6, #0]
 8005fee:	6825      	ldr	r5, [r4, #0]
 8005ff0:	f015 0506 	ands.w	r5, r5, #6
 8005ff4:	d106      	bne.n	8006004 <_printf_common+0x48>
 8005ff6:	f104 0a19 	add.w	sl, r4, #25
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	6832      	ldr	r2, [r6, #0]
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	42ab      	cmp	r3, r5
 8006002:	dc28      	bgt.n	8006056 <_printf_common+0x9a>
 8006004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006008:	1e13      	subs	r3, r2, #0
 800600a:	6822      	ldr	r2, [r4, #0]
 800600c:	bf18      	it	ne
 800600e:	2301      	movne	r3, #1
 8006010:	0692      	lsls	r2, r2, #26
 8006012:	d42d      	bmi.n	8006070 <_printf_common+0xb4>
 8006014:	4649      	mov	r1, r9
 8006016:	4638      	mov	r0, r7
 8006018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800601c:	47c0      	blx	r8
 800601e:	3001      	adds	r0, #1
 8006020:	d020      	beq.n	8006064 <_printf_common+0xa8>
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	68e5      	ldr	r5, [r4, #12]
 8006026:	f003 0306 	and.w	r3, r3, #6
 800602a:	2b04      	cmp	r3, #4
 800602c:	bf18      	it	ne
 800602e:	2500      	movne	r5, #0
 8006030:	6832      	ldr	r2, [r6, #0]
 8006032:	f04f 0600 	mov.w	r6, #0
 8006036:	68a3      	ldr	r3, [r4, #8]
 8006038:	bf08      	it	eq
 800603a:	1aad      	subeq	r5, r5, r2
 800603c:	6922      	ldr	r2, [r4, #16]
 800603e:	bf08      	it	eq
 8006040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006044:	4293      	cmp	r3, r2
 8006046:	bfc4      	itt	gt
 8006048:	1a9b      	subgt	r3, r3, r2
 800604a:	18ed      	addgt	r5, r5, r3
 800604c:	341a      	adds	r4, #26
 800604e:	42b5      	cmp	r5, r6
 8006050:	d11a      	bne.n	8006088 <_printf_common+0xcc>
 8006052:	2000      	movs	r0, #0
 8006054:	e008      	b.n	8006068 <_printf_common+0xac>
 8006056:	2301      	movs	r3, #1
 8006058:	4652      	mov	r2, sl
 800605a:	4649      	mov	r1, r9
 800605c:	4638      	mov	r0, r7
 800605e:	47c0      	blx	r8
 8006060:	3001      	adds	r0, #1
 8006062:	d103      	bne.n	800606c <_printf_common+0xb0>
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800606c:	3501      	adds	r5, #1
 800606e:	e7c4      	b.n	8005ffa <_printf_common+0x3e>
 8006070:	2030      	movs	r0, #48	; 0x30
 8006072:	18e1      	adds	r1, r4, r3
 8006074:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800607e:	4422      	add	r2, r4
 8006080:	3302      	adds	r3, #2
 8006082:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006086:	e7c5      	b.n	8006014 <_printf_common+0x58>
 8006088:	2301      	movs	r3, #1
 800608a:	4622      	mov	r2, r4
 800608c:	4649      	mov	r1, r9
 800608e:	4638      	mov	r0, r7
 8006090:	47c0      	blx	r8
 8006092:	3001      	adds	r0, #1
 8006094:	d0e6      	beq.n	8006064 <_printf_common+0xa8>
 8006096:	3601      	adds	r6, #1
 8006098:	e7d9      	b.n	800604e <_printf_common+0x92>
	...

0800609c <_printf_i>:
 800609c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	7e0f      	ldrb	r7, [r1, #24]
 80060a2:	4691      	mov	r9, r2
 80060a4:	2f78      	cmp	r7, #120	; 0x78
 80060a6:	4680      	mov	r8, r0
 80060a8:	460c      	mov	r4, r1
 80060aa:	469a      	mov	sl, r3
 80060ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060b2:	d807      	bhi.n	80060c4 <_printf_i+0x28>
 80060b4:	2f62      	cmp	r7, #98	; 0x62
 80060b6:	d80a      	bhi.n	80060ce <_printf_i+0x32>
 80060b8:	2f00      	cmp	r7, #0
 80060ba:	f000 80d9 	beq.w	8006270 <_printf_i+0x1d4>
 80060be:	2f58      	cmp	r7, #88	; 0x58
 80060c0:	f000 80a4 	beq.w	800620c <_printf_i+0x170>
 80060c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060cc:	e03a      	b.n	8006144 <_printf_i+0xa8>
 80060ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060d2:	2b15      	cmp	r3, #21
 80060d4:	d8f6      	bhi.n	80060c4 <_printf_i+0x28>
 80060d6:	a101      	add	r1, pc, #4	; (adr r1, 80060dc <_printf_i+0x40>)
 80060d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060dc:	08006135 	.word	0x08006135
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080060c5 	.word	0x080060c5
 80060e8:	080060c5 	.word	0x080060c5
 80060ec:	080060c5 	.word	0x080060c5
 80060f0:	080060c5 	.word	0x080060c5
 80060f4:	08006149 	.word	0x08006149
 80060f8:	080060c5 	.word	0x080060c5
 80060fc:	080060c5 	.word	0x080060c5
 8006100:	080060c5 	.word	0x080060c5
 8006104:	080060c5 	.word	0x080060c5
 8006108:	08006257 	.word	0x08006257
 800610c:	08006179 	.word	0x08006179
 8006110:	08006239 	.word	0x08006239
 8006114:	080060c5 	.word	0x080060c5
 8006118:	080060c5 	.word	0x080060c5
 800611c:	08006279 	.word	0x08006279
 8006120:	080060c5 	.word	0x080060c5
 8006124:	08006179 	.word	0x08006179
 8006128:	080060c5 	.word	0x080060c5
 800612c:	080060c5 	.word	0x080060c5
 8006130:	08006241 	.word	0x08006241
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	602a      	str	r2, [r5, #0]
 800613c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006144:	2301      	movs	r3, #1
 8006146:	e0a4      	b.n	8006292 <_printf_i+0x1f6>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	6829      	ldr	r1, [r5, #0]
 800614c:	0606      	lsls	r6, r0, #24
 800614e:	f101 0304 	add.w	r3, r1, #4
 8006152:	d50a      	bpl.n	800616a <_printf_i+0xce>
 8006154:	680e      	ldr	r6, [r1, #0]
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	2e00      	cmp	r6, #0
 800615a:	da03      	bge.n	8006164 <_printf_i+0xc8>
 800615c:	232d      	movs	r3, #45	; 0x2d
 800615e:	4276      	negs	r6, r6
 8006160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006164:	230a      	movs	r3, #10
 8006166:	485e      	ldr	r0, [pc, #376]	; (80062e0 <_printf_i+0x244>)
 8006168:	e019      	b.n	800619e <_printf_i+0x102>
 800616a:	680e      	ldr	r6, [r1, #0]
 800616c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	bf18      	it	ne
 8006174:	b236      	sxthne	r6, r6
 8006176:	e7ef      	b.n	8006158 <_printf_i+0xbc>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	6820      	ldr	r0, [r4, #0]
 800617c:	1d19      	adds	r1, r3, #4
 800617e:	6029      	str	r1, [r5, #0]
 8006180:	0601      	lsls	r1, r0, #24
 8006182:	d501      	bpl.n	8006188 <_printf_i+0xec>
 8006184:	681e      	ldr	r6, [r3, #0]
 8006186:	e002      	b.n	800618e <_printf_i+0xf2>
 8006188:	0646      	lsls	r6, r0, #25
 800618a:	d5fb      	bpl.n	8006184 <_printf_i+0xe8>
 800618c:	881e      	ldrh	r6, [r3, #0]
 800618e:	2f6f      	cmp	r7, #111	; 0x6f
 8006190:	bf0c      	ite	eq
 8006192:	2308      	moveq	r3, #8
 8006194:	230a      	movne	r3, #10
 8006196:	4852      	ldr	r0, [pc, #328]	; (80062e0 <_printf_i+0x244>)
 8006198:	2100      	movs	r1, #0
 800619a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800619e:	6865      	ldr	r5, [r4, #4]
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	bfa8      	it	ge
 80061a4:	6821      	ldrge	r1, [r4, #0]
 80061a6:	60a5      	str	r5, [r4, #8]
 80061a8:	bfa4      	itt	ge
 80061aa:	f021 0104 	bicge.w	r1, r1, #4
 80061ae:	6021      	strge	r1, [r4, #0]
 80061b0:	b90e      	cbnz	r6, 80061b6 <_printf_i+0x11a>
 80061b2:	2d00      	cmp	r5, #0
 80061b4:	d04d      	beq.n	8006252 <_printf_i+0x1b6>
 80061b6:	4615      	mov	r5, r2
 80061b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80061bc:	fb03 6711 	mls	r7, r3, r1, r6
 80061c0:	5dc7      	ldrb	r7, [r0, r7]
 80061c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061c6:	4637      	mov	r7, r6
 80061c8:	42bb      	cmp	r3, r7
 80061ca:	460e      	mov	r6, r1
 80061cc:	d9f4      	bls.n	80061b8 <_printf_i+0x11c>
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d10b      	bne.n	80061ea <_printf_i+0x14e>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	07de      	lsls	r6, r3, #31
 80061d6:	d508      	bpl.n	80061ea <_printf_i+0x14e>
 80061d8:	6923      	ldr	r3, [r4, #16]
 80061da:	6861      	ldr	r1, [r4, #4]
 80061dc:	4299      	cmp	r1, r3
 80061de:	bfde      	ittt	le
 80061e0:	2330      	movle	r3, #48	; 0x30
 80061e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061ea:	1b52      	subs	r2, r2, r5
 80061ec:	6122      	str	r2, [r4, #16]
 80061ee:	464b      	mov	r3, r9
 80061f0:	4621      	mov	r1, r4
 80061f2:	4640      	mov	r0, r8
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	aa03      	add	r2, sp, #12
 80061fa:	f7ff fedf 	bl	8005fbc <_printf_common>
 80061fe:	3001      	adds	r0, #1
 8006200:	d14c      	bne.n	800629c <_printf_i+0x200>
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	b004      	add	sp, #16
 8006208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620c:	4834      	ldr	r0, [pc, #208]	; (80062e0 <_printf_i+0x244>)
 800620e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006212:	6829      	ldr	r1, [r5, #0]
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	f851 6b04 	ldr.w	r6, [r1], #4
 800621a:	6029      	str	r1, [r5, #0]
 800621c:	061d      	lsls	r5, r3, #24
 800621e:	d514      	bpl.n	800624a <_printf_i+0x1ae>
 8006220:	07df      	lsls	r7, r3, #31
 8006222:	bf44      	itt	mi
 8006224:	f043 0320 	orrmi.w	r3, r3, #32
 8006228:	6023      	strmi	r3, [r4, #0]
 800622a:	b91e      	cbnz	r6, 8006234 <_printf_i+0x198>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	2310      	movs	r3, #16
 8006236:	e7af      	b.n	8006198 <_printf_i+0xfc>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f043 0320 	orr.w	r3, r3, #32
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	2378      	movs	r3, #120	; 0x78
 8006242:	4828      	ldr	r0, [pc, #160]	; (80062e4 <_printf_i+0x248>)
 8006244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006248:	e7e3      	b.n	8006212 <_printf_i+0x176>
 800624a:	0659      	lsls	r1, r3, #25
 800624c:	bf48      	it	mi
 800624e:	b2b6      	uxthmi	r6, r6
 8006250:	e7e6      	b.n	8006220 <_printf_i+0x184>
 8006252:	4615      	mov	r5, r2
 8006254:	e7bb      	b.n	80061ce <_printf_i+0x132>
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	6826      	ldr	r6, [r4, #0]
 800625a:	1d18      	adds	r0, r3, #4
 800625c:	6961      	ldr	r1, [r4, #20]
 800625e:	6028      	str	r0, [r5, #0]
 8006260:	0635      	lsls	r5, r6, #24
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	d501      	bpl.n	800626a <_printf_i+0x1ce>
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	e002      	b.n	8006270 <_printf_i+0x1d4>
 800626a:	0670      	lsls	r0, r6, #25
 800626c:	d5fb      	bpl.n	8006266 <_printf_i+0x1ca>
 800626e:	8019      	strh	r1, [r3, #0]
 8006270:	2300      	movs	r3, #0
 8006272:	4615      	mov	r5, r2
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	e7ba      	b.n	80061ee <_printf_i+0x152>
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	2100      	movs	r1, #0
 800627c:	1d1a      	adds	r2, r3, #4
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	681d      	ldr	r5, [r3, #0]
 8006282:	6862      	ldr	r2, [r4, #4]
 8006284:	4628      	mov	r0, r5
 8006286:	f000 f911 	bl	80064ac <memchr>
 800628a:	b108      	cbz	r0, 8006290 <_printf_i+0x1f4>
 800628c:	1b40      	subs	r0, r0, r5
 800628e:	6060      	str	r0, [r4, #4]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	6123      	str	r3, [r4, #16]
 8006294:	2300      	movs	r3, #0
 8006296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800629a:	e7a8      	b.n	80061ee <_printf_i+0x152>
 800629c:	462a      	mov	r2, r5
 800629e:	4649      	mov	r1, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	47d0      	blx	sl
 80062a6:	3001      	adds	r0, #1
 80062a8:	d0ab      	beq.n	8006202 <_printf_i+0x166>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	079b      	lsls	r3, r3, #30
 80062ae:	d413      	bmi.n	80062d8 <_printf_i+0x23c>
 80062b0:	68e0      	ldr	r0, [r4, #12]
 80062b2:	9b03      	ldr	r3, [sp, #12]
 80062b4:	4298      	cmp	r0, r3
 80062b6:	bfb8      	it	lt
 80062b8:	4618      	movlt	r0, r3
 80062ba:	e7a4      	b.n	8006206 <_printf_i+0x16a>
 80062bc:	2301      	movs	r3, #1
 80062be:	4632      	mov	r2, r6
 80062c0:	4649      	mov	r1, r9
 80062c2:	4640      	mov	r0, r8
 80062c4:	47d0      	blx	sl
 80062c6:	3001      	adds	r0, #1
 80062c8:	d09b      	beq.n	8006202 <_printf_i+0x166>
 80062ca:	3501      	adds	r5, #1
 80062cc:	68e3      	ldr	r3, [r4, #12]
 80062ce:	9903      	ldr	r1, [sp, #12]
 80062d0:	1a5b      	subs	r3, r3, r1
 80062d2:	42ab      	cmp	r3, r5
 80062d4:	dcf2      	bgt.n	80062bc <_printf_i+0x220>
 80062d6:	e7eb      	b.n	80062b0 <_printf_i+0x214>
 80062d8:	2500      	movs	r5, #0
 80062da:	f104 0619 	add.w	r6, r4, #25
 80062de:	e7f5      	b.n	80062cc <_printf_i+0x230>
 80062e0:	080067ed 	.word	0x080067ed
 80062e4:	080067fe 	.word	0x080067fe

080062e8 <_putc_r>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	460d      	mov	r5, r1
 80062ec:	4614      	mov	r4, r2
 80062ee:	4606      	mov	r6, r0
 80062f0:	b118      	cbz	r0, 80062fa <_putc_r+0x12>
 80062f2:	6983      	ldr	r3, [r0, #24]
 80062f4:	b90b      	cbnz	r3, 80062fa <_putc_r+0x12>
 80062f6:	f7ff fbf7 	bl	8005ae8 <__sinit>
 80062fa:	4b1c      	ldr	r3, [pc, #112]	; (800636c <_putc_r+0x84>)
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d124      	bne.n	800634a <_putc_r+0x62>
 8006300:	6874      	ldr	r4, [r6, #4]
 8006302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006304:	07d8      	lsls	r0, r3, #31
 8006306:	d405      	bmi.n	8006314 <_putc_r+0x2c>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	0599      	lsls	r1, r3, #22
 800630c:	d402      	bmi.n	8006314 <_putc_r+0x2c>
 800630e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006310:	f7ff fc88 	bl	8005c24 <__retarget_lock_acquire_recursive>
 8006314:	68a3      	ldr	r3, [r4, #8]
 8006316:	3b01      	subs	r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	60a3      	str	r3, [r4, #8]
 800631c:	da05      	bge.n	800632a <_putc_r+0x42>
 800631e:	69a2      	ldr	r2, [r4, #24]
 8006320:	4293      	cmp	r3, r2
 8006322:	db1c      	blt.n	800635e <_putc_r+0x76>
 8006324:	b2eb      	uxtb	r3, r5
 8006326:	2b0a      	cmp	r3, #10
 8006328:	d019      	beq.n	800635e <_putc_r+0x76>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	701d      	strb	r5, [r3, #0]
 8006332:	b2ed      	uxtb	r5, r5
 8006334:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006336:	07da      	lsls	r2, r3, #31
 8006338:	d405      	bmi.n	8006346 <_putc_r+0x5e>
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	059b      	lsls	r3, r3, #22
 800633e:	d402      	bmi.n	8006346 <_putc_r+0x5e>
 8006340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006342:	f7ff fc70 	bl	8005c26 <__retarget_lock_release_recursive>
 8006346:	4628      	mov	r0, r5
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	4b09      	ldr	r3, [pc, #36]	; (8006370 <_putc_r+0x88>)
 800634c:	429c      	cmp	r4, r3
 800634e:	d101      	bne.n	8006354 <_putc_r+0x6c>
 8006350:	68b4      	ldr	r4, [r6, #8]
 8006352:	e7d6      	b.n	8006302 <_putc_r+0x1a>
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <_putc_r+0x8c>)
 8006356:	429c      	cmp	r4, r3
 8006358:	bf08      	it	eq
 800635a:	68f4      	ldreq	r4, [r6, #12]
 800635c:	e7d1      	b.n	8006302 <_putc_r+0x1a>
 800635e:	4629      	mov	r1, r5
 8006360:	4622      	mov	r2, r4
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff f9ea 	bl	800573c <__swbuf_r>
 8006368:	4605      	mov	r5, r0
 800636a:	e7e3      	b.n	8006334 <_putc_r+0x4c>
 800636c:	0800679c 	.word	0x0800679c
 8006370:	080067bc 	.word	0x080067bc
 8006374:	0800677c 	.word	0x0800677c

08006378 <__sread>:
 8006378:	b510      	push	{r4, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006380:	f000 f8a2 	bl	80064c8 <_read_r>
 8006384:	2800      	cmp	r0, #0
 8006386:	bfab      	itete	ge
 8006388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800638a:	89a3      	ldrhlt	r3, [r4, #12]
 800638c:	181b      	addge	r3, r3, r0
 800638e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006392:	bfac      	ite	ge
 8006394:	6563      	strge	r3, [r4, #84]	; 0x54
 8006396:	81a3      	strhlt	r3, [r4, #12]
 8006398:	bd10      	pop	{r4, pc}

0800639a <__swrite>:
 800639a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639e:	461f      	mov	r7, r3
 80063a0:	898b      	ldrh	r3, [r1, #12]
 80063a2:	4605      	mov	r5, r0
 80063a4:	05db      	lsls	r3, r3, #23
 80063a6:	460c      	mov	r4, r1
 80063a8:	4616      	mov	r6, r2
 80063aa:	d505      	bpl.n	80063b8 <__swrite+0x1e>
 80063ac:	2302      	movs	r3, #2
 80063ae:	2200      	movs	r2, #0
 80063b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b4:	f000 f868 	bl	8006488 <_lseek_r>
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	4632      	mov	r2, r6
 80063bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063c0:	81a3      	strh	r3, [r4, #12]
 80063c2:	4628      	mov	r0, r5
 80063c4:	463b      	mov	r3, r7
 80063c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ce:	f000 b817 	b.w	8006400 <_write_r>

080063d2 <__sseek>:
 80063d2:	b510      	push	{r4, lr}
 80063d4:	460c      	mov	r4, r1
 80063d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063da:	f000 f855 	bl	8006488 <_lseek_r>
 80063de:	1c43      	adds	r3, r0, #1
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	bf15      	itete	ne
 80063e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ee:	81a3      	strheq	r3, [r4, #12]
 80063f0:	bf18      	it	ne
 80063f2:	81a3      	strhne	r3, [r4, #12]
 80063f4:	bd10      	pop	{r4, pc}

080063f6 <__sclose>:
 80063f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fa:	f000 b813 	b.w	8006424 <_close_r>
	...

08006400 <_write_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	4611      	mov	r1, r2
 8006408:	2200      	movs	r2, #0
 800640a:	4d05      	ldr	r5, [pc, #20]	; (8006420 <_write_r+0x20>)
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7f9 ff72 	bl	80002f8 <_write>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_write_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_write_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	200036e0 	.word	0x200036e0

08006424 <_close_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	2300      	movs	r3, #0
 8006428:	4d05      	ldr	r5, [pc, #20]	; (8006440 <_close_r+0x1c>)
 800642a:	4604      	mov	r4, r0
 800642c:	4608      	mov	r0, r1
 800642e:	602b      	str	r3, [r5, #0]
 8006430:	f7fa f885 	bl	800053e <_close>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d102      	bne.n	800643e <_close_r+0x1a>
 8006438:	682b      	ldr	r3, [r5, #0]
 800643a:	b103      	cbz	r3, 800643e <_close_r+0x1a>
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	bd38      	pop	{r3, r4, r5, pc}
 8006440:	200036e0 	.word	0x200036e0

08006444 <_fstat_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	2300      	movs	r3, #0
 8006448:	4d06      	ldr	r5, [pc, #24]	; (8006464 <_fstat_r+0x20>)
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	f7fa f87f 	bl	8000554 <_fstat>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	d102      	bne.n	8006460 <_fstat_r+0x1c>
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	b103      	cbz	r3, 8006460 <_fstat_r+0x1c>
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	bd38      	pop	{r3, r4, r5, pc}
 8006462:	bf00      	nop
 8006464:	200036e0 	.word	0x200036e0

08006468 <_isatty_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	2300      	movs	r3, #0
 800646c:	4d05      	ldr	r5, [pc, #20]	; (8006484 <_isatty_r+0x1c>)
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	f7fa f87d 	bl	8000572 <_isatty>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_isatty_r+0x1a>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_isatty_r+0x1a>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	200036e0 	.word	0x200036e0

08006488 <_lseek_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	4608      	mov	r0, r1
 800648e:	4611      	mov	r1, r2
 8006490:	2200      	movs	r2, #0
 8006492:	4d05      	ldr	r5, [pc, #20]	; (80064a8 <_lseek_r+0x20>)
 8006494:	602a      	str	r2, [r5, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	f7fa f875 	bl	8000586 <_lseek>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_lseek_r+0x1e>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_lseek_r+0x1e>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	200036e0 	.word	0x200036e0

080064ac <memchr>:
 80064ac:	4603      	mov	r3, r0
 80064ae:	b510      	push	{r4, lr}
 80064b0:	b2c9      	uxtb	r1, r1
 80064b2:	4402      	add	r2, r0
 80064b4:	4293      	cmp	r3, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	d101      	bne.n	80064be <memchr+0x12>
 80064ba:	2000      	movs	r0, #0
 80064bc:	e003      	b.n	80064c6 <memchr+0x1a>
 80064be:	7804      	ldrb	r4, [r0, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	428c      	cmp	r4, r1
 80064c4:	d1f6      	bne.n	80064b4 <memchr+0x8>
 80064c6:	bd10      	pop	{r4, pc}

080064c8 <_read_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4604      	mov	r4, r0
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	2200      	movs	r2, #0
 80064d2:	4d05      	ldr	r5, [pc, #20]	; (80064e8 <_read_r+0x20>)
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	f7fa f814 	bl	8000504 <_read>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_read_r+0x1e>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_read_r+0x1e>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	200036e0 	.word	0x200036e0

080064ec <_init>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	bf00      	nop
 80064f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064f2:	bc08      	pop	{r3}
 80064f4:	469e      	mov	lr, r3
 80064f6:	4770      	bx	lr

080064f8 <_fini>:
 80064f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fa:	bf00      	nop
 80064fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064fe:	bc08      	pop	{r3}
 8006500:	469e      	mov	lr, r3
 8006502:	4770      	bx	lr
