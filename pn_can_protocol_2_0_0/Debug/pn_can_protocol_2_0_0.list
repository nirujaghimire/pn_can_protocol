
pn_can_protocol_2_0_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00020480  2**0
                  CONTENTS
  4 .ARM          00000000  080042cc  080042cc  00020480  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042cc  080042cc  00020480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000480  08004754  00020480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004754  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a25f  00000000  00000000  000204a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db7  00000000  00000000  0002a708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002cd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018687  00000000  00000000  0002d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af50  00000000  00000000  00045c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863db  00000000  00000000  00050b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6f72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b14  00000000  00000000  000d6fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000480 	.word	0x20000480
 8000128:	00000000 	.word	0x00000000
 800012c:	080040fc 	.word	0x080040fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000484 	.word	0x20000484
 8000148:	080040fc 	.word	0x080040fc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa88 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f809 	bl	800016a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f84a 	bl	80001f4 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000160:	f000 f87e 	bl	8000260 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  extern void runTx();
  runTx();
 8000164:	f002 fe46 	bl	8002df4 <runTx>
  while (1)
 8000168:	e7fe      	b.n	8000168 <main+0x1c>

0800016a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800016a:	b580      	push	{r7, lr}
 800016c:	b090      	sub	sp, #64	; 0x40
 800016e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	f107 0318 	add.w	r3, r7, #24
 8000174:	2228      	movs	r2, #40	; 0x28
 8000176:	2100      	movs	r1, #0
 8000178:	4618      	mov	r0, r3
 800017a:	f002 ff51 	bl	8003020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	609a      	str	r2, [r3, #8]
 8000188:	60da      	str	r2, [r3, #12]
 800018a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800018c:	2301      	movs	r3, #1
 800018e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000194:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000196:	2300      	movs	r3, #0
 8000198:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	4618      	mov	r0, r3
 80001b4:	f001 fbb8 	bl	8001928 <HAL_RCC_OscConfig>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d001      	beq.n	80001c2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001be:	f000 f8b1 	bl	8000324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c2:	230f      	movs	r3, #15
 80001c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c6:	2302      	movs	r3, #2
 80001c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2102      	movs	r1, #2
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fe25 	bl	8001e2c <HAL_RCC_ClockConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001e8:	f000 f89c 	bl	8000324 <Error_Handler>
  }
}
 80001ec:	bf00      	nop
 80001ee:	3740      	adds	r7, #64	; 0x40
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}

080001f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <MX_CAN_Init+0x64>)
 80001fa:	4a18      	ldr	r2, [pc, #96]	; (800025c <MX_CAN_Init+0x68>)
 80001fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <MX_CAN_Init+0x64>)
 8000200:	2208      	movs	r2, #8
 8000202:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <MX_CAN_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800020a:	4b13      	ldr	r3, [pc, #76]	; (8000258 <MX_CAN_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_CAN_Init+0x64>)
 8000212:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000216:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_CAN_Init+0x64>)
 800021a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800021e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000220:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <MX_CAN_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_CAN_Init+0x64>)
 8000228:	2201      	movs	r2, #1
 800022a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <MX_CAN_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_CAN_Init+0x64>)
 8000234:	2201      	movs	r2, #1
 8000236:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <MX_CAN_Init+0x64>)
 800023a:	2200      	movs	r2, #0
 800023c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_CAN_Init+0x64>)
 8000240:	2200      	movs	r2, #0
 8000242:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <MX_CAN_Init+0x64>)
 8000246:	f000 fa93 	bl	8000770 <HAL_CAN_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000250:	f000 f868 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	2000049c 	.word	0x2000049c
 800025c:	40006400 	.word	0x40006400

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 ff56 	bl	8002148 <HAL_HalfDuplex_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f83f 	bl	8000324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200004c4 	.word	0x200004c4
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ba:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a0d      	ldr	r2, [pc, #52]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c0:	f043 0320 	orr.w	r3, r3, #32
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0320 	and.w	r3, r3, #32
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002d8:	f043 0304 	orr.w	r3, r3, #4
 80002dc:	6193      	str	r3, [r2, #24]
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <MX_GPIO_Init+0x40>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	f003 0304 	and.w	r3, r3, #4
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char *data, int len) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	60f8      	str	r0, [r7, #12]
 8000300:	60b9      	str	r1, [r7, #8]
 8000302:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	b29a      	uxth	r2, r3
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	68b9      	ldr	r1, [r7, #8]
 800030e:	4804      	ldr	r0, [pc, #16]	; (8000320 <_write+0x28>)
 8000310:	f001 ff72 	bl	80021f8 <HAL_UART_Transmit>
	return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3710      	adds	r7, #16
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	200004c4 	.word	0x200004c4

08000324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000328:	b672      	cpsid	i
}
 800032a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032c:	e7fe      	b.n	800032c <Error_Handler+0x8>
	...

08000330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <HAL_MspInit+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <HAL_MspInit+0x40>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6193      	str	r3, [r2, #24]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <HAL_MspInit+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <HAL_MspInit+0x40>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a07      	ldr	r2, [pc, #28]	; (8000370 <HAL_MspInit+0x40>)
 8000354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <HAL_MspInit+0x40>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000362:	603b      	str	r3, [r7, #0]
 8000364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a20      	ldr	r2, [pc, #128]	; (8000410 <HAL_CAN_MspInit+0x9c>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d139      	bne.n	8000408 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 8000396:	69db      	ldr	r3, [r3, #28]
 8000398:	4a1e      	ldr	r2, [pc, #120]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 800039a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039e:	61d3      	str	r3, [r2, #28]
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003a2:	69db      	ldr	r3, [r3, #28]
 80003a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a18      	ldr	r2, [pc, #96]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <HAL_CAN_MspInit+0xa0>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	4619      	mov	r1, r3
 80003d8:	480f      	ldr	r0, [pc, #60]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003da:	f001 f921 	bl	8001620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e4:	2302      	movs	r3, #2
 80003e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003e8:	2303      	movs	r3, #3
 80003ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4809      	ldr	r0, [pc, #36]	; (8000418 <HAL_CAN_MspInit+0xa4>)
 80003f4:	f001 f914 	bl	8001620 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2101      	movs	r1, #1
 80003fc:	2014      	movs	r0, #20
 80003fe:	f001 f8d8 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000402:	2014      	movs	r0, #20
 8000404:	f001 f8f1 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40006400 	.word	0x40006400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <HAL_UART_MspInit+0x74>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d124      	bne.n	8000486 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <HAL_UART_MspInit+0x78>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a14      	ldr	r2, [pc, #80]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <HAL_UART_MspInit+0x78>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <HAL_UART_MspInit+0x78>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <HAL_UART_MspInit+0x78>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800046c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000472:	2312      	movs	r3, #18
 8000474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000476:	2303      	movs	r3, #3
 8000478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	4619      	mov	r1, r3
 8000480:	4805      	ldr	r0, [pc, #20]	; (8000498 <HAL_UART_MspInit+0x7c>)
 8000482:	f001 f8cd 	bl	8001620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000486:	bf00      	nop
 8000488:	3720      	adds	r7, #32
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40013800 	.word	0x40013800
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x4>

080004a2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80004e2:	f000 f905 	bl	80006f0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <USB_LP_CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USB low priority or CAN RX0 interrupts.
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
	canInterrupt();
 80004f0:	f002 fbfa 	bl	8002ce8 <canInterrupt>
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80004f6:	f000 fd58 	bl	8000faa <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
	/* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	2000049c 	.word	0x2000049c

08000504 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
  }

  return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_close>:
  }
  return len;
}

int _close(int file)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800054a:	4618      	mov	r0, r3
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000564:	605a      	str	r2, [r3, #4]
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000586:	b480      	push	{r7}
 8000588:	b085      	sub	sp, #20
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
	...

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f002 fcfc 	bl	8002fcc <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	2000050c 	.word	0x2000050c
 8000608:	200005f8 	.word	0x200005f8

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff fff8 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000620:	4a0c      	ldr	r2, [pc, #48]	; (8000654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a09      	ldr	r2, [pc, #36]	; (8000658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000634:	4c09      	ldr	r4, [pc, #36]	; (800065c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f002 fcc9 	bl	8002fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fd81 	bl	800014c <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 8000654:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8000658:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 800065c:	200005f4 	.word	0x200005f4

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 ff91 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff fe56 	bl	8000330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ffa9 	bl	8001606 <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295
 80006cc:	f000 ff71 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	20000510 	.word	0x20000510

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000510 	.word	0x20000510

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff fff0 	bl	8000714 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000740:	d005      	beq.n	800074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_Delay+0x44>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074e:	bf00      	nop
 8000750:	f7ff ffe0 	bl	8000714 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f7      	bhi.n	8000750 <HAL_Delay+0x28>
  {
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e0ed      	b.n	800095e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d102      	bne.n	8000794 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff fdf0 	bl	8000374 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f042 0201 	orr.w	r2, r2, #1
 80007a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007a4:	f7ff ffb6 	bl	8000714 <HAL_GetTick>
 80007a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007aa:	e012      	b.n	80007d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007ac:	f7ff ffb2 	bl	8000714 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b0a      	cmp	r3, #10
 80007b8:	d90b      	bls.n	80007d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2205      	movs	r2, #5
 80007ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e0c5      	b.n	800095e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0e5      	beq.n	80007ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0202 	bic.w	r2, r2, #2
 80007ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007f0:	f7ff ff90 	bl	8000714 <HAL_GetTick>
 80007f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007f6:	e012      	b.n	800081e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007f8:	f7ff ff8c 	bl	8000714 <HAL_GetTick>
 80007fc:	4602      	mov	r2, r0
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	2b0a      	cmp	r3, #10
 8000804:	d90b      	bls.n	800081e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2205      	movs	r2, #5
 8000816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e09f      	b.n	800095e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0302 	and.w	r3, r3, #2
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1e5      	bne.n	80007f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7e1b      	ldrb	r3, [r3, #24]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d108      	bne.n	8000846 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	e007      	b.n	8000856 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	7e5b      	ldrb	r3, [r3, #25]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d108      	bne.n	8000870 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	e007      	b.n	8000880 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800087e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7e9b      	ldrb	r3, [r3, #26]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d108      	bne.n	800089a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	f042 0220 	orr.w	r2, r2, #32
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e007      	b.n	80008aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0220 	bic.w	r2, r2, #32
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7edb      	ldrb	r3, [r3, #27]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d108      	bne.n	80008c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f022 0210 	bic.w	r2, r2, #16
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e007      	b.n	80008d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f042 0210 	orr.w	r2, r2, #16
 80008d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7f1b      	ldrb	r3, [r3, #28]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d108      	bne.n	80008ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f042 0208 	orr.w	r2, r2, #8
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e007      	b.n	80008fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f022 0208 	bic.w	r2, r2, #8
 80008fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7f5b      	ldrb	r3, [r3, #29]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d108      	bne.n	8000918 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f042 0204 	orr.w	r2, r2, #4
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e007      	b.n	8000928 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f022 0204 	bic.w	r2, r2, #4
 8000926:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	691b      	ldr	r3, [r3, #16]
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	ea42 0103 	orr.w	r1, r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2201      	movs	r2, #1
 8000958:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000966:	b480      	push	{r7}
 8000968:	b087      	sub	sp, #28
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800097c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800097e:	7cfb      	ldrb	r3, [r7, #19]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d003      	beq.n	800098c <HAL_CAN_ConfigFilter+0x26>
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	2b02      	cmp	r3, #2
 8000988:	f040 80aa 	bne.w	8000ae0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000992:	f043 0201 	orr.w	r2, r3, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f003 031f 	and.w	r3, r3, #31
 80009a4:	2201      	movs	r2, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d123      	bne.n	8000a0e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	401a      	ands	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3248      	adds	r2, #72	; 0x48
 80009ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a04:	6979      	ldr	r1, [r7, #20]
 8000a06:	3348      	adds	r3, #72	; 0x48
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	440b      	add	r3, r1
 8000a0c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d122      	bne.n	8000a5c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a32:	683a      	ldr	r2, [r7, #0]
 8000a34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3248      	adds	r2, #72	; 0x48
 8000a3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a52:	6979      	ldr	r1, [r7, #20]
 8000a54:	3348      	adds	r3, #72	; 0x48
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d109      	bne.n	8000a78 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	401a      	ands	r2, r3
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a76:	e007      	b.n	8000a88 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d109      	bne.n	8000aa4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000aa2:	e007      	b.n	8000ab4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6a1b      	ldr	r3, [r3, #32]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d107      	bne.n	8000acc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ad2:	f023 0201 	bic.w	r2, r3, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e006      	b.n	8000aee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
  }
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d12e      	bne.n	8000b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2202      	movs	r2, #2
 8000b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0201 	bic.w	r2, r2, #1
 8000b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b24:	f7ff fdf6 	bl	8000714 <HAL_GetTick>
 8000b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b2a:	e012      	b.n	8000b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b2c:	f7ff fdf2 	bl	8000714 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	2b0a      	cmp	r3, #10
 8000b38:	d90b      	bls.n	8000b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2205      	movs	r2, #5
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e012      	b.n	8000b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1e5      	bne.n	8000b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e006      	b.n	8000b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
  }
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d003      	beq.n	8000bac <HAL_CAN_AddTxMessage+0x2c>
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	f040 80ad 	bne.w	8000d06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10a      	bne.n	8000bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d105      	bne.n	8000bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 8095 	beq.w	8000cf6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	0e1b      	lsrs	r3, r3, #24
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10d      	bne.n	8000c04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6809      	ldr	r1, [r1, #0]
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	440b      	add	r3, r1
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	e00f      	b.n	8000c24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c14:	68f9      	ldr	r1, [r7, #12]
 8000c16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	440b      	add	r3, r1
 8000c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3318      	adds	r3, #24
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	440b      	add	r3, r1
 8000c34:	3304      	adds	r3, #4
 8000c36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	7d1b      	ldrb	r3, [r3, #20]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d111      	bne.n	8000c64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3318      	adds	r3, #24
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	6811      	ldr	r1, [r2, #0]
 8000c54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	440b      	add	r3, r1
 8000c60:	3304      	adds	r3, #4
 8000c62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3307      	adds	r3, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	061a      	lsls	r2, r3, #24
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3306      	adds	r3, #6
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	041b      	lsls	r3, r3, #16
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3305      	adds	r3, #5
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	3204      	adds	r2, #4
 8000c84:	7812      	ldrb	r2, [r2, #0]
 8000c86:	4610      	mov	r0, r2
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	6811      	ldr	r1, [r2, #0]
 8000c8c:	ea43 0200 	orr.w	r2, r3, r0
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	061a      	lsls	r2, r3, #24
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	041b      	lsls	r3, r3, #16
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	ea43 0200 	orr.w	r2, r3, r0
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	440b      	add	r3, r1
 8000ccc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3318      	adds	r3, #24
 8000cda:	011b      	lsls	r3, r3, #4
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	6811      	ldr	r1, [r2, #0]
 8000ce4:	f043 0201 	orr.w	r2, r3, #1
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3318      	adds	r3, #24
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	440b      	add	r3, r1
 8000cf0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e00e      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e006      	b.n	8000d14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
  }
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3724      	adds	r7, #36	; 0x24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b087      	sub	sp, #28
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d32:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d003      	beq.n	8000d42 <HAL_CAN_GetRxMessage+0x24>
 8000d3a:	7dfb      	ldrb	r3, [r7, #23]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	f040 8103 	bne.w	8000f48 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10e      	bne.n	8000d66 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d116      	bne.n	8000d84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0f7      	b.n	8000f56 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d107      	bne.n	8000d84 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e0e8      	b.n	8000f56 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	331b      	adds	r3, #27
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	4413      	add	r3, r2
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0204 	and.w	r2, r3, #4
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d10c      	bne.n	8000dbc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	331b      	adds	r3, #27
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0d5b      	lsrs	r3, r3, #21
 8000db2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	e00b      	b.n	8000dd4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	331b      	adds	r3, #27
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4413      	add	r3, r2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	331b      	adds	r3, #27
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0202 	and.w	r2, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	331b      	adds	r3, #27
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4413      	add	r3, r2
 8000df6:	3304      	adds	r3, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2208      	movs	r2, #8
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	e00b      	b.n	8000e22 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	331b      	adds	r3, #27
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	4413      	add	r3, r2
 8000e16:	3304      	adds	r3, #4
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 020f 	and.w	r2, r3, #15
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	331b      	adds	r3, #27
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	331b      	adds	r3, #27
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	3304      	adds	r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	4413      	add	r3, r2
 8000e72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	0a1a      	lsrs	r2, r3, #8
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0c1a      	lsrs	r2, r3, #16
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	3302      	adds	r3, #2
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0e1a      	lsrs	r2, r3, #24
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	0a1a      	lsrs	r2, r3, #8
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	3305      	adds	r3, #5
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4413      	add	r3, r2
 8000ef2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0c1a      	lsrs	r2, r3, #16
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	3306      	adds	r3, #6
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	0e1a      	lsrs	r2, r3, #24
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3307      	adds	r3, #7
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0220 	orr.w	r2, r2, #32
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0220 	orr.w	r2, r2, #32
 8000f42:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e006      	b.n	8000f56 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
  }
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d002      	beq.n	8000f7e <HAL_CAN_ActivateNotification+0x1e>
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d109      	bne.n	8000f92 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	6959      	ldr	r1, [r3, #20]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e006      	b.n	8000fa0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
  }
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b08a      	sub	sp, #40	; 0x28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000fe6:	6a3b      	ldr	r3, [r7, #32]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d07c      	beq.n	80010ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d023      	beq.n	8001042 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f983 	bl	8001318 <HAL_CAN_TxMailbox0CompleteCallback>
 8001012:	e016      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e00c      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	e002      	b.n	8001042 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f986 	bl	800134e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d024      	beq.n	8001096 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f962 	bl	800132a <HAL_CAN_TxMailbox1CompleteCallback>
 8001066:	e016      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
 800107a:	e00c      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
 800108e:	e002      	b.n	8001096 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f000 f965 	bl	8001360 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d024      	beq.n	80010ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 f941 	bl	800133c <HAL_CAN_TxMailbox2CompleteCallback>
 80010ba:	e016      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d004      	beq.n	80010d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	e00c      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	e002      	b.n	80010ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f944 	bl	8001372 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00c      	beq.n	800110e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2208      	movs	r2, #8
 8001128:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f933 	bl	8001396 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d009      	beq.n	800114e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f91b 	bl	8001384 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00c      	beq.n	8001172 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	2b00      	cmp	r3, #0
 8001160:	d007      	beq.n	8001172 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2210      	movs	r2, #16
 8001170:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2208      	movs	r2, #8
 800118c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f913 	bl	80013ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f8fb 	bl	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00b      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2210      	movs	r2, #16
 80011cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8fc 	bl	80013cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00b      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2208      	movs	r2, #8
 80011ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8f4 	bl	80013de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d07b      	beq.n	80012f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d072      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	2b00      	cmp	r3, #0
 800122e:	d008      	beq.n	8001242 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001264:	2b00      	cmp	r3, #0
 8001266:	d043      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800126e:	2b00      	cmp	r3, #0
 8001270:	d03e      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001278:	2b60      	cmp	r3, #96	; 0x60
 800127a:	d02b      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x32a>
 800127c:	2b60      	cmp	r3, #96	; 0x60
 800127e:	d82e      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001280:	2b50      	cmp	r3, #80	; 0x50
 8001282:	d022      	beq.n	80012ca <HAL_CAN_IRQHandler+0x320>
 8001284:	2b50      	cmp	r3, #80	; 0x50
 8001286:	d82a      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001288:	2b40      	cmp	r3, #64	; 0x40
 800128a:	d019      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x316>
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	d826      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001290:	2b30      	cmp	r3, #48	; 0x30
 8001292:	d010      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x30c>
 8001294:	2b30      	cmp	r3, #48	; 0x30
 8001296:	d822      	bhi.n	80012de <HAL_CAN_IRQHandler+0x334>
 8001298:	2b10      	cmp	r3, #16
 800129a:	d002      	beq.n	80012a2 <HAL_CAN_IRQHandler+0x2f8>
 800129c:	2b20      	cmp	r3, #32
 800129e:	d005      	beq.n	80012ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80012a0:	e01d      	b.n	80012de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012aa:	e019      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012b4:	e014      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f043 0320 	orr.w	r3, r3, #32
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012be:	e00f      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012c8:	e00a      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d2:	e005      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012dc:	e000      	b.n	80012e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80012de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2204      	movs	r2, #4
 80012f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d008      	beq.n	8001310 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f870 	bl	80013f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr

080013de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
	...

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4906      	ldr	r1, [pc, #24]	; (800149c <__NVIC_EnableIRQ+0x34>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	; (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	; (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff90 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff2d 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff42 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff35 	bl	8001468 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001620:	b480      	push	{r7}
 8001622:	b08b      	sub	sp, #44	; 0x2c
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	e169      	b.n	8001908 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001634:	2201      	movs	r2, #1
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	69fa      	ldr	r2, [r7, #28]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 8158 	bne.w	8001902 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a9a      	ldr	r2, [pc, #616]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d05e      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 800165c:	4a98      	ldr	r2, [pc, #608]	; (80018c0 <HAL_GPIO_Init+0x2a0>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d875      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001662:	4a98      	ldr	r2, [pc, #608]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d058      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001668:	4a96      	ldr	r2, [pc, #600]	; (80018c4 <HAL_GPIO_Init+0x2a4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d86f      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800166e:	4a96      	ldr	r2, [pc, #600]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d052      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001674:	4a94      	ldr	r2, [pc, #592]	; (80018c8 <HAL_GPIO_Init+0x2a8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d869      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800167a:	4a94      	ldr	r2, [pc, #592]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d04c      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 8001680:	4a92      	ldr	r2, [pc, #584]	; (80018cc <HAL_GPIO_Init+0x2ac>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d863      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001686:	4a92      	ldr	r2, [pc, #584]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d046      	beq.n	800171a <HAL_GPIO_Init+0xfa>
 800168c:	4a90      	ldr	r2, [pc, #576]	; (80018d0 <HAL_GPIO_Init+0x2b0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d85d      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 8001692:	2b12      	cmp	r3, #18
 8001694:	d82a      	bhi.n	80016ec <HAL_GPIO_Init+0xcc>
 8001696:	2b12      	cmp	r3, #18
 8001698:	d859      	bhi.n	800174e <HAL_GPIO_Init+0x12e>
 800169a:	a201      	add	r2, pc, #4	; (adr r2, 80016a0 <HAL_GPIO_Init+0x80>)
 800169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a0:	0800171b 	.word	0x0800171b
 80016a4:	080016f5 	.word	0x080016f5
 80016a8:	08001707 	.word	0x08001707
 80016ac:	08001749 	.word	0x08001749
 80016b0:	0800174f 	.word	0x0800174f
 80016b4:	0800174f 	.word	0x0800174f
 80016b8:	0800174f 	.word	0x0800174f
 80016bc:	0800174f 	.word	0x0800174f
 80016c0:	0800174f 	.word	0x0800174f
 80016c4:	0800174f 	.word	0x0800174f
 80016c8:	0800174f 	.word	0x0800174f
 80016cc:	0800174f 	.word	0x0800174f
 80016d0:	0800174f 	.word	0x0800174f
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	0800174f 	.word	0x0800174f
 80016dc:	0800174f 	.word	0x0800174f
 80016e0:	0800174f 	.word	0x0800174f
 80016e4:	080016fd 	.word	0x080016fd
 80016e8:	08001711 	.word	0x08001711
 80016ec:	4a79      	ldr	r2, [pc, #484]	; (80018d4 <HAL_GPIO_Init+0x2b4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016f2:	e02c      	b.n	800174e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	623b      	str	r3, [r7, #32]
          break;
 80016fa:	e029      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	3304      	adds	r3, #4
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e024      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	3308      	adds	r3, #8
 800170c:	623b      	str	r3, [r7, #32]
          break;
 800170e:	e01f      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	330c      	adds	r3, #12
 8001716:	623b      	str	r3, [r7, #32]
          break;
 8001718:	e01a      	b.n	8001750 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001722:	2304      	movs	r3, #4
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e013      	b.n	8001750 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	611a      	str	r2, [r3, #16]
          break;
 800173a:	e009      	b.n	8001750 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	615a      	str	r2, [r3, #20]
          break;
 8001746:	e003      	b.n	8001750 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e000      	b.n	8001750 <HAL_GPIO_Init+0x130>
          break;
 800174e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d801      	bhi.n	800175a <HAL_GPIO_Init+0x13a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	e001      	b.n	800175e <HAL_GPIO_Init+0x13e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3304      	adds	r3, #4
 800175e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2bff      	cmp	r3, #255	; 0xff
 8001764:	d802      	bhi.n	800176c <HAL_GPIO_Init+0x14c>
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	e002      	b.n	8001772 <HAL_GPIO_Init+0x152>
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	3b08      	subs	r3, #8
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	210f      	movs	r1, #15
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	401a      	ands	r2, r3
 8001784:	6a39      	ldr	r1, [r7, #32]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	431a      	orrs	r2, r3
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80b1 	beq.w	8001902 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x2b8>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4013      	ands	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a40      	ldr	r2, [pc, #256]	; (80018e0 <HAL_GPIO_Init+0x2c0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d013      	beq.n	800180c <HAL_GPIO_Init+0x1ec>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a3f      	ldr	r2, [pc, #252]	; (80018e4 <HAL_GPIO_Init+0x2c4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d00d      	beq.n	8001808 <HAL_GPIO_Init+0x1e8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3e      	ldr	r2, [pc, #248]	; (80018e8 <HAL_GPIO_Init+0x2c8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d007      	beq.n	8001804 <HAL_GPIO_Init+0x1e4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_GPIO_Init+0x2cc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d101      	bne.n	8001800 <HAL_GPIO_Init+0x1e0>
 80017fc:	2303      	movs	r3, #3
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001800:	2304      	movs	r3, #4
 8001802:	e004      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001804:	2302      	movs	r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x1ee>
 800180c:	2300      	movs	r3, #0
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	f002 0203 	and.w	r2, r2, #3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4093      	lsls	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181e:	492f      	ldr	r1, [pc, #188]	; (80018dc <HAL_GPIO_Init+0x2bc>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	492c      	ldr	r1, [pc, #176]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4928      	ldr	r1, [pc, #160]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4922      	ldr	r1, [pc, #136]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	491e      	ldr	r1, [pc, #120]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4918      	ldr	r1, [pc, #96]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	4914      	ldr	r1, [pc, #80]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d021      	beq.n	80018f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_GPIO_Init+0x2d0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e021      	b.n	8001902 <HAL_GPIO_Init+0x2e2>
 80018be:	bf00      	nop
 80018c0:	10320000 	.word	0x10320000
 80018c4:	10310000 	.word	0x10310000
 80018c8:	10220000 	.word	0x10220000
 80018cc:	10210000 	.word	0x10210000
 80018d0:	10120000 	.word	0x10120000
 80018d4:	10110000 	.word	0x10110000
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40011000 	.word	0x40011000
 80018ec:	40011400 	.word	0x40011400
 80018f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	4909      	ldr	r1, [pc, #36]	; (8001924 <HAL_GPIO_Init+0x304>)
 80018fe:	4013      	ands	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	3301      	adds	r3, #1
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f47f ae8e 	bne.w	8001634 <HAL_GPIO_Init+0x14>
  }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	372c      	adds	r7, #44	; 0x2c
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40010400 	.word	0x40010400

08001928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e272      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 8087 	beq.w	8001a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	4b92      	ldr	r3, [pc, #584]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b04      	cmp	r3, #4
 8001952:	d00c      	beq.n	800196e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b08      	cmp	r3, #8
 800195e:	d112      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
 8001960:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d10b      	bne.n	8001986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x12c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d168      	bne.n	8001a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e24c      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198e:	d106      	bne.n	800199e <HAL_RCC_OscConfig+0x76>
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a7f      	ldr	r2, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	e02e      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x98>
 80019a6:	4b7b      	ldr	r3, [pc, #492]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a7a      	ldr	r2, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b78      	ldr	r3, [pc, #480]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a77      	ldr	r2, [pc, #476]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0xbc>
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b6f      	ldr	r3, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6e      	ldr	r2, [pc, #440]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xd4>
 80019e4:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a6a      	ldr	r2, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7fe fe86 	bl	8000714 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7fe fe82 	bl	8000714 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e200      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b5d      	ldr	r3, [pc, #372]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xe4>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7fe fe72 	bl	8000714 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7fe fe6e 	bl	8000714 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1ec      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x10c>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a62:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
 8001a7a:	4b46      	ldr	r3, [pc, #280]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1c0      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4939      	ldr	r1, [pc, #228]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7fe fe27 	bl	8000714 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aca:	f7fe fe23 	bl	8000714 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1a1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4927      	ldr	r1, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x270>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7fe fe06 	bl	8000714 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7fe fe02 	bl	8000714 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e180      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03a      	beq.n	8001bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d019      	beq.n	8001b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b44:	f7fe fde6 	bl	8000714 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fde2 	bl	8000714 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e160      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 face 	bl	800210c <RCC_Delay>
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b78:	f7fe fdcc 	bl	8000714 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7e:	e00f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f7fe fdc8 	bl	8000714 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d908      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e146      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	42420000 	.word	0x42420000
 8001b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b92      	ldr	r3, [pc, #584]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e9      	bne.n	8001b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80a6 	beq.w	8001d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b8b      	ldr	r3, [pc, #556]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10d      	bne.n	8001be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a87      	ldr	r2, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b82      	ldr	r3, [pc, #520]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7fe fd89 	bl	8000714 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7fe fd85 	bl	8000714 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b64      	cmp	r3, #100	; 0x64
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e103      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x4c8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x312>
 8001c2c:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e02d      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x334>
 8001c42:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	4a66      	ldr	r2, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f023 0304 	bic.w	r3, r3, #4
 8001c58:	6213      	str	r3, [r2, #32]
 8001c5a:	e01c      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_OscConfig+0x356>
 8001c64:	4b61      	ldr	r3, [pc, #388]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a60      	ldr	r2, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	4b5e      	ldr	r3, [pc, #376]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a5d      	ldr	r2, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	6213      	str	r3, [r2, #32]
 8001c7c:	e00b      	b.n	8001c96 <HAL_RCC_OscConfig+0x36e>
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a57      	ldr	r2, [pc, #348]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d015      	beq.n	8001cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe fd39 	bl	8000714 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe fd35 	bl	8000714 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0b1      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x37e>
 8001cc8:	e014      	b.n	8001cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cca:	f7fe fd23 	bl	8000714 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd2:	f7fe fd1f 	bl	8000714 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e09b      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a3b      	ldr	r2, [pc, #236]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8087 	beq.w	8001e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d061      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d146      	bne.n	8001db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7fe fcf3 	bl	8000714 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d32:	f7fe fcef 	bl	8000714 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e06d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d58:	d108      	bne.n	8001d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	4921      	ldr	r1, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a19      	ldr	r1, [r3, #32]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	491b      	ldr	r1, [pc, #108]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe fcc3 	bl	8000714 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe fcbf 	bl	8000714 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03d      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x46a>
 8001db0:	e035      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_RCC_OscConfig+0x4cc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fcac 	bl	8000714 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fca8 	bl	8000714 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e026      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x498>
 8001dde:	e01e      	b.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e019      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40007000 	.word	0x40007000
 8001df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_OscConfig+0x500>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d001      	beq.n	8001e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0d0      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d910      	bls.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 0207 	bic.w	r2, r3, #7
 8001e56:	4965      	ldr	r1, [pc, #404]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0b8      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a52      	ldr	r2, [pc, #328]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	494d      	ldr	r1, [pc, #308]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d040      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b41      	ldr	r3, [pc, #260]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d109      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e073      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06b      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0a:	4b39      	ldr	r3, [pc, #228]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f023 0203 	bic.w	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7fe fbfa 	bl	8000714 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f24:	f7fe fbf6 	bl	8000714 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e053      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 020c 	and.w	r2, r3, #12
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1eb      	bne.n	8001f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d210      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4922      	ldr	r1, [pc, #136]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e032      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4916      	ldr	r1, [pc, #88]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d009      	beq.n	8001fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fa6:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fba:	f000 f821 	bl	8002000 <HAL_RCC_GetSysClockFreq>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	490a      	ldr	r1, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fcc:	5ccb      	ldrb	r3, [r1, r3]
 8001fce:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_RCC_ClockConfig+0x1d0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fb58 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08004208 	.word	0x08004208
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	2300      	movs	r3, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	2b04      	cmp	r3, #4
 8002028:	d002      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x30>
 800202a:	2b08      	cmp	r3, #8
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0x36>
 800202e:	e027      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002032:	613b      	str	r3, [r7, #16]
      break;
 8002034:	e027      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0c9b      	lsrs	r3, r3, #18
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002040:	5cd3      	ldrb	r3, [r2, r3]
 8002042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d010      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_GetSysClockFreq+0x94>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c5b      	lsrs	r3, r3, #17
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	4a11      	ldr	r2, [pc, #68]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0d      	ldr	r2, [pc, #52]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002062:	fb03 f202 	mul.w	r2, r3, r2
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e004      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	613b      	str	r3, [r7, #16]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	693b      	ldr	r3, [r7, #16]
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	007a1200 	.word	0x007a1200
 800209c:	08004220 	.word	0x08004220
 80020a0:	08004230 	.word	0x08004230
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08004218 	.word	0x08004218

080020e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020e8:	f7ff ffde 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	0adb      	lsrs	r3, r3, #11
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	4903      	ldr	r1, [pc, #12]	; (8002108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	08004218 	.word	0x08004218

0800210c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <RCC_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <RCC_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002128:	bf00      	nop
  }
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <RCC_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000000 	.word	0x20000000
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e04a      	b.n	80021f0 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe f954 	bl	800041c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f925 	bl	80023dc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80021b0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2220      	movs	r2, #32
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b20      	cmp	r3, #32
 8002216:	d16d      	bne.n	80022f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_UART_Transmit+0x2c>
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e066      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002236:	f7fe fa6d 	bl	8000714 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88fa      	ldrh	r2, [r7, #6]
 8002240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x6c>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800226c:	e02a      	b.n	80022c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 f840 	bl	80022fe <UART_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e036      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800229c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3302      	adds	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e007      	b.n	80022b6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1cf      	bne.n	800226e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2140      	movs	r1, #64	; 0x40
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f810 	bl	80022fe <UART_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e006      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b090      	sub	sp, #64	; 0x40
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	4613      	mov	r3, r2
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230e:	e050      	b.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d04c      	beq.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <UART_WaitOnFlagUntilTimeout+0x30>
 800231e:	f7fe f9f9 	bl	8000714 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800232a:	429a      	cmp	r2, r3
 800232c:	d241      	bcs.n	80023b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	330c      	adds	r3, #12
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	e853 3f00 	ldrex	r3, [r3]
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	330c      	adds	r3, #12
 800234c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800234e:	637a      	str	r2, [r7, #52]	; 0x34
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e5      	bne.n	800232e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3314      	adds	r3, #20
 8002368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	613b      	str	r3, [r7, #16]
   return(result);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	63bb      	str	r3, [r7, #56]	; 0x38
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3314      	adds	r3, #20
 8002380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002382:	623a      	str	r2, [r7, #32]
 8002384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002386:	69f9      	ldr	r1, [r7, #28]
 8002388:	6a3a      	ldr	r2, [r7, #32]
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e5      	bne.n	8002362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e00f      	b.n	80023d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	bf0c      	ite	eq
 80023c2:	2301      	moveq	r3, #1
 80023c4:	2300      	movne	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d09f      	beq.n	8002310 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3740      	adds	r7, #64	; 0x40
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002416:	f023 030c 	bic.w	r3, r3, #12
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	430b      	orrs	r3, r1
 8002422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <UART_SetConfig+0x114>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d103      	bne.n	800244c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002444:	f7ff fe4e 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	e002      	b.n	8002452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800244c:	f7ff fe36 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <UART_SetConfig+0x118>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	0119      	lsls	r1, r3, #4
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009a      	lsls	r2, r3, #2
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	fbb2 f2f3 	udiv	r2, r2, r3
 8002488:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <UART_SetConfig+0x118>)
 800248a:	fba3 0302 	umull	r0, r3, r3, r2
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	fb00 f303 	mul.w	r3, r0, r3
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	3332      	adds	r3, #50	; 0x32
 800249c:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <UART_SetConfig+0x118>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024a8:	4419      	add	r1, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	009a      	lsls	r2, r3, #2
 80024b4:	441a      	add	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <UART_SetConfig+0x118>)
 80024c2:	fba3 0302 	umull	r0, r3, r3, r2
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2064      	movs	r0, #100	; 0x64
 80024ca:	fb00 f303 	mul.w	r3, r0, r3
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	3332      	adds	r3, #50	; 0x32
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <UART_SetConfig+0x118>)
 80024d6:	fba2 2303 	umull	r2, r3, r2, r3
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	f003 020f 	and.w	r2, r3, #15
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	440a      	add	r2, r1
 80024e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40013800 	.word	0x40013800
 80024f4:	51eb851f 	.word	0x51eb851f

080024f8 <getMillis>:
	vprintf(msg, args);
	va_end(args);
}
#endif

static uint32_t getMillis() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80024fc:	f7fe f90a 	bl	8000714 <HAL_GetTick>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}

08002506 <txSendThread>:
/**
 * Send thread for transmitting should be called in thread continuously
 * @param link 	: Link where data is to be transmitted
 * @param data	: Data that is to be transmitted
 */
static int txSendThread(SyncLayerCANLink *link, SyncLayerCANData *data) {
 8002506:	b580      	push	{r7, lr}
 8002508:	b08e      	sub	sp, #56	; 0x38
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
	uint32_t id;
	uint8_t bytes[8];
	uint16_t len;
	int isSuccess = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	637b      	str	r3, [r7, #52]	; 0x34
	if (data->track == SYNC_LAYER_CAN_START_REQ) {
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d130      	bne.n	8002580 <txSendThread+0x7a>
		data->doesCRCMatch = 1;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		data->isTimeOut = 0;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		isSuccess = 1;
 800252e:	2301      	movs	r3, #1
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
		data->frameIndex = 0;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	72da      	strb	r2, [r3, #11]
		id = link->startReqID;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
		*(uint32_t*) (bytes) = data->id;
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	601a      	str	r2, [r3, #0]
		*(uint16_t*) (bytes + 4) = data->size;
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	3304      	adds	r3, #4
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	8912      	ldrh	r2, [r2, #8]
 8002552:	801a      	strh	r2, [r3, #0]
		bytes[6] = data->numTry;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	7a9b      	ldrb	r3, [r3, #10]
 8002558:	74bb      	strb	r3, [r7, #18]
		len = 8;
 800255a:	2308      	movs	r3, #8
 800255c:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (link->canSend(id, bytes, len)) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f107 010c 	add.w	r1, r7, #12
 800256a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800256c:	4798      	blx	r3
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80d0 	beq.w	8002716 <txSendThread+0x210>
			data->track = SYNC_LAYER_CAN_START_ACK;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800257e:	e0ca      	b.n	8002716 <txSendThread+0x210>
			console(CONSOLE_WARNING, __func__,
					"START REQ> 0x%x : 0x%x, %d, %d (failed)\n", id,
					*(uint32_t*) bytes, *(uint16_t*) (&bytes[4]),bytes[6]);
#endif

	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002586:	2b02      	cmp	r3, #2
 8002588:	d14c      	bne.n	8002624 <txSendThread+0x11e>
		isSuccess = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
		id = data->id;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	627b      	str	r3, [r7, #36]	; 0x24
		int indexOffset = data->frameIndex * 7;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	7adb      	ldrb	r3, [r3, #11]
 8002598:	461a      	mov	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
		bytes[0] = data->frameIndex;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7adb      	ldrb	r3, [r3, #11]
 80025a6:	733b      	strb	r3, [r7, #12]
		int remSize = data->size - indexOffset;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	891b      	ldrh	r3, [r3, #8]
 80025ac:	461a      	mov	r2, r3
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
		len = remSize > 7 ? 7 : remSize;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b07      	cmp	r3, #7
 80025b8:	bfa8      	it	ge
 80025ba:	2307      	movge	r3, #7
 80025bc:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int i = 0; i < len; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	e00f      	b.n	80025e4 <txSendThread+0xde>
			bytes[i + 1] = data->bytes[i + indexOffset];
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	440a      	add	r2, r1
 80025ce:	441a      	add	r2, r3
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	3301      	adds	r3, #1
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	3338      	adds	r3, #56	; 0x38
 80025d8:	443b      	add	r3, r7
 80025da:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int i = 0; i < len; i++)
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	3301      	adds	r3, #1
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
 80025e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbeb      	blt.n	80025c4 <txSendThread+0xbe>
		if (link->canSend(id, bytes, len + 1)) {
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	3201      	adds	r2, #1
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f107 010c 	add.w	r1, r7, #12
 80025fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025fe:	4798      	blx	r3
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8087 	beq.w	8002716 <txSendThread+0x210>
			data->frameIndex++;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7adb      	ldrb	r3, [r3, #11]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	72da      	strb	r2, [r3, #11]
			if (remSize <= 7)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b07      	cmp	r3, #7
 8002618:	dc7d      	bgt.n	8002716 <txSendThread+0x210>
				data->track = SYNC_LAYER_CAN_END_REQ;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2204      	movs	r2, #4
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002622:	e078      	b.n	8002716 <txSendThread+0x210>
#ifdef CONSOLE_ENABLE
		else
			console(CONSOLE_WARNING, __func__, "DATA> 0x%x : %d, ...\n", id,
					bytes[0]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_MISSING_DATA) {
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262a:	2b03      	cmp	r3, #3
 800262c:	d142      	bne.n	80026b4 <txSendThread+0x1ae>
		isSuccess = 1;
 800262e:	2301      	movs	r3, #1
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
		id = data->id;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
		int indexOffset = data->frameIndex * 7;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	7adb      	ldrb	r3, [r3, #11]
 800263c:	461a      	mov	r2, r3
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	623b      	str	r3, [r7, #32]
		bytes[0] = data->frameIndex;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	7adb      	ldrb	r3, [r3, #11]
 800264a:	733b      	strb	r3, [r7, #12]
		int remSize = data->size - indexOffset;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	891b      	ldrh	r3, [r3, #8]
 8002650:	461a      	mov	r2, r3
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	61fb      	str	r3, [r7, #28]
		len = remSize > 7 ? 7 : remSize;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b07      	cmp	r3, #7
 800265c:	bfa8      	it	ge
 800265e:	2307      	movge	r3, #7
 8002660:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (int i = 0; i < len; i++)
 8002662:	2300      	movs	r3, #0
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	e00f      	b.n	8002688 <txSendThread+0x182>
			bytes[i + 1] = data->bytes[i + indexOffset];
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800266e:	6a3a      	ldr	r2, [r7, #32]
 8002670:	440a      	add	r2, r1
 8002672:	441a      	add	r2, r3
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	3301      	adds	r3, #1
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	3338      	adds	r3, #56	; 0x38
 800267c:	443b      	add	r3, r7
 800267e:	f803 2c2c 	strb.w	r2, [r3, #-44]
		for (int i = 0; i < len; i++)
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	3301      	adds	r3, #1
 8002686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800268a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800268c:	429a      	cmp	r2, r3
 800268e:	dbeb      	blt.n	8002668 <txSendThread+0x162>
		if (link->canSend(id, bytes, len + 1)) {
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	3201      	adds	r2, #1
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	f107 010c 	add.w	r1, r7, #12
 80026a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026a2:	4798      	blx	r3
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d035      	beq.n	8002716 <txSendThread+0x210>
			data->track = SYNC_LAYER_CAN_END_REQ;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2204      	movs	r2, #4
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026b2:	e030      	b.n	8002716 <txSendThread+0x210>
#ifdef CONSOLE_ENABLE
		else
			console(CONSOLE_WARNING, __func__, "MISSING DATA> 0x%x : %d, ...\n",
					id, bytes[0]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_END_REQ) {
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d12b      	bne.n	8002716 <txSendThread+0x210>
		isSuccess = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
		len = 8;
 80026c2:	2308      	movs	r3, #8
 80026c4:	857b      	strh	r3, [r7, #42]	; 0x2a
		id = link->endReqID;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
		*(uint32_t*) bytes = data->id;
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	601a      	str	r2, [r3, #0]
		data->crc = crc32_calculate(data->bytes, data->size);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	891b      	ldrh	r3, [r3, #8]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 fc5f 	bl	8002fa4 <crc32_calculate>
 80026e6:	4602      	mov	r2, r0
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	621a      	str	r2, [r3, #32]
		*(uint32_t*) (&bytes[4]) = data->crc;
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	3304      	adds	r3, #4
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	6a12      	ldr	r2, [r2, #32]
 80026f6:	601a      	str	r2, [r3, #0]
		if (link->canSend(id, bytes, len)) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f107 010c 	add.w	r1, r7, #12
 8002704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002706:	4798      	blx	r3
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <txSendThread+0x210>
			data->track = SYNC_LAYER_CAN_END_ACK;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2205      	movs	r2, #5
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			console(CONSOLE_WARNING, __func__, "END REQ> 0x%x : 0x%x, 0x%x \n",
					id, *(uint32_t*) bytes, *(uint32_t*) (&bytes[4]));
#endif
	}

	if (isSuccess)
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	2b00      	cmp	r3, #0
 800271a:	d006      	beq.n	800272a <txSendThread+0x224>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 800271c:	f7ff feec 	bl	80024f8 <getMillis>
 8002720:	4603      	mov	r3, r0
 8002722:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	629a      	str	r2, [r3, #40]	; 0x28
	return isSuccess;
 800272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800272c:	4618      	mov	r0, r3
 800272e:	3738      	adds	r7, #56	; 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <txReceiveThread>:
 * @param id	: CAN ID
 * @param bytes	: bytes received from CAN
 * @param len	: length of CAN bytes received
 */
static int txReceiveThread(SyncLayerCANLink *link, SyncLayerCANData *data, uint32_t id,
		uint8_t *bytes, uint16_t len) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
	int isSuccess = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]

	if (data->track == SYNC_LAYER_CAN_START_ACK && id == link->startAckID) {
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10b      	bne.n	8002768 <txReceiveThread+0x34>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d106      	bne.n	8002768 <txReceiveThread+0x34>
		isSuccess = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
		data->track = SYNC_LAYER_CAN_DATA;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2202      	movs	r2, #2
 8002762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002766:	e03e      	b.n	80027e6 <txReceiveThread+0xb2>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "START ACK>0x%x : 0x%x, %d, %d\n", id,
				*(uint32_t*) (bytes), *(uint16_t*) (&bytes[4]),bytes[6]);
#endif

	} else if (data->track == SYNC_LAYER_CAN_END_ACK && id == link->endAckID) {
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800276e:	2b05      	cmp	r3, #5
 8002770:	d139      	bne.n	80027e6 <txReceiveThread+0xb2>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	d134      	bne.n	80027e6 <txReceiveThread+0xb2>
		isSuccess = 1;
 800277c:	2301      	movs	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
		uint8_t missingDataAvailable = bytes[4];
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	791b      	ldrb	r3, [r3, #4]
 8002784:	74fb      	strb	r3, [r7, #19]
		uint8_t missingFrameIndex = bytes[5];
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	795b      	ldrb	r3, [r3, #5]
 800278a:	74bb      	strb	r3, [r7, #18]
		data->doesCRCMatch = bytes[6];
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	799a      	ldrb	r2, [r3, #6]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		if (missingDataAvailable) {
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <txReceiveThread+0x78>
			data->frameIndex = missingFrameIndex;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	7cba      	ldrb	r2, [r7, #18]
 80027a0:	72da      	strb	r2, [r3, #11]
			data->track = SYNC_LAYER_CAN_MISSING_DATA;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027aa:	e01c      	b.n	80027e6 <txReceiveThread+0xb2>
		} else {
			if (data->doesCRCMatch) {
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <txReceiveThread+0x8c>
				data->track = SYNC_LAYER_CAN_TRANSMIT_SUCCESS;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2206      	movs	r2, #6
 80027ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027be:	e012      	b.n	80027e6 <txReceiveThread+0xb2>
			} else {
#ifdef CONSOLE_ENABLE
				console(CONSOLE_WARNING, __func__, "CRC ERROR>0x%x : 0x%x \n",
						data->id, data->crc);
#endif
				data->numTry--;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	7a9b      	ldrb	r3, [r3, #10]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	729a      	strb	r2, [r3, #10]
				if (data->numTry > 0) {
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	7a9b      	ldrb	r3, [r3, #10]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <txReceiveThread+0xaa>
					data->track = SYNC_LAYER_CAN_START_REQ;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027dc:	e003      	b.n	80027e6 <txReceiveThread+0xb2>
#ifdef CONSOLE_ENABLE
					console(CONSOLE_WARNING, __func__, "RETRY>0x%x : %d\n",
							data->id, data->numTry);
#endif
				} else {
					data->track = SYNC_LAYER_CAN_TRANSMIT_FAILED;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2207      	movs	r2, #7
 80027e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		console(CONSOLE_INFO, __func__, "END ACK>0x%x : 0x%x, %d, %d, %d \n",
				id, *(uint32_t*) bytes, bytes[4], bytes[5], bytes[6]);
#endif
	}

	if (isSuccess)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <txReceiveThread+0xc6>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 80027ec:	f7ff fe84 	bl	80024f8 <getMillis>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28

	if (getMillis() > data->waitTill) {
 80027fa:	f7ff fe7d 	bl	80024f8 <getMillis>
 80027fe:	4602      	mov	r2, r0
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	429a      	cmp	r2, r3
 8002806:	d916      	bls.n	8002836 <txReceiveThread+0x102>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_WARNING, __func__, "TIMEOUT>0x%x : %d > %d\n", data->id,
		TRANSMIT_TIMEOUT, getMillis() - data->waitTill);
#endif
		data->isTimeOut = 1;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		data->numTry--;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	7a9b      	ldrb	r3, [r3, #10]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2da      	uxtb	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	729a      	strb	r2, [r3, #10]
		if (data->numTry > 0) {
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	7a9b      	ldrb	r3, [r3, #10]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d004      	beq.n	800282e <txReceiveThread+0xfa>
			data->track = SYNC_LAYER_CAN_START_REQ;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800282c:	e003      	b.n	8002836 <txReceiveThread+0x102>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_WARNING, __func__, "RETRY>0x%x : %d\n", data->id,
					data->numTry);
#endif
		} else {
			data->track = SYNC_LAYER_CAN_TRANSMIT_FAILED;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2207      	movs	r2, #7
 8002832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			console(CONSOLE_ERROR, __func__, "RETRY EXCEEDS>0x%x\n", data->id);
#endif
		}
	}

	return isSuccess;
 8002836:	697b      	ldr	r3, [r7, #20]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <rxSendThread>:
/**
 * Receive thread for receiving should be called in thread continuously
 * @param link 	: Link where data is to be received
 * @param data	: Data that is to be received
 */
static int rxSendThread(SyncLayerCANLink *link, SyncLayerCANData *data) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b090      	sub	sp, #64	; 0x40
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	int isSuccess = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t id;
	uint8_t bytes[8];
	if (data->track == SYNC_LAYER_CAN_START_ACK) {
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002854:	2b01      	cmp	r3, #1
 8002856:	d122      	bne.n	800289e <rxSendThread+0x5e>
		isSuccess = 1;
 8002858:	2301      	movs	r3, #1
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
		id = link->startAckID;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
		*(uint32_t*) bytes = data->id;
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	601a      	str	r2, [r3, #0]
		*(uint16_t*) (&bytes[4]) = data->size;
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	3304      	adds	r3, #4
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	8912      	ldrh	r2, [r2, #8]
 8002876:	801a      	strh	r2, [r3, #0]
		bytes[6] = data->numTry;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	7a9b      	ldrb	r3, [r3, #10]
 800287c:	73bb      	strb	r3, [r7, #14]
		if (link->canSend(id, bytes, 8)) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f107 0108 	add.w	r1, r7, #8
 8002886:	2208      	movs	r2, #8
 8002888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288a:	4798      	blx	r3
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80e1 	beq.w	8002a56 <rxSendThread+0x216>
			data->track = SYNC_LAYER_CAN_DATA;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800289c:	e0db      	b.n	8002a56 <rxSendThread+0x216>
		else
			console(CONSOLE_WARNING, __func__,
					"START ACK> 0x%x : 0x%x, %d, %d (failed)\n", id,
					*(uint32_t*) bytes, *(uint16_t*) (&bytes[4]),bytes[6]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_END_ACK) {
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	f040 80d6 	bne.w	8002a56 <rxSendThread+0x216>
		isSuccess = 1;
 80028aa:	2301      	movs	r3, #1
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		id = link->endAckID;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
		*(uint32_t*) bytes = data->id;
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	601a      	str	r2, [r3, #0]

		uint8_t missingDataAvailable = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		int missingFrameIndex = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
		int totalFrame = data->size / 7 + (data->size % 7 != 0);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	891a      	ldrh	r2, [r3, #8]
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <rxSendThread+0x268>)
 80028ce:	fba3 1302 	umull	r1, r3, r3, r2
 80028d2:	1ad2      	subs	r2, r2, r3
 80028d4:	0852      	lsrs	r2, r2, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	891a      	ldrh	r2, [r3, #8]
 80028e2:	4b71      	ldr	r3, [pc, #452]	; (8002aa8 <rxSendThread+0x268>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	1ad1      	subs	r1, r2, r3
 80028ea:	0849      	lsrs	r1, r1, #1
 80028ec:	440b      	add	r3, r1
 80028ee:	0899      	lsrs	r1, r3, #2
 80028f0:	460b      	mov	r3, r1
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a5b      	subs	r3, r3, r1
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	bf14      	ite	ne
 80028fe:	2301      	movne	r3, #1
 8002900:	2300      	moveq	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4403      	add	r3, r0
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
		int totalGroupFrame = totalFrame / 8 + (totalFrame % 8 != 0);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	da00      	bge.n	8002910 <rxSendThread+0xd0>
 800290e:	3307      	adds	r3, #7
 8002910:	10db      	asrs	r3, r3, #3
 8002912:	461a      	mov	r2, r3
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf14      	ite	ne
 800291e:	2301      	movne	r3, #1
 8002920:	2300      	moveq	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4413      	add	r3, r2
 8002926:	623b      	str	r3, [r7, #32]
		for (int group = 0; group < totalGroupFrame; group++) {
 8002928:	2300      	movs	r3, #0
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
 800292c:	e031      	b.n	8002992 <rxSendThread+0x152>
			uint8_t record = data->frameRecords[group];
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	4413      	add	r3, r2
 8002934:	330c      	adds	r3, #12
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	77fb      	strb	r3, [r7, #31]
			int remFrame = totalFrame - (group * 8);
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	61bb      	str	r3, [r7, #24]
			int bitLen = (remFrame > 8) ? 8 : remFrame;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b08      	cmp	r3, #8
 8002948:	bfa8      	it	ge
 800294a:	2308      	movge	r3, #8
 800294c:	617b      	str	r3, [r7, #20]
			for (int bit = 0; bit < bitLen; bit++) {
 800294e:	2300      	movs	r3, #0
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002952:	e013      	b.n	800297c <rxSendThread+0x13c>
				if (!(record & (1 << bit))) {
 8002954:	7ffa      	ldrb	r2, [r7, #31]
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	fa42 f303 	asr.w	r3, r2, r3
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d108      	bne.n	8002976 <rxSendThread+0x136>
					missingDataAvailable = 1;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					missingFrameIndex = bit + 8 * group;
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002970:	4413      	add	r3, r2
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8002974:	e006      	b.n	8002984 <rxSendThread+0x144>
			for (int bit = 0; bit < bitLen; bit++) {
 8002976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002978:	3301      	adds	r3, #1
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	dbe7      	blt.n	8002954 <rxSendThread+0x114>
				}
			}
			if (missingDataAvailable)
 8002984:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002988:	2b00      	cmp	r3, #0
 800298a:	d107      	bne.n	800299c <rxSendThread+0x15c>
		for (int group = 0; group < totalGroupFrame; group++) {
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	3301      	adds	r3, #1
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
 8002992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	429a      	cmp	r2, r3
 8002998:	dbc9      	blt.n	800292e <rxSendThread+0xee>
 800299a:	e000      	b.n	800299e <rxSendThread+0x15e>
				break;
 800299c:	bf00      	nop
		}

		if (missingDataAvailable) {
 800299e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d013      	beq.n	80029ce <rxSendThread+0x18e>
			bytes[4] = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	733b      	strb	r3, [r7, #12]
			bytes[5] = missingFrameIndex;
 80029aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	737b      	strb	r3, [r7, #13]
			if (link->canSend(id, bytes, 8)) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f107 0108 	add.w	r1, r7, #8
 80029b8:	2208      	movs	r2, #8
 80029ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029bc:	4798      	blx	r3
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d048      	beq.n	8002a56 <rxSendThread+0x216>
				data->track = SYNC_LAYER_CAN_MISSING_DATA;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	2203      	movs	r2, #3
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80029cc:	e043      	b.n	8002a56 <rxSendThread+0x216>
				console(CONSOLE_WARNING, __func__,
						"END ACK> 0x%x : 0x%x, %d, %d, %d (failed)\n", id,
						*(uint32_t*) bytes, bytes[4], bytes[5], bytes[6]);
#endif
		} else {
			bytes[4] = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	733b      	strb	r3, [r7, #12]
			bytes[5] = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	737b      	strb	r3, [r7, #13]
			uint32_t crc = crc32_calculate(data->bytes, data->size);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	891b      	ldrh	r3, [r3, #8]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fadf 	bl	8002fa4 <crc32_calculate>
 80029e6:	6138      	str	r0, [r7, #16]
			data->doesCRCMatch = data->crc == crc;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			bytes[6] = data->doesCRCMatch;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a06:	73bb      	strb	r3, [r7, #14]

			if (link->canSend(id, bytes, 8)) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f107 0108 	add.w	r1, r7, #8
 8002a10:	2208      	movs	r2, #8
 8002a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a14:	4798      	blx	r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <rxSendThread+0x216>
				if (data->doesCRCMatch)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <rxSendThread+0x1f0>
					data->track = SYNC_LAYER_CAN_RECEIVE_SUCCESS;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2208      	movs	r2, #8
 8002a2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a2e:	e012      	b.n	8002a56 <rxSendThread+0x216>
#ifdef CONSOLE_ENABLE
					console(CONSOLE_WARNING, __func__,
							"CRC ERROR> 0x%x : 0x%x != 0x%x\n", data->id,
							data->crc, crc);
#endif
					data->numTry--;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	7a9b      	ldrb	r3, [r3, #10]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	729a      	strb	r2, [r3, #10]
					if (data->numTry > 0) {
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	7a9b      	ldrb	r3, [r3, #10]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <rxSendThread+0x20e>
						data->track = SYNC_LAYER_CAN_START_REQ;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a4c:	e003      	b.n	8002a56 <rxSendThread+0x216>
#ifdef CONSOLE_ENABLE
						console(CONSOLE_WARNING, __func__, "RETRY>0x%x, %d\n",
								data->id, data->numTry);
#endif
					} else {
						data->track = SYNC_LAYER_CAN_RECEIVE_FAILED;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2209      	movs	r2, #9
 8002a52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif
		}

	}

	if (isSuccess)
 8002a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <rxSendThread+0x22a>
		data->waitTill = getMillis() + RECEIVE_TIMEOUT;
 8002a5c:	f7ff fd4c 	bl	80024f8 <getMillis>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28

	if (getMillis() > data->waitTill) {
 8002a6a:	f7ff fd45 	bl	80024f8 <getMillis>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d912      	bls.n	8002a9e <rxSendThread+0x25e>
		data->numTry--;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	7a9b      	ldrb	r3, [r3, #10]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	729a      	strb	r2, [r3, #10]
		if (data->numTry > 0) {
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7a9b      	ldrb	r3, [r3, #10]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d004      	beq.n	8002a96 <rxSendThread+0x256>
			data->track = SYNC_LAYER_CAN_START_REQ;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a94:	e003      	b.n	8002a9e <rxSendThread+0x25e>
#ifdef CONSOLE_ENABLE
			console(CONSOLE_WARNING, __func__, "RETRY>0x%x, %d\n", data->id,
					data->numTry);
#endif
		} else {
			data->track = SYNC_LAYER_CAN_RECEIVE_FAILED;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2209      	movs	r2, #9
 8002a9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		console(CONSOLE_ERROR, __func__, "TIMEOUT>0x%x : %d > %d\n", data->id,
		RECEIVE_TIMEOUT, getMillis() - data->waitTill);
#endif
	}

	return isSuccess;
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3740      	adds	r7, #64	; 0x40
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	24924925 	.word	0x24924925

08002aac <rxReceiveThread>:
 * @param id	: CAN ID
 * @param bytes	: bytes received from CAN
 * @param len	: length of CAN bytes received
 */
static int rxReceiveThread(SyncLayerCANLink *link, SyncLayerCANData *data, uint32_t id,
		uint8_t *bytes, uint16_t len) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b090      	sub	sp, #64	; 0x40
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
	int isSuccess = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (data->track == SYNC_LAYER_CAN_START_REQ && id == link->startReqID) {
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11e      	bne.n	8002b06 <rxReceiveThread+0x5a>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d119      	bne.n	8002b06 <rxReceiveThread+0x5a>
		for (int i = 0; i < sizeof(data->frameRecords); i++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ad6:	e008      	b.n	8002aea <rxReceiveThread+0x3e>
			data->frameRecords[i] = 0;
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	4413      	add	r3, r2
 8002ade:	330c      	adds	r3, #12
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < sizeof(data->frameRecords); i++)
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aec:	2b12      	cmp	r3, #18
 8002aee:	d9f3      	bls.n	8002ad8 <rxReceiveThread+0x2c>
		isSuccess = 1;
 8002af0:	2301      	movs	r3, #1
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
		data->size = *(uint16_t*) (&bytes[4]);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	889a      	ldrh	r2, [r3, #4]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	811a      	strh	r2, [r3, #8]
		data->track = SYNC_LAYER_CAN_START_ACK;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b04:	e09a      	b.n	8002c3c <rxReceiveThread+0x190>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "START REQ>0x%x : 0x%x, %d, %d\n", id,
				*(uint32_t*) (bytes), *(uint16_t*) (&bytes[4]),bytes[6]);
#endif
	} else if (id == link->endReqID) {
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d10a      	bne.n	8002b26 <rxReceiveThread+0x7a>
		isSuccess = 1;
 8002b10:	2301      	movs	r3, #1
 8002b12:	63fb      	str	r3, [r7, #60]	; 0x3c
		data->crc = *(uint32_t*) (&bytes[4]);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	621a      	str	r2, [r3, #32]
		data->track = SYNC_LAYER_CAN_END_ACK;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2205      	movs	r2, #5
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b24:	e08a      	b.n	8002c3c <rxReceiveThread+0x190>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "END REQ>0x%x : 0x%x, 0x%x\n", id, id,
				*(uint32_t*) bytes, *(uint32_t*) (&bytes));
#endif
	} else if (data->track == SYNC_LAYER_CAN_DATA) {
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d13e      	bne.n	8002bae <rxReceiveThread+0x102>
		isSuccess = 1;
 8002b30:	2301      	movs	r3, #1
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t frameIndex = bytes[0];
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	77fb      	strb	r3, [r7, #31]
		int indexOffset = frameIndex * 7;
 8002b3a:	7ffa      	ldrb	r2, [r7, #31]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
		int recordIndex = frameIndex / 8;
 8002b44:	7ffb      	ldrb	r3, [r7, #31]
 8002b46:	08db      	lsrs	r3, r3, #3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	617b      	str	r3, [r7, #20]
		int bitIndex = frameIndex % 8;
 8002b4c:	7ffb      	ldrb	r3, [r7, #31]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	613b      	str	r3, [r7, #16]
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4413      	add	r3, r2
 8002b5a:	330c      	adds	r3, #12
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	b25a      	sxtb	r2, r3
				| (1 << bitIndex);
 8002b60:	2101      	movs	r1, #1
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	b2d9      	uxtb	r1, r3
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4413      	add	r3, r2
 8002b76:	330c      	adds	r3, #12
 8002b78:	460a      	mov	r2, r1
 8002b7a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b80:	e00e      	b.n	8002ba0 <rxReceiveThread+0xf4>
			data->bytes[indexOffset + i] = bytes[i + 1];
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	3301      	adds	r3, #1
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	441a      	add	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	69b8      	ldr	r0, [r7, #24]
 8002b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b92:	4401      	add	r1, r0
 8002b94:	440b      	add	r3, r1
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	dbea      	blt.n	8002b82 <rxReceiveThread+0xd6>
 8002bac:	e046      	b.n	8002c3c <rxReceiveThread+0x190>
#ifdef CONSOLE_ENABLE
		console(CONSOLE_INFO, __func__, "DATA>0x%x : %d, ...\n", id, bytes[0]);
#endif
	} else if (data->track == SYNC_LAYER_CAN_MISSING_DATA) {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d141      	bne.n	8002c3c <rxReceiveThread+0x190>
		isSuccess = 1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t frameIndex = bytes[0];
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		int indexOffset = frameIndex * 7;
 8002bc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
		int recordIndex = frameIndex / 8;
 8002bd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
		int bitIndex = frameIndex % 8;
 8002bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	623b      	str	r3, [r7, #32]
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8002be4:	68ba      	ldr	r2, [r7, #8]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	4413      	add	r3, r2
 8002bea:	330c      	adds	r3, #12
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	b25a      	sxtb	r2, r3
				| (1 << bitIndex);
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b25b      	sxtb	r3, r3
 8002bfe:	b2d9      	uxtb	r1, r3
		data->frameRecords[recordIndex] = data->frameRecords[recordIndex]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	4413      	add	r3, r2
 8002c06:	330c      	adds	r3, #12
 8002c08:	460a      	mov	r2, r1
 8002c0a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c10:	e00e      	b.n	8002c30 <rxReceiveThread+0x184>
			data->bytes[indexOffset + i] = bytes[i + 1];
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3301      	adds	r3, #1
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	441a      	add	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c22:	4401      	add	r1, r0
 8002c24:	440b      	add	r3, r1
 8002c26:	7812      	ldrb	r2, [r2, #0]
 8002c28:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len - 1; i++)
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c30:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c34:	3b01      	subs	r3, #1
 8002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dbea      	blt.n	8002c12 <rxReceiveThread+0x166>
		console(CONSOLE_INFO, __func__, "MISSING DATA>0x%x : %d, ...\n", id,
				bytes[0]);
#endif
	}

	if (isSuccess)
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <rxReceiveThread+0x1a4>
		data->waitTill = getMillis() + TRANSMIT_TIMEOUT;
 8002c42:	f7ff fc59 	bl	80024f8 <getMillis>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

	return isSuccess;
 8002c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3740      	adds	r7, #64	; 0x40
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <canInit>:
SyncLayerCANLink link;
SyncLayerCANData data;


extern CAN_HandleTypeDef hcan;
static void canInit() {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	; 0x28
 8002c60:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can_filter;

	can_filter.FilterActivation = CAN_FILTER_ENABLE;
 8002c62:	2301      	movs	r3, #1
 8002c64:	623b      	str	r3, [r7, #32]
	can_filter.FilterBank = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
	can_filter.FilterIdHigh = 0x0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
	can_filter.FilterIdLow = 0x0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
	can_filter.FilterMaskIdHigh = 0x0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
	can_filter.FilterMaskIdLow = 0x0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61bb      	str	r3, [r7, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
	can_filter.SlaveStartFilterBank = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan, &can_filter);
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4812      	ldr	r0, [pc, #72]	; (8002cd8 <canInit+0x7c>)
 8002c90:	f7fd fe69 	bl	8000966 <HAL_CAN_ConfigFilter>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8002c94:	2102      	movs	r1, #2
 8002c96:	4810      	ldr	r0, [pc, #64]	; (8002cd8 <canInit+0x7c>)
 8002c98:	f7fe f962 	bl	8000f60 <HAL_CAN_ActivateNotification>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <canInit+0x4c>
			!= HAL_OK)
		printf("CAN RX Interrupt Activate : Failed\n");
 8002ca2:	480e      	ldr	r0, [pc, #56]	; (8002cdc <canInit+0x80>)
 8002ca4:	f000 fa5e 	bl	8003164 <puts>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8002ca8:	2101      	movs	r1, #1
 8002caa:	480b      	ldr	r0, [pc, #44]	; (8002cd8 <canInit+0x7c>)
 8002cac:	f7fe f958 	bl	8000f60 <HAL_CAN_ActivateNotification>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <canInit+0x60>
		printf("CAN TX Interrupt Activate : Failed\n");
 8002cb6:	480a      	ldr	r0, [pc, #40]	; (8002ce0 <canInit+0x84>)
 8002cb8:	f000 fa54 	bl	8003164 <puts>
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002cbc:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <canInit+0x7c>)
 8002cbe:	f7fd ff1b 	bl	8000af8 <HAL_CAN_Start>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <canInit+0x72>
		printf("CAN Start : Failed\n");
 8002cc8:	4806      	ldr	r0, [pc, #24]	; (8002ce4 <canInit+0x88>)
 8002cca:	f000 fa4b 	bl	8003164 <puts>
}
 8002cce:	bf00      	nop
 8002cd0:	3728      	adds	r7, #40	; 0x28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000049c 	.word	0x2000049c
 8002cdc:	08004114 	.word	0x08004114
 8002ce0:	08004138 	.word	0x08004138
 8002ce4:	0800415c 	.word	0x0800415c

08002ce8 <canInterrupt>:

static CAN_RxHeaderTypeDef rx_header;
static uint8_t bytes[8];
void canInterrupt() {
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af02      	add	r7, sp, #8
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rx_header, bytes);
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <canInterrupt+0x34>)
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <canInterrupt+0x38>)
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	480b      	ldr	r0, [pc, #44]	; (8002d24 <canInterrupt+0x3c>)
 8002cf6:	f7fe f812 	bl	8000d1e <HAL_CAN_GetRxMessage>
//	printf("Interrupt-> 0x%02x : ", (unsigned int) rx_header.ExtId);
//	for (int i = 0; i < rx_header.DLC; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");
	StaticSyncLayerCan.txReceiveThread(&link, &data, rx_header.ExtId, bytes, rx_header.DLC);
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <canInterrupt+0x40>)
 8002cfc:	685c      	ldr	r4, [r3, #4]
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <canInterrupt+0x38>)
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <canInterrupt+0x38>)
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <canInterrupt+0x34>)
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <canInterrupt+0x44>)
 8002d0e:	4808      	ldr	r0, [pc, #32]	; (8002d30 <canInterrupt+0x48>)
 8002d10:	47a0      	blx	r4
//	StaticSyncLayerCan.rxReceiveThread(&link, &data, rx_header.ExtId, bytes, rx_header.DLC);

}
 8002d12:	bf00      	nop
 8002d14:	3704      	adds	r7, #4
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000574 	.word	0x20000574
 8002d20:	20000558 	.word	0x20000558
 8002d24:	2000049c 	.word	0x2000049c
 8002d28:	2000000c 	.word	0x2000000c
 8002d2c:	20000528 	.word	0x20000528
 8002d30:	20000514 	.word	0x20000514

08002d34 <canSend>:

static CAN_TxHeaderTypeDef tx_header;
static uint32_t tx_mailbox;
static int canSend(uint32_t id, uint8_t *bytes, uint8_t len) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]
	tx_header.DLC = len;
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <canSend+0x4c>)
 8002d46:	6113      	str	r3, [r2, #16]
	tx_header.ExtId = id;
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <canSend+0x4c>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6053      	str	r3, [r2, #4]
	tx_header.IDE = CAN_ID_EXT;
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <canSend+0x4c>)
 8002d50:	2204      	movs	r2, #4
 8002d52:	609a      	str	r2, [r3, #8]
	tx_header.RTR = CAN_RTR_DATA;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <canSend+0x4c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
	tx_header.TransmitGlobalTime = DISABLE;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <canSend+0x4c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	751a      	strb	r2, [r3, #20]

//	printf("canSend-> 0x%02x : ", (unsigned int) id);
//	for (int i = 0; i < len; ++i)
//		printf("%d ", bytes[i]);
//	printf("\n");
	return HAL_CAN_AddTxMessage(&hcan, &tx_header, bytes, &tx_mailbox) == HAL_OK;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <canSend+0x50>)
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	4906      	ldr	r1, [pc, #24]	; (8002d80 <canSend+0x4c>)
 8002d66:	4808      	ldr	r0, [pc, #32]	; (8002d88 <canSend+0x54>)
 8002d68:	f7fd ff0a 	bl	8000b80 <HAL_CAN_AddTxMessage>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf0c      	ite	eq
 8002d72:	2301      	moveq	r3, #1
 8002d74:	2300      	movne	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	2000057c 	.word	0x2000057c
 8002d84:	20000594 	.word	0x20000594
 8002d88:	2000049c 	.word	0x2000049c

08002d8c <txCallback>:

void txCallback(uint32_t id, uint8_t *bytes, uint16_t size, uint8_t status) {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	717b      	strb	r3, [r7, #5]
	printf("TX|0x%0x>", (int) id);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4619      	mov	r1, r3
 8002da6:	4810      	ldr	r0, [pc, #64]	; (8002de8 <txCallback+0x5c>)
 8002da8:	f000 f942 	bl	8003030 <iprintf>
	for (int i = 0; i < 8; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e00a      	b.n	8002dc8 <txCallback+0x3c>
		printf(" %d ", bytes[i]);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <txCallback+0x60>)
 8002dbe:	f000 f937 	bl	8003030 <iprintf>
	for (int i = 0; i < 8; i++)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	ddf1      	ble.n	8002db2 <txCallback+0x26>
	if (!status) {
 8002dce:	797b      	ldrb	r3, [r7, #5]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <txCallback+0x50>
		printf("(failed)\n");
 8002dd4:	4806      	ldr	r0, [pc, #24]	; (8002df0 <txCallback+0x64>)
 8002dd6:	f000 f9c5 	bl	8003164 <puts>
		return;
 8002dda:	e002      	b.n	8002de2 <txCallback+0x56>
	}
	printf("\n");
 8002ddc:	200a      	movs	r0, #10
 8002dde:	f000 f93f 	bl	8003060 <putchar>
}
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	08004170 	.word	0x08004170
 8002dec:	0800417c 	.word	0x0800417c
 8002df0:	08004184 	.word	0x08004184

08002df4 <runTx>:

uint8_t tx_bytes[70];
void runTx() {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
	canInit();
 8002dfa:	f7ff ff2f 	bl	8002c5c <canInit>

	for (int i = 0; i < sizeof(tx_bytes); i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	e009      	b.n	8002e18 <runTx+0x24>
		tx_bytes[i] = i;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	b2d9      	uxtb	r1, r3
 8002e08:	4a2f      	ldr	r2, [pc, #188]	; (8002ec8 <runTx+0xd4>)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	460a      	mov	r2, r1
 8002e10:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(tx_bytes); i++)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3301      	adds	r3, #1
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b45      	cmp	r3, #69	; 0x45
 8002e1c:	d9f2      	bls.n	8002e04 <runTx+0x10>

/////////link////////////
	link.startReqID = 0x1;
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <runTx+0xd8>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
	link.startAckID = 0x2;
 8002e24:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <runTx+0xd8>)
 8002e26:	2202      	movs	r2, #2
 8002e28:	605a      	str	r2, [r3, #4]
	link.endReqID = 0x3;
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <runTx+0xd8>)
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	609a      	str	r2, [r3, #8]
	link.endAckID = 0x4;
 8002e30:	4b26      	ldr	r3, [pc, #152]	; (8002ecc <runTx+0xd8>)
 8002e32:	2204      	movs	r2, #4
 8002e34:	60da      	str	r2, [r3, #12]
	link.canSend = canSend;
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <runTx+0xd8>)
 8002e38:	4a25      	ldr	r2, [pc, #148]	; (8002ed0 <runTx+0xdc>)
 8002e3a:	611a      	str	r2, [r3, #16]

/////////data//////////////
	data.id = 0xA;
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <runTx+0xe0>)
 8002e3e:	220a      	movs	r2, #10
 8002e40:	601a      	str	r2, [r3, #0]
	data.bytes = tx_bytes;
 8002e42:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <runTx+0xe0>)
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <runTx+0xd4>)
 8002e46:	605a      	str	r2, [r3, #4]
	data.size = sizeof(tx_bytes);
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <runTx+0xe0>)
 8002e4a:	2246      	movs	r2, #70	; 0x46
 8002e4c:	811a      	strh	r2, [r3, #8]
	data.numTry = 2;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <runTx+0xe0>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	729a      	strb	r2, [r3, #10]
	data.track = SYNC_LAYER_CAN_START_REQ;
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <runTx+0xe0>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	data.waitTill = HAL_MAX_DELAY;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <runTx+0xe0>)
 8002e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

	printf("----------------------INITIATING-----------------------\n");
 8002e64:	481c      	ldr	r0, [pc, #112]	; (8002ed8 <runTx+0xe4>)
 8002e66:	f000 f97d 	bl	8003164 <puts>
	HAL_Delay(1000);
 8002e6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e6e:	f7fd fc5b 	bl	8000728 <HAL_Delay>

	while (1) {
		if (data.track == SYNC_LAYER_CAN_TRANSMIT_SUCCESS) {
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <runTx+0xe0>)
 8002e74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e78:	2b06      	cmp	r3, #6
 8002e7a:	d10d      	bne.n	8002e98 <runTx+0xa4>
			txCallback(data.id, data.bytes, data.size, 1);
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <runTx+0xe0>)
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <runTx+0xe0>)
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <runTx+0xe0>)
 8002e86:	891a      	ldrh	r2, [r3, #8]
 8002e88:	2301      	movs	r3, #1
 8002e8a:	f7ff ff7f 	bl	8002d8c <txCallback>
			data.track = SYNC_LAYER_CAN_START_REQ;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <runTx+0xe0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e96:	e011      	b.n	8002ebc <runTx+0xc8>
		} else if (data.track == SYNC_LAYER_CAN_TRANSMIT_FAILED) {
 8002e98:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <runTx+0xe0>)
 8002e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e9e:	2b07      	cmp	r3, #7
 8002ea0:	d10c      	bne.n	8002ebc <runTx+0xc8>
			txCallback(data.id, data.bytes, data.size, 0);
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <runTx+0xe0>)
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <runTx+0xe0>)
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <runTx+0xe0>)
 8002eac:	891a      	ldrh	r2, [r3, #8]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	f7ff ff6c 	bl	8002d8c <txCallback>
			data.track = SYNC_LAYER_CAN_START_REQ;
 8002eb4:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <runTx+0xe0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		StaticSyncLayerCan.txSendThread(&link, &data);
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <runTx+0xe8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4904      	ldr	r1, [pc, #16]	; (8002ed4 <runTx+0xe0>)
 8002ec2:	4802      	ldr	r0, [pc, #8]	; (8002ecc <runTx+0xd8>)
 8002ec4:	4798      	blx	r3
		if (data.track == SYNC_LAYER_CAN_TRANSMIT_SUCCESS) {
 8002ec6:	e7d4      	b.n	8002e72 <runTx+0x7e>
 8002ec8:	20000598 	.word	0x20000598
 8002ecc:	20000514 	.word	0x20000514
 8002ed0:	08002d35 	.word	0x08002d35
 8002ed4:	20000528 	.word	0x20000528
 8002ed8:	08004190 	.word	0x08004190
 8002edc:	2000000c 	.word	0x2000000c

08002ee0 <crc_init>:
    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4
};
static uint32_t crc_value;
void crc_init(void){
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
    crc_value=0xFFFFFFFF;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <crc_init+0x14>)
 8002ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	200005e0 	.word	0x200005e0

08002ef8 <crc32_accumulate>:
uint32_t crc32_accumulate(uint8_t *bytes,uint32_t len){
 8002ef8:	b480      	push	{r7}
 8002efa:	b089      	sub	sp, #36	; 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    uint32_t crc = crc_value;
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <crc32_accumulate+0xa4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	61fb      	str	r3, [r7, #28]
    uint32_t limit = len/4+(len%4>0?1:0);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	f002 0203 	and.w	r2, r2, #3
 8002f12:	2a00      	cmp	r2, #0
 8002f14:	d001      	beq.n	8002f1a <crc32_accumulate+0x22>
 8002f16:	2201      	movs	r2, #1
 8002f18:	e000      	b.n	8002f1c <crc32_accumulate+0x24>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	4413      	add	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
    for(int i=0;i<limit;i++){
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e02d      	b.n	8002f82 <crc32_accumulate+0x8a>
        for(int j=3;j>=0;j--){
 8002f26:	2303      	movs	r3, #3
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	e024      	b.n	8002f76 <crc32_accumulate+0x7e>
            uint32_t count = (4*i+j);
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	009a      	lsls	r2, r3, #2
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
            if(count<len)
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d20f      	bcs.n	8002f5e <crc32_accumulate+0x66>
                crc = (crc<<8) ^ table[(((crc>>24)^bytes[count]) & 0xff)];
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	0e1b      	lsrs	r3, r3, #24
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	4401      	add	r1, r0
 8002f4c:	7809      	ldrb	r1, [r1, #0]
 8002f4e:	404b      	eors	r3, r1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	4913      	ldr	r1, [pc, #76]	; (8002fa0 <crc32_accumulate+0xa8>)
 8002f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f58:	4053      	eors	r3, r2
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	e008      	b.n	8002f70 <crc32_accumulate+0x78>
            else
                crc = (crc<<8) ^ table[((crc>>24) & 0xff)];
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	021a      	lsls	r2, r3, #8
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	0e1b      	lsrs	r3, r3, #24
 8002f66:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <crc32_accumulate+0xa8>)
 8002f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f6c:	4053      	eors	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
        for(int j=3;j>=0;j--){
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dad7      	bge.n	8002f2c <crc32_accumulate+0x34>
    for(int i=0;i<limit;i++){
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d8cd      	bhi.n	8002f26 <crc32_accumulate+0x2e>
        }
    }
    crc_value = crc;
 8002f8a:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <crc32_accumulate+0xa4>)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	6013      	str	r3, [r2, #0]
    return crc;
 8002f90:	69fb      	ldr	r3, [r7, #28]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	200005e0 	.word	0x200005e0
 8002fa0:	2000001c 	.word	0x2000001c

08002fa4 <crc32_calculate>:
uint32_t crc32_calculate(uint8_t *bytes,uint32_t len){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
    crc_init();
 8002fae:	f7ff ff97 	bl	8002ee0 <crc_init>
    crc32_accumulate(bytes,len);
 8002fb2:	6839      	ldr	r1, [r7, #0]
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff9f 	bl	8002ef8 <crc32_accumulate>
    return crc_value;
 8002fba:	4b03      	ldr	r3, [pc, #12]	; (8002fc8 <crc32_calculate+0x24>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200005e0 	.word	0x200005e0

08002fcc <__errno>:
 8002fcc:	4b01      	ldr	r3, [pc, #4]	; (8002fd4 <__errno+0x8>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	2000041c 	.word	0x2000041c

08002fd8 <__libc_init_array>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	2600      	movs	r6, #0
 8002fdc:	4d0c      	ldr	r5, [pc, #48]	; (8003010 <__libc_init_array+0x38>)
 8002fde:	4c0d      	ldr	r4, [pc, #52]	; (8003014 <__libc_init_array+0x3c>)
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	42a6      	cmp	r6, r4
 8002fe6:	d109      	bne.n	8002ffc <__libc_init_array+0x24>
 8002fe8:	f001 f888 	bl	80040fc <_init>
 8002fec:	2600      	movs	r6, #0
 8002fee:	4d0a      	ldr	r5, [pc, #40]	; (8003018 <__libc_init_array+0x40>)
 8002ff0:	4c0a      	ldr	r4, [pc, #40]	; (800301c <__libc_init_array+0x44>)
 8002ff2:	1b64      	subs	r4, r4, r5
 8002ff4:	10a4      	asrs	r4, r4, #2
 8002ff6:	42a6      	cmp	r6, r4
 8002ff8:	d105      	bne.n	8003006 <__libc_init_array+0x2e>
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003000:	4798      	blx	r3
 8003002:	3601      	adds	r6, #1
 8003004:	e7ee      	b.n	8002fe4 <__libc_init_array+0xc>
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	4798      	blx	r3
 800300c:	3601      	adds	r6, #1
 800300e:	e7f2      	b.n	8002ff6 <__libc_init_array+0x1e>
 8003010:	080042cc 	.word	0x080042cc
 8003014:	080042cc 	.word	0x080042cc
 8003018:	080042cc 	.word	0x080042cc
 800301c:	080042d0 	.word	0x080042d0

08003020 <memset>:
 8003020:	4603      	mov	r3, r0
 8003022:	4402      	add	r2, r0
 8003024:	4293      	cmp	r3, r2
 8003026:	d100      	bne.n	800302a <memset+0xa>
 8003028:	4770      	bx	lr
 800302a:	f803 1b01 	strb.w	r1, [r3], #1
 800302e:	e7f9      	b.n	8003024 <memset+0x4>

08003030 <iprintf>:
 8003030:	b40f      	push	{r0, r1, r2, r3}
 8003032:	4b0a      	ldr	r3, [pc, #40]	; (800305c <iprintf+0x2c>)
 8003034:	b513      	push	{r0, r1, r4, lr}
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	b124      	cbz	r4, 8003044 <iprintf+0x14>
 800303a:	69a3      	ldr	r3, [r4, #24]
 800303c:	b913      	cbnz	r3, 8003044 <iprintf+0x14>
 800303e:	4620      	mov	r0, r4
 8003040:	f000 fa6e 	bl	8003520 <__sinit>
 8003044:	ab05      	add	r3, sp, #20
 8003046:	4620      	mov	r0, r4
 8003048:	9a04      	ldr	r2, [sp, #16]
 800304a:	68a1      	ldr	r1, [r4, #8]
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	f000 fc71 	bl	8003934 <_vfiprintf_r>
 8003052:	b002      	add	sp, #8
 8003054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003058:	b004      	add	sp, #16
 800305a:	4770      	bx	lr
 800305c:	2000041c 	.word	0x2000041c

08003060 <putchar>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <putchar+0x24>)
 8003064:	4605      	mov	r5, r0
 8003066:	681c      	ldr	r4, [r3, #0]
 8003068:	b124      	cbz	r4, 8003074 <putchar+0x14>
 800306a:	69a3      	ldr	r3, [r4, #24]
 800306c:	b913      	cbnz	r3, 8003074 <putchar+0x14>
 800306e:	4620      	mov	r0, r4
 8003070:	f000 fa56 	bl	8003520 <__sinit>
 8003074:	4629      	mov	r1, r5
 8003076:	4620      	mov	r0, r4
 8003078:	68a2      	ldr	r2, [r4, #8]
 800307a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800307e:	f000 bf1f 	b.w	8003ec0 <_putc_r>
 8003082:	bf00      	nop
 8003084:	2000041c 	.word	0x2000041c

08003088 <_puts_r>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	460e      	mov	r6, r1
 800308c:	4605      	mov	r5, r0
 800308e:	b118      	cbz	r0, 8003098 <_puts_r+0x10>
 8003090:	6983      	ldr	r3, [r0, #24]
 8003092:	b90b      	cbnz	r3, 8003098 <_puts_r+0x10>
 8003094:	f000 fa44 	bl	8003520 <__sinit>
 8003098:	69ab      	ldr	r3, [r5, #24]
 800309a:	68ac      	ldr	r4, [r5, #8]
 800309c:	b913      	cbnz	r3, 80030a4 <_puts_r+0x1c>
 800309e:	4628      	mov	r0, r5
 80030a0:	f000 fa3e 	bl	8003520 <__sinit>
 80030a4:	4b2c      	ldr	r3, [pc, #176]	; (8003158 <_puts_r+0xd0>)
 80030a6:	429c      	cmp	r4, r3
 80030a8:	d120      	bne.n	80030ec <_puts_r+0x64>
 80030aa:	686c      	ldr	r4, [r5, #4]
 80030ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ae:	07db      	lsls	r3, r3, #31
 80030b0:	d405      	bmi.n	80030be <_puts_r+0x36>
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	0598      	lsls	r0, r3, #22
 80030b6:	d402      	bmi.n	80030be <_puts_r+0x36>
 80030b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030ba:	f000 facf 	bl	800365c <__retarget_lock_acquire_recursive>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	0719      	lsls	r1, r3, #28
 80030c2:	d51d      	bpl.n	8003100 <_puts_r+0x78>
 80030c4:	6923      	ldr	r3, [r4, #16]
 80030c6:	b1db      	cbz	r3, 8003100 <_puts_r+0x78>
 80030c8:	3e01      	subs	r6, #1
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80030d0:	3b01      	subs	r3, #1
 80030d2:	60a3      	str	r3, [r4, #8]
 80030d4:	bb39      	cbnz	r1, 8003126 <_puts_r+0x9e>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da38      	bge.n	800314c <_puts_r+0xc4>
 80030da:	4622      	mov	r2, r4
 80030dc:	210a      	movs	r1, #10
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f848 	bl	8003174 <__swbuf_r>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d011      	beq.n	800310c <_puts_r+0x84>
 80030e8:	250a      	movs	r5, #10
 80030ea:	e011      	b.n	8003110 <_puts_r+0x88>
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <_puts_r+0xd4>)
 80030ee:	429c      	cmp	r4, r3
 80030f0:	d101      	bne.n	80030f6 <_puts_r+0x6e>
 80030f2:	68ac      	ldr	r4, [r5, #8]
 80030f4:	e7da      	b.n	80030ac <_puts_r+0x24>
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <_puts_r+0xd8>)
 80030f8:	429c      	cmp	r4, r3
 80030fa:	bf08      	it	eq
 80030fc:	68ec      	ldreq	r4, [r5, #12]
 80030fe:	e7d5      	b.n	80030ac <_puts_r+0x24>
 8003100:	4621      	mov	r1, r4
 8003102:	4628      	mov	r0, r5
 8003104:	f000 f888 	bl	8003218 <__swsetup_r>
 8003108:	2800      	cmp	r0, #0
 800310a:	d0dd      	beq.n	80030c8 <_puts_r+0x40>
 800310c:	f04f 35ff 	mov.w	r5, #4294967295
 8003110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003112:	07da      	lsls	r2, r3, #31
 8003114:	d405      	bmi.n	8003122 <_puts_r+0x9a>
 8003116:	89a3      	ldrh	r3, [r4, #12]
 8003118:	059b      	lsls	r3, r3, #22
 800311a:	d402      	bmi.n	8003122 <_puts_r+0x9a>
 800311c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800311e:	f000 fa9e 	bl	800365e <__retarget_lock_release_recursive>
 8003122:	4628      	mov	r0, r5
 8003124:	bd70      	pop	{r4, r5, r6, pc}
 8003126:	2b00      	cmp	r3, #0
 8003128:	da04      	bge.n	8003134 <_puts_r+0xac>
 800312a:	69a2      	ldr	r2, [r4, #24]
 800312c:	429a      	cmp	r2, r3
 800312e:	dc06      	bgt.n	800313e <_puts_r+0xb6>
 8003130:	290a      	cmp	r1, #10
 8003132:	d004      	beq.n	800313e <_puts_r+0xb6>
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	6022      	str	r2, [r4, #0]
 800313a:	7019      	strb	r1, [r3, #0]
 800313c:	e7c5      	b.n	80030ca <_puts_r+0x42>
 800313e:	4622      	mov	r2, r4
 8003140:	4628      	mov	r0, r5
 8003142:	f000 f817 	bl	8003174 <__swbuf_r>
 8003146:	3001      	adds	r0, #1
 8003148:	d1bf      	bne.n	80030ca <_puts_r+0x42>
 800314a:	e7df      	b.n	800310c <_puts_r+0x84>
 800314c:	250a      	movs	r5, #10
 800314e:	6823      	ldr	r3, [r4, #0]
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	6022      	str	r2, [r4, #0]
 8003154:	701d      	strb	r5, [r3, #0]
 8003156:	e7db      	b.n	8003110 <_puts_r+0x88>
 8003158:	08004258 	.word	0x08004258
 800315c:	08004278 	.word	0x08004278
 8003160:	08004238 	.word	0x08004238

08003164 <puts>:
 8003164:	4b02      	ldr	r3, [pc, #8]	; (8003170 <puts+0xc>)
 8003166:	4601      	mov	r1, r0
 8003168:	6818      	ldr	r0, [r3, #0]
 800316a:	f7ff bf8d 	b.w	8003088 <_puts_r>
 800316e:	bf00      	nop
 8003170:	2000041c 	.word	0x2000041c

08003174 <__swbuf_r>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	460e      	mov	r6, r1
 8003178:	4614      	mov	r4, r2
 800317a:	4605      	mov	r5, r0
 800317c:	b118      	cbz	r0, 8003186 <__swbuf_r+0x12>
 800317e:	6983      	ldr	r3, [r0, #24]
 8003180:	b90b      	cbnz	r3, 8003186 <__swbuf_r+0x12>
 8003182:	f000 f9cd 	bl	8003520 <__sinit>
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <__swbuf_r+0x98>)
 8003188:	429c      	cmp	r4, r3
 800318a:	d12b      	bne.n	80031e4 <__swbuf_r+0x70>
 800318c:	686c      	ldr	r4, [r5, #4]
 800318e:	69a3      	ldr	r3, [r4, #24]
 8003190:	60a3      	str	r3, [r4, #8]
 8003192:	89a3      	ldrh	r3, [r4, #12]
 8003194:	071a      	lsls	r2, r3, #28
 8003196:	d52f      	bpl.n	80031f8 <__swbuf_r+0x84>
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	b36b      	cbz	r3, 80031f8 <__swbuf_r+0x84>
 800319c:	6923      	ldr	r3, [r4, #16]
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	b2f6      	uxtb	r6, r6
 80031a2:	1ac0      	subs	r0, r0, r3
 80031a4:	6963      	ldr	r3, [r4, #20]
 80031a6:	4637      	mov	r7, r6
 80031a8:	4283      	cmp	r3, r0
 80031aa:	dc04      	bgt.n	80031b6 <__swbuf_r+0x42>
 80031ac:	4621      	mov	r1, r4
 80031ae:	4628      	mov	r0, r5
 80031b0:	f000 f922 	bl	80033f8 <_fflush_r>
 80031b4:	bb30      	cbnz	r0, 8003204 <__swbuf_r+0x90>
 80031b6:	68a3      	ldr	r3, [r4, #8]
 80031b8:	3001      	adds	r0, #1
 80031ba:	3b01      	subs	r3, #1
 80031bc:	60a3      	str	r3, [r4, #8]
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	6022      	str	r2, [r4, #0]
 80031c4:	701e      	strb	r6, [r3, #0]
 80031c6:	6963      	ldr	r3, [r4, #20]
 80031c8:	4283      	cmp	r3, r0
 80031ca:	d004      	beq.n	80031d6 <__swbuf_r+0x62>
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	07db      	lsls	r3, r3, #31
 80031d0:	d506      	bpl.n	80031e0 <__swbuf_r+0x6c>
 80031d2:	2e0a      	cmp	r6, #10
 80031d4:	d104      	bne.n	80031e0 <__swbuf_r+0x6c>
 80031d6:	4621      	mov	r1, r4
 80031d8:	4628      	mov	r0, r5
 80031da:	f000 f90d 	bl	80033f8 <_fflush_r>
 80031de:	b988      	cbnz	r0, 8003204 <__swbuf_r+0x90>
 80031e0:	4638      	mov	r0, r7
 80031e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <__swbuf_r+0x9c>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	d101      	bne.n	80031ee <__swbuf_r+0x7a>
 80031ea:	68ac      	ldr	r4, [r5, #8]
 80031ec:	e7cf      	b.n	800318e <__swbuf_r+0x1a>
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <__swbuf_r+0xa0>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	bf08      	it	eq
 80031f4:	68ec      	ldreq	r4, [r5, #12]
 80031f6:	e7ca      	b.n	800318e <__swbuf_r+0x1a>
 80031f8:	4621      	mov	r1, r4
 80031fa:	4628      	mov	r0, r5
 80031fc:	f000 f80c 	bl	8003218 <__swsetup_r>
 8003200:	2800      	cmp	r0, #0
 8003202:	d0cb      	beq.n	800319c <__swbuf_r+0x28>
 8003204:	f04f 37ff 	mov.w	r7, #4294967295
 8003208:	e7ea      	b.n	80031e0 <__swbuf_r+0x6c>
 800320a:	bf00      	nop
 800320c:	08004258 	.word	0x08004258
 8003210:	08004278 	.word	0x08004278
 8003214:	08004238 	.word	0x08004238

08003218 <__swsetup_r>:
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <__swsetup_r+0xcc>)
 800321a:	b570      	push	{r4, r5, r6, lr}
 800321c:	681d      	ldr	r5, [r3, #0]
 800321e:	4606      	mov	r6, r0
 8003220:	460c      	mov	r4, r1
 8003222:	b125      	cbz	r5, 800322e <__swsetup_r+0x16>
 8003224:	69ab      	ldr	r3, [r5, #24]
 8003226:	b913      	cbnz	r3, 800322e <__swsetup_r+0x16>
 8003228:	4628      	mov	r0, r5
 800322a:	f000 f979 	bl	8003520 <__sinit>
 800322e:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <__swsetup_r+0xd0>)
 8003230:	429c      	cmp	r4, r3
 8003232:	d10f      	bne.n	8003254 <__swsetup_r+0x3c>
 8003234:	686c      	ldr	r4, [r5, #4]
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800323c:	0719      	lsls	r1, r3, #28
 800323e:	d42c      	bmi.n	800329a <__swsetup_r+0x82>
 8003240:	06dd      	lsls	r5, r3, #27
 8003242:	d411      	bmi.n	8003268 <__swsetup_r+0x50>
 8003244:	2309      	movs	r3, #9
 8003246:	6033      	str	r3, [r6, #0]
 8003248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	81a3      	strh	r3, [r4, #12]
 8003252:	e03e      	b.n	80032d2 <__swsetup_r+0xba>
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <__swsetup_r+0xd4>)
 8003256:	429c      	cmp	r4, r3
 8003258:	d101      	bne.n	800325e <__swsetup_r+0x46>
 800325a:	68ac      	ldr	r4, [r5, #8]
 800325c:	e7eb      	b.n	8003236 <__swsetup_r+0x1e>
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <__swsetup_r+0xd8>)
 8003260:	429c      	cmp	r4, r3
 8003262:	bf08      	it	eq
 8003264:	68ec      	ldreq	r4, [r5, #12]
 8003266:	e7e6      	b.n	8003236 <__swsetup_r+0x1e>
 8003268:	0758      	lsls	r0, r3, #29
 800326a:	d512      	bpl.n	8003292 <__swsetup_r+0x7a>
 800326c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800326e:	b141      	cbz	r1, 8003282 <__swsetup_r+0x6a>
 8003270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003274:	4299      	cmp	r1, r3
 8003276:	d002      	beq.n	800327e <__swsetup_r+0x66>
 8003278:	4630      	mov	r0, r6
 800327a:	f000 fa57 	bl	800372c <_free_r>
 800327e:	2300      	movs	r3, #0
 8003280:	6363      	str	r3, [r4, #52]	; 0x34
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	2300      	movs	r3, #0
 800328c:	6063      	str	r3, [r4, #4]
 800328e:	6923      	ldr	r3, [r4, #16]
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	f043 0308 	orr.w	r3, r3, #8
 8003298:	81a3      	strh	r3, [r4, #12]
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	b94b      	cbnz	r3, 80032b2 <__swsetup_r+0x9a>
 800329e:	89a3      	ldrh	r3, [r4, #12]
 80032a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a8:	d003      	beq.n	80032b2 <__swsetup_r+0x9a>
 80032aa:	4621      	mov	r1, r4
 80032ac:	4630      	mov	r0, r6
 80032ae:	f000 f9fd 	bl	80036ac <__smakebuf_r>
 80032b2:	89a0      	ldrh	r0, [r4, #12]
 80032b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032b8:	f010 0301 	ands.w	r3, r0, #1
 80032bc:	d00a      	beq.n	80032d4 <__swsetup_r+0xbc>
 80032be:	2300      	movs	r3, #0
 80032c0:	60a3      	str	r3, [r4, #8]
 80032c2:	6963      	ldr	r3, [r4, #20]
 80032c4:	425b      	negs	r3, r3
 80032c6:	61a3      	str	r3, [r4, #24]
 80032c8:	6923      	ldr	r3, [r4, #16]
 80032ca:	b943      	cbnz	r3, 80032de <__swsetup_r+0xc6>
 80032cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032d0:	d1ba      	bne.n	8003248 <__swsetup_r+0x30>
 80032d2:	bd70      	pop	{r4, r5, r6, pc}
 80032d4:	0781      	lsls	r1, r0, #30
 80032d6:	bf58      	it	pl
 80032d8:	6963      	ldrpl	r3, [r4, #20]
 80032da:	60a3      	str	r3, [r4, #8]
 80032dc:	e7f4      	b.n	80032c8 <__swsetup_r+0xb0>
 80032de:	2000      	movs	r0, #0
 80032e0:	e7f7      	b.n	80032d2 <__swsetup_r+0xba>
 80032e2:	bf00      	nop
 80032e4:	2000041c 	.word	0x2000041c
 80032e8:	08004258 	.word	0x08004258
 80032ec:	08004278 	.word	0x08004278
 80032f0:	08004238 	.word	0x08004238

080032f4 <__sflush_r>:
 80032f4:	898a      	ldrh	r2, [r1, #12]
 80032f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f8:	4605      	mov	r5, r0
 80032fa:	0710      	lsls	r0, r2, #28
 80032fc:	460c      	mov	r4, r1
 80032fe:	d457      	bmi.n	80033b0 <__sflush_r+0xbc>
 8003300:	684b      	ldr	r3, [r1, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	dc04      	bgt.n	8003310 <__sflush_r+0x1c>
 8003306:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	dc01      	bgt.n	8003310 <__sflush_r+0x1c>
 800330c:	2000      	movs	r0, #0
 800330e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003312:	2e00      	cmp	r6, #0
 8003314:	d0fa      	beq.n	800330c <__sflush_r+0x18>
 8003316:	2300      	movs	r3, #0
 8003318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800331c:	682f      	ldr	r7, [r5, #0]
 800331e:	602b      	str	r3, [r5, #0]
 8003320:	d032      	beq.n	8003388 <__sflush_r+0x94>
 8003322:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	075a      	lsls	r2, r3, #29
 8003328:	d505      	bpl.n	8003336 <__sflush_r+0x42>
 800332a:	6863      	ldr	r3, [r4, #4]
 800332c:	1ac0      	subs	r0, r0, r3
 800332e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003330:	b10b      	cbz	r3, 8003336 <__sflush_r+0x42>
 8003332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003334:	1ac0      	subs	r0, r0, r3
 8003336:	2300      	movs	r3, #0
 8003338:	4602      	mov	r2, r0
 800333a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800333c:	4628      	mov	r0, r5
 800333e:	6a21      	ldr	r1, [r4, #32]
 8003340:	47b0      	blx	r6
 8003342:	1c43      	adds	r3, r0, #1
 8003344:	89a3      	ldrh	r3, [r4, #12]
 8003346:	d106      	bne.n	8003356 <__sflush_r+0x62>
 8003348:	6829      	ldr	r1, [r5, #0]
 800334a:	291d      	cmp	r1, #29
 800334c:	d82c      	bhi.n	80033a8 <__sflush_r+0xb4>
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <__sflush_r+0x100>)
 8003350:	40ca      	lsrs	r2, r1
 8003352:	07d6      	lsls	r6, r2, #31
 8003354:	d528      	bpl.n	80033a8 <__sflush_r+0xb4>
 8003356:	2200      	movs	r2, #0
 8003358:	6062      	str	r2, [r4, #4]
 800335a:	6922      	ldr	r2, [r4, #16]
 800335c:	04d9      	lsls	r1, r3, #19
 800335e:	6022      	str	r2, [r4, #0]
 8003360:	d504      	bpl.n	800336c <__sflush_r+0x78>
 8003362:	1c42      	adds	r2, r0, #1
 8003364:	d101      	bne.n	800336a <__sflush_r+0x76>
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	b903      	cbnz	r3, 800336c <__sflush_r+0x78>
 800336a:	6560      	str	r0, [r4, #84]	; 0x54
 800336c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800336e:	602f      	str	r7, [r5, #0]
 8003370:	2900      	cmp	r1, #0
 8003372:	d0cb      	beq.n	800330c <__sflush_r+0x18>
 8003374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003378:	4299      	cmp	r1, r3
 800337a:	d002      	beq.n	8003382 <__sflush_r+0x8e>
 800337c:	4628      	mov	r0, r5
 800337e:	f000 f9d5 	bl	800372c <_free_r>
 8003382:	2000      	movs	r0, #0
 8003384:	6360      	str	r0, [r4, #52]	; 0x34
 8003386:	e7c2      	b.n	800330e <__sflush_r+0x1a>
 8003388:	6a21      	ldr	r1, [r4, #32]
 800338a:	2301      	movs	r3, #1
 800338c:	4628      	mov	r0, r5
 800338e:	47b0      	blx	r6
 8003390:	1c41      	adds	r1, r0, #1
 8003392:	d1c7      	bne.n	8003324 <__sflush_r+0x30>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0c4      	beq.n	8003324 <__sflush_r+0x30>
 800339a:	2b1d      	cmp	r3, #29
 800339c:	d001      	beq.n	80033a2 <__sflush_r+0xae>
 800339e:	2b16      	cmp	r3, #22
 80033a0:	d101      	bne.n	80033a6 <__sflush_r+0xb2>
 80033a2:	602f      	str	r7, [r5, #0]
 80033a4:	e7b2      	b.n	800330c <__sflush_r+0x18>
 80033a6:	89a3      	ldrh	r3, [r4, #12]
 80033a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ac:	81a3      	strh	r3, [r4, #12]
 80033ae:	e7ae      	b.n	800330e <__sflush_r+0x1a>
 80033b0:	690f      	ldr	r7, [r1, #16]
 80033b2:	2f00      	cmp	r7, #0
 80033b4:	d0aa      	beq.n	800330c <__sflush_r+0x18>
 80033b6:	0793      	lsls	r3, r2, #30
 80033b8:	bf18      	it	ne
 80033ba:	2300      	movne	r3, #0
 80033bc:	680e      	ldr	r6, [r1, #0]
 80033be:	bf08      	it	eq
 80033c0:	694b      	ldreq	r3, [r1, #20]
 80033c2:	1bf6      	subs	r6, r6, r7
 80033c4:	600f      	str	r7, [r1, #0]
 80033c6:	608b      	str	r3, [r1, #8]
 80033c8:	2e00      	cmp	r6, #0
 80033ca:	dd9f      	ble.n	800330c <__sflush_r+0x18>
 80033cc:	4633      	mov	r3, r6
 80033ce:	463a      	mov	r2, r7
 80033d0:	4628      	mov	r0, r5
 80033d2:	6a21      	ldr	r1, [r4, #32]
 80033d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80033d8:	47e0      	blx	ip
 80033da:	2800      	cmp	r0, #0
 80033dc:	dc06      	bgt.n	80033ec <__sflush_r+0xf8>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	e790      	b.n	800330e <__sflush_r+0x1a>
 80033ec:	4407      	add	r7, r0
 80033ee:	1a36      	subs	r6, r6, r0
 80033f0:	e7ea      	b.n	80033c8 <__sflush_r+0xd4>
 80033f2:	bf00      	nop
 80033f4:	20400001 	.word	0x20400001

080033f8 <_fflush_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	690b      	ldr	r3, [r1, #16]
 80033fc:	4605      	mov	r5, r0
 80033fe:	460c      	mov	r4, r1
 8003400:	b913      	cbnz	r3, 8003408 <_fflush_r+0x10>
 8003402:	2500      	movs	r5, #0
 8003404:	4628      	mov	r0, r5
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	b118      	cbz	r0, 8003412 <_fflush_r+0x1a>
 800340a:	6983      	ldr	r3, [r0, #24]
 800340c:	b90b      	cbnz	r3, 8003412 <_fflush_r+0x1a>
 800340e:	f000 f887 	bl	8003520 <__sinit>
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <_fflush_r+0x6c>)
 8003414:	429c      	cmp	r4, r3
 8003416:	d11b      	bne.n	8003450 <_fflush_r+0x58>
 8003418:	686c      	ldr	r4, [r5, #4]
 800341a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ef      	beq.n	8003402 <_fflush_r+0xa>
 8003422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003424:	07d0      	lsls	r0, r2, #31
 8003426:	d404      	bmi.n	8003432 <_fflush_r+0x3a>
 8003428:	0599      	lsls	r1, r3, #22
 800342a:	d402      	bmi.n	8003432 <_fflush_r+0x3a>
 800342c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800342e:	f000 f915 	bl	800365c <__retarget_lock_acquire_recursive>
 8003432:	4628      	mov	r0, r5
 8003434:	4621      	mov	r1, r4
 8003436:	f7ff ff5d 	bl	80032f4 <__sflush_r>
 800343a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800343c:	4605      	mov	r5, r0
 800343e:	07da      	lsls	r2, r3, #31
 8003440:	d4e0      	bmi.n	8003404 <_fflush_r+0xc>
 8003442:	89a3      	ldrh	r3, [r4, #12]
 8003444:	059b      	lsls	r3, r3, #22
 8003446:	d4dd      	bmi.n	8003404 <_fflush_r+0xc>
 8003448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800344a:	f000 f908 	bl	800365e <__retarget_lock_release_recursive>
 800344e:	e7d9      	b.n	8003404 <_fflush_r+0xc>
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <_fflush_r+0x70>)
 8003452:	429c      	cmp	r4, r3
 8003454:	d101      	bne.n	800345a <_fflush_r+0x62>
 8003456:	68ac      	ldr	r4, [r5, #8]
 8003458:	e7df      	b.n	800341a <_fflush_r+0x22>
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <_fflush_r+0x74>)
 800345c:	429c      	cmp	r4, r3
 800345e:	bf08      	it	eq
 8003460:	68ec      	ldreq	r4, [r5, #12]
 8003462:	e7da      	b.n	800341a <_fflush_r+0x22>
 8003464:	08004258 	.word	0x08004258
 8003468:	08004278 	.word	0x08004278
 800346c:	08004238 	.word	0x08004238

08003470 <std>:
 8003470:	2300      	movs	r3, #0
 8003472:	b510      	push	{r4, lr}
 8003474:	4604      	mov	r4, r0
 8003476:	e9c0 3300 	strd	r3, r3, [r0]
 800347a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800347e:	6083      	str	r3, [r0, #8]
 8003480:	8181      	strh	r1, [r0, #12]
 8003482:	6643      	str	r3, [r0, #100]	; 0x64
 8003484:	81c2      	strh	r2, [r0, #14]
 8003486:	6183      	str	r3, [r0, #24]
 8003488:	4619      	mov	r1, r3
 800348a:	2208      	movs	r2, #8
 800348c:	305c      	adds	r0, #92	; 0x5c
 800348e:	f7ff fdc7 	bl	8003020 <memset>
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <std+0x38>)
 8003494:	6224      	str	r4, [r4, #32]
 8003496:	6263      	str	r3, [r4, #36]	; 0x24
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <std+0x3c>)
 800349a:	62a3      	str	r3, [r4, #40]	; 0x28
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <std+0x40>)
 800349e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <std+0x44>)
 80034a2:	6323      	str	r3, [r4, #48]	; 0x30
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	bf00      	nop
 80034a8:	08003f71 	.word	0x08003f71
 80034ac:	08003f93 	.word	0x08003f93
 80034b0:	08003fcb 	.word	0x08003fcb
 80034b4:	08003fef 	.word	0x08003fef

080034b8 <_cleanup_r>:
 80034b8:	4901      	ldr	r1, [pc, #4]	; (80034c0 <_cleanup_r+0x8>)
 80034ba:	f000 b8af 	b.w	800361c <_fwalk_reent>
 80034be:	bf00      	nop
 80034c0:	080033f9 	.word	0x080033f9

080034c4 <__sfmoreglue>:
 80034c4:	2268      	movs	r2, #104	; 0x68
 80034c6:	b570      	push	{r4, r5, r6, lr}
 80034c8:	1e4d      	subs	r5, r1, #1
 80034ca:	4355      	muls	r5, r2
 80034cc:	460e      	mov	r6, r1
 80034ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034d2:	f000 f993 	bl	80037fc <_malloc_r>
 80034d6:	4604      	mov	r4, r0
 80034d8:	b140      	cbz	r0, 80034ec <__sfmoreglue+0x28>
 80034da:	2100      	movs	r1, #0
 80034dc:	e9c0 1600 	strd	r1, r6, [r0]
 80034e0:	300c      	adds	r0, #12
 80034e2:	60a0      	str	r0, [r4, #8]
 80034e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034e8:	f7ff fd9a 	bl	8003020 <memset>
 80034ec:	4620      	mov	r0, r4
 80034ee:	bd70      	pop	{r4, r5, r6, pc}

080034f0 <__sfp_lock_acquire>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__sfp_lock_acquire+0x8>)
 80034f2:	f000 b8b3 	b.w	800365c <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	200005e5 	.word	0x200005e5

080034fc <__sfp_lock_release>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__sfp_lock_release+0x8>)
 80034fe:	f000 b8ae 	b.w	800365e <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	200005e5 	.word	0x200005e5

08003508 <__sinit_lock_acquire>:
 8003508:	4801      	ldr	r0, [pc, #4]	; (8003510 <__sinit_lock_acquire+0x8>)
 800350a:	f000 b8a7 	b.w	800365c <__retarget_lock_acquire_recursive>
 800350e:	bf00      	nop
 8003510:	200005e6 	.word	0x200005e6

08003514 <__sinit_lock_release>:
 8003514:	4801      	ldr	r0, [pc, #4]	; (800351c <__sinit_lock_release+0x8>)
 8003516:	f000 b8a2 	b.w	800365e <__retarget_lock_release_recursive>
 800351a:	bf00      	nop
 800351c:	200005e6 	.word	0x200005e6

08003520 <__sinit>:
 8003520:	b510      	push	{r4, lr}
 8003522:	4604      	mov	r4, r0
 8003524:	f7ff fff0 	bl	8003508 <__sinit_lock_acquire>
 8003528:	69a3      	ldr	r3, [r4, #24]
 800352a:	b11b      	cbz	r3, 8003534 <__sinit+0x14>
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003530:	f7ff bff0 	b.w	8003514 <__sinit_lock_release>
 8003534:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003538:	6523      	str	r3, [r4, #80]	; 0x50
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <__sinit+0x68>)
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <__sinit+0x6c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	62a2      	str	r2, [r4, #40]	; 0x28
 8003542:	42a3      	cmp	r3, r4
 8003544:	bf08      	it	eq
 8003546:	2301      	moveq	r3, #1
 8003548:	4620      	mov	r0, r4
 800354a:	bf08      	it	eq
 800354c:	61a3      	streq	r3, [r4, #24]
 800354e:	f000 f81f 	bl	8003590 <__sfp>
 8003552:	6060      	str	r0, [r4, #4]
 8003554:	4620      	mov	r0, r4
 8003556:	f000 f81b 	bl	8003590 <__sfp>
 800355a:	60a0      	str	r0, [r4, #8]
 800355c:	4620      	mov	r0, r4
 800355e:	f000 f817 	bl	8003590 <__sfp>
 8003562:	2200      	movs	r2, #0
 8003564:	2104      	movs	r1, #4
 8003566:	60e0      	str	r0, [r4, #12]
 8003568:	6860      	ldr	r0, [r4, #4]
 800356a:	f7ff ff81 	bl	8003470 <std>
 800356e:	2201      	movs	r2, #1
 8003570:	2109      	movs	r1, #9
 8003572:	68a0      	ldr	r0, [r4, #8]
 8003574:	f7ff ff7c 	bl	8003470 <std>
 8003578:	2202      	movs	r2, #2
 800357a:	2112      	movs	r1, #18
 800357c:	68e0      	ldr	r0, [r4, #12]
 800357e:	f7ff ff77 	bl	8003470 <std>
 8003582:	2301      	movs	r3, #1
 8003584:	61a3      	str	r3, [r4, #24]
 8003586:	e7d1      	b.n	800352c <__sinit+0xc>
 8003588:	08004234 	.word	0x08004234
 800358c:	080034b9 	.word	0x080034b9

08003590 <__sfp>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	4607      	mov	r7, r0
 8003594:	f7ff ffac 	bl	80034f0 <__sfp_lock_acquire>
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <__sfp+0x84>)
 800359a:	681e      	ldr	r6, [r3, #0]
 800359c:	69b3      	ldr	r3, [r6, #24]
 800359e:	b913      	cbnz	r3, 80035a6 <__sfp+0x16>
 80035a0:	4630      	mov	r0, r6
 80035a2:	f7ff ffbd 	bl	8003520 <__sinit>
 80035a6:	3648      	adds	r6, #72	; 0x48
 80035a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	d503      	bpl.n	80035b8 <__sfp+0x28>
 80035b0:	6833      	ldr	r3, [r6, #0]
 80035b2:	b30b      	cbz	r3, 80035f8 <__sfp+0x68>
 80035b4:	6836      	ldr	r6, [r6, #0]
 80035b6:	e7f7      	b.n	80035a8 <__sfp+0x18>
 80035b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035bc:	b9d5      	cbnz	r5, 80035f4 <__sfp+0x64>
 80035be:	4b16      	ldr	r3, [pc, #88]	; (8003618 <__sfp+0x88>)
 80035c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035c4:	60e3      	str	r3, [r4, #12]
 80035c6:	6665      	str	r5, [r4, #100]	; 0x64
 80035c8:	f000 f847 	bl	800365a <__retarget_lock_init_recursive>
 80035cc:	f7ff ff96 	bl	80034fc <__sfp_lock_release>
 80035d0:	2208      	movs	r2, #8
 80035d2:	4629      	mov	r1, r5
 80035d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035dc:	6025      	str	r5, [r4, #0]
 80035de:	61a5      	str	r5, [r4, #24]
 80035e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035e4:	f7ff fd1c 	bl	8003020 <memset>
 80035e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035f0:	4620      	mov	r0, r4
 80035f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f4:	3468      	adds	r4, #104	; 0x68
 80035f6:	e7d9      	b.n	80035ac <__sfp+0x1c>
 80035f8:	2104      	movs	r1, #4
 80035fa:	4638      	mov	r0, r7
 80035fc:	f7ff ff62 	bl	80034c4 <__sfmoreglue>
 8003600:	4604      	mov	r4, r0
 8003602:	6030      	str	r0, [r6, #0]
 8003604:	2800      	cmp	r0, #0
 8003606:	d1d5      	bne.n	80035b4 <__sfp+0x24>
 8003608:	f7ff ff78 	bl	80034fc <__sfp_lock_release>
 800360c:	230c      	movs	r3, #12
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	e7ee      	b.n	80035f0 <__sfp+0x60>
 8003612:	bf00      	nop
 8003614:	08004234 	.word	0x08004234
 8003618:	ffff0001 	.word	0xffff0001

0800361c <_fwalk_reent>:
 800361c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003620:	4606      	mov	r6, r0
 8003622:	4688      	mov	r8, r1
 8003624:	2700      	movs	r7, #0
 8003626:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800362a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800362e:	f1b9 0901 	subs.w	r9, r9, #1
 8003632:	d505      	bpl.n	8003640 <_fwalk_reent+0x24>
 8003634:	6824      	ldr	r4, [r4, #0]
 8003636:	2c00      	cmp	r4, #0
 8003638:	d1f7      	bne.n	800362a <_fwalk_reent+0xe>
 800363a:	4638      	mov	r0, r7
 800363c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003640:	89ab      	ldrh	r3, [r5, #12]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d907      	bls.n	8003656 <_fwalk_reent+0x3a>
 8003646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800364a:	3301      	adds	r3, #1
 800364c:	d003      	beq.n	8003656 <_fwalk_reent+0x3a>
 800364e:	4629      	mov	r1, r5
 8003650:	4630      	mov	r0, r6
 8003652:	47c0      	blx	r8
 8003654:	4307      	orrs	r7, r0
 8003656:	3568      	adds	r5, #104	; 0x68
 8003658:	e7e9      	b.n	800362e <_fwalk_reent+0x12>

0800365a <__retarget_lock_init_recursive>:
 800365a:	4770      	bx	lr

0800365c <__retarget_lock_acquire_recursive>:
 800365c:	4770      	bx	lr

0800365e <__retarget_lock_release_recursive>:
 800365e:	4770      	bx	lr

08003660 <__swhatbuf_r>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	460e      	mov	r6, r1
 8003664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003668:	4614      	mov	r4, r2
 800366a:	2900      	cmp	r1, #0
 800366c:	461d      	mov	r5, r3
 800366e:	b096      	sub	sp, #88	; 0x58
 8003670:	da08      	bge.n	8003684 <__swhatbuf_r+0x24>
 8003672:	2200      	movs	r2, #0
 8003674:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003678:	602a      	str	r2, [r5, #0]
 800367a:	061a      	lsls	r2, r3, #24
 800367c:	d410      	bmi.n	80036a0 <__swhatbuf_r+0x40>
 800367e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003682:	e00e      	b.n	80036a2 <__swhatbuf_r+0x42>
 8003684:	466a      	mov	r2, sp
 8003686:	f000 fcd9 	bl	800403c <_fstat_r>
 800368a:	2800      	cmp	r0, #0
 800368c:	dbf1      	blt.n	8003672 <__swhatbuf_r+0x12>
 800368e:	9a01      	ldr	r2, [sp, #4]
 8003690:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003694:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003698:	425a      	negs	r2, r3
 800369a:	415a      	adcs	r2, r3
 800369c:	602a      	str	r2, [r5, #0]
 800369e:	e7ee      	b.n	800367e <__swhatbuf_r+0x1e>
 80036a0:	2340      	movs	r3, #64	; 0x40
 80036a2:	2000      	movs	r0, #0
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	b016      	add	sp, #88	; 0x58
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080036ac <__smakebuf_r>:
 80036ac:	898b      	ldrh	r3, [r1, #12]
 80036ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036b0:	079d      	lsls	r5, r3, #30
 80036b2:	4606      	mov	r6, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	d507      	bpl.n	80036c8 <__smakebuf_r+0x1c>
 80036b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	6123      	str	r3, [r4, #16]
 80036c0:	2301      	movs	r3, #1
 80036c2:	6163      	str	r3, [r4, #20]
 80036c4:	b002      	add	sp, #8
 80036c6:	bd70      	pop	{r4, r5, r6, pc}
 80036c8:	466a      	mov	r2, sp
 80036ca:	ab01      	add	r3, sp, #4
 80036cc:	f7ff ffc8 	bl	8003660 <__swhatbuf_r>
 80036d0:	9900      	ldr	r1, [sp, #0]
 80036d2:	4605      	mov	r5, r0
 80036d4:	4630      	mov	r0, r6
 80036d6:	f000 f891 	bl	80037fc <_malloc_r>
 80036da:	b948      	cbnz	r0, 80036f0 <__smakebuf_r+0x44>
 80036dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e0:	059a      	lsls	r2, r3, #22
 80036e2:	d4ef      	bmi.n	80036c4 <__smakebuf_r+0x18>
 80036e4:	f023 0303 	bic.w	r3, r3, #3
 80036e8:	f043 0302 	orr.w	r3, r3, #2
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	e7e3      	b.n	80036b8 <__smakebuf_r+0xc>
 80036f0:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <__smakebuf_r+0x7c>)
 80036f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	6020      	str	r0, [r4, #0]
 80036f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	9b00      	ldr	r3, [sp, #0]
 8003700:	6120      	str	r0, [r4, #16]
 8003702:	6163      	str	r3, [r4, #20]
 8003704:	9b01      	ldr	r3, [sp, #4]
 8003706:	b15b      	cbz	r3, 8003720 <__smakebuf_r+0x74>
 8003708:	4630      	mov	r0, r6
 800370a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800370e:	f000 fca7 	bl	8004060 <_isatty_r>
 8003712:	b128      	cbz	r0, 8003720 <__smakebuf_r+0x74>
 8003714:	89a3      	ldrh	r3, [r4, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	81a3      	strh	r3, [r4, #12]
 8003720:	89a0      	ldrh	r0, [r4, #12]
 8003722:	4305      	orrs	r5, r0
 8003724:	81a5      	strh	r5, [r4, #12]
 8003726:	e7cd      	b.n	80036c4 <__smakebuf_r+0x18>
 8003728:	080034b9 	.word	0x080034b9

0800372c <_free_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	2900      	cmp	r1, #0
 8003732:	d040      	beq.n	80037b6 <_free_r+0x8a>
 8003734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003738:	1f0c      	subs	r4, r1, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	bfb8      	it	lt
 800373e:	18e4      	addlt	r4, r4, r3
 8003740:	f000 fcbe 	bl	80040c0 <__malloc_lock>
 8003744:	4a1c      	ldr	r2, [pc, #112]	; (80037b8 <_free_r+0x8c>)
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	b933      	cbnz	r3, 8003758 <_free_r+0x2c>
 800374a:	6063      	str	r3, [r4, #4]
 800374c:	6014      	str	r4, [r2, #0]
 800374e:	4628      	mov	r0, r5
 8003750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003754:	f000 bcba 	b.w	80040cc <__malloc_unlock>
 8003758:	42a3      	cmp	r3, r4
 800375a:	d908      	bls.n	800376e <_free_r+0x42>
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	1821      	adds	r1, r4, r0
 8003760:	428b      	cmp	r3, r1
 8003762:	bf01      	itttt	eq
 8003764:	6819      	ldreq	r1, [r3, #0]
 8003766:	685b      	ldreq	r3, [r3, #4]
 8003768:	1809      	addeq	r1, r1, r0
 800376a:	6021      	streq	r1, [r4, #0]
 800376c:	e7ed      	b.n	800374a <_free_r+0x1e>
 800376e:	461a      	mov	r2, r3
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	b10b      	cbz	r3, 8003778 <_free_r+0x4c>
 8003774:	42a3      	cmp	r3, r4
 8003776:	d9fa      	bls.n	800376e <_free_r+0x42>
 8003778:	6811      	ldr	r1, [r2, #0]
 800377a:	1850      	adds	r0, r2, r1
 800377c:	42a0      	cmp	r0, r4
 800377e:	d10b      	bne.n	8003798 <_free_r+0x6c>
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	4401      	add	r1, r0
 8003784:	1850      	adds	r0, r2, r1
 8003786:	4283      	cmp	r3, r0
 8003788:	6011      	str	r1, [r2, #0]
 800378a:	d1e0      	bne.n	800374e <_free_r+0x22>
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4401      	add	r1, r0
 8003792:	6011      	str	r1, [r2, #0]
 8003794:	6053      	str	r3, [r2, #4]
 8003796:	e7da      	b.n	800374e <_free_r+0x22>
 8003798:	d902      	bls.n	80037a0 <_free_r+0x74>
 800379a:	230c      	movs	r3, #12
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	e7d6      	b.n	800374e <_free_r+0x22>
 80037a0:	6820      	ldr	r0, [r4, #0]
 80037a2:	1821      	adds	r1, r4, r0
 80037a4:	428b      	cmp	r3, r1
 80037a6:	bf01      	itttt	eq
 80037a8:	6819      	ldreq	r1, [r3, #0]
 80037aa:	685b      	ldreq	r3, [r3, #4]
 80037ac:	1809      	addeq	r1, r1, r0
 80037ae:	6021      	streq	r1, [r4, #0]
 80037b0:	6063      	str	r3, [r4, #4]
 80037b2:	6054      	str	r4, [r2, #4]
 80037b4:	e7cb      	b.n	800374e <_free_r+0x22>
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	200005e8 	.word	0x200005e8

080037bc <sbrk_aligned>:
 80037bc:	b570      	push	{r4, r5, r6, lr}
 80037be:	4e0e      	ldr	r6, [pc, #56]	; (80037f8 <sbrk_aligned+0x3c>)
 80037c0:	460c      	mov	r4, r1
 80037c2:	6831      	ldr	r1, [r6, #0]
 80037c4:	4605      	mov	r5, r0
 80037c6:	b911      	cbnz	r1, 80037ce <sbrk_aligned+0x12>
 80037c8:	f000 fbc2 	bl	8003f50 <_sbrk_r>
 80037cc:	6030      	str	r0, [r6, #0]
 80037ce:	4621      	mov	r1, r4
 80037d0:	4628      	mov	r0, r5
 80037d2:	f000 fbbd 	bl	8003f50 <_sbrk_r>
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	d00a      	beq.n	80037f0 <sbrk_aligned+0x34>
 80037da:	1cc4      	adds	r4, r0, #3
 80037dc:	f024 0403 	bic.w	r4, r4, #3
 80037e0:	42a0      	cmp	r0, r4
 80037e2:	d007      	beq.n	80037f4 <sbrk_aligned+0x38>
 80037e4:	1a21      	subs	r1, r4, r0
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 fbb2 	bl	8003f50 <_sbrk_r>
 80037ec:	3001      	adds	r0, #1
 80037ee:	d101      	bne.n	80037f4 <sbrk_aligned+0x38>
 80037f0:	f04f 34ff 	mov.w	r4, #4294967295
 80037f4:	4620      	mov	r0, r4
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	200005ec 	.word	0x200005ec

080037fc <_malloc_r>:
 80037fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003800:	1ccd      	adds	r5, r1, #3
 8003802:	f025 0503 	bic.w	r5, r5, #3
 8003806:	3508      	adds	r5, #8
 8003808:	2d0c      	cmp	r5, #12
 800380a:	bf38      	it	cc
 800380c:	250c      	movcc	r5, #12
 800380e:	2d00      	cmp	r5, #0
 8003810:	4607      	mov	r7, r0
 8003812:	db01      	blt.n	8003818 <_malloc_r+0x1c>
 8003814:	42a9      	cmp	r1, r5
 8003816:	d905      	bls.n	8003824 <_malloc_r+0x28>
 8003818:	230c      	movs	r3, #12
 800381a:	2600      	movs	r6, #0
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4630      	mov	r0, r6
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003824:	4e2e      	ldr	r6, [pc, #184]	; (80038e0 <_malloc_r+0xe4>)
 8003826:	f000 fc4b 	bl	80040c0 <__malloc_lock>
 800382a:	6833      	ldr	r3, [r6, #0]
 800382c:	461c      	mov	r4, r3
 800382e:	bb34      	cbnz	r4, 800387e <_malloc_r+0x82>
 8003830:	4629      	mov	r1, r5
 8003832:	4638      	mov	r0, r7
 8003834:	f7ff ffc2 	bl	80037bc <sbrk_aligned>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	4604      	mov	r4, r0
 800383c:	d14d      	bne.n	80038da <_malloc_r+0xde>
 800383e:	6834      	ldr	r4, [r6, #0]
 8003840:	4626      	mov	r6, r4
 8003842:	2e00      	cmp	r6, #0
 8003844:	d140      	bne.n	80038c8 <_malloc_r+0xcc>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	4631      	mov	r1, r6
 800384a:	4638      	mov	r0, r7
 800384c:	eb04 0803 	add.w	r8, r4, r3
 8003850:	f000 fb7e 	bl	8003f50 <_sbrk_r>
 8003854:	4580      	cmp	r8, r0
 8003856:	d13a      	bne.n	80038ce <_malloc_r+0xd2>
 8003858:	6821      	ldr	r1, [r4, #0]
 800385a:	3503      	adds	r5, #3
 800385c:	1a6d      	subs	r5, r5, r1
 800385e:	f025 0503 	bic.w	r5, r5, #3
 8003862:	3508      	adds	r5, #8
 8003864:	2d0c      	cmp	r5, #12
 8003866:	bf38      	it	cc
 8003868:	250c      	movcc	r5, #12
 800386a:	4638      	mov	r0, r7
 800386c:	4629      	mov	r1, r5
 800386e:	f7ff ffa5 	bl	80037bc <sbrk_aligned>
 8003872:	3001      	adds	r0, #1
 8003874:	d02b      	beq.n	80038ce <_malloc_r+0xd2>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	442b      	add	r3, r5
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	e00e      	b.n	800389c <_malloc_r+0xa0>
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	1b52      	subs	r2, r2, r5
 8003882:	d41e      	bmi.n	80038c2 <_malloc_r+0xc6>
 8003884:	2a0b      	cmp	r2, #11
 8003886:	d916      	bls.n	80038b6 <_malloc_r+0xba>
 8003888:	1961      	adds	r1, r4, r5
 800388a:	42a3      	cmp	r3, r4
 800388c:	6025      	str	r5, [r4, #0]
 800388e:	bf18      	it	ne
 8003890:	6059      	strne	r1, [r3, #4]
 8003892:	6863      	ldr	r3, [r4, #4]
 8003894:	bf08      	it	eq
 8003896:	6031      	streq	r1, [r6, #0]
 8003898:	5162      	str	r2, [r4, r5]
 800389a:	604b      	str	r3, [r1, #4]
 800389c:	4638      	mov	r0, r7
 800389e:	f104 060b 	add.w	r6, r4, #11
 80038a2:	f000 fc13 	bl	80040cc <__malloc_unlock>
 80038a6:	f026 0607 	bic.w	r6, r6, #7
 80038aa:	1d23      	adds	r3, r4, #4
 80038ac:	1af2      	subs	r2, r6, r3
 80038ae:	d0b6      	beq.n	800381e <_malloc_r+0x22>
 80038b0:	1b9b      	subs	r3, r3, r6
 80038b2:	50a3      	str	r3, [r4, r2]
 80038b4:	e7b3      	b.n	800381e <_malloc_r+0x22>
 80038b6:	6862      	ldr	r2, [r4, #4]
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	bf0c      	ite	eq
 80038bc:	6032      	streq	r2, [r6, #0]
 80038be:	605a      	strne	r2, [r3, #4]
 80038c0:	e7ec      	b.n	800389c <_malloc_r+0xa0>
 80038c2:	4623      	mov	r3, r4
 80038c4:	6864      	ldr	r4, [r4, #4]
 80038c6:	e7b2      	b.n	800382e <_malloc_r+0x32>
 80038c8:	4634      	mov	r4, r6
 80038ca:	6876      	ldr	r6, [r6, #4]
 80038cc:	e7b9      	b.n	8003842 <_malloc_r+0x46>
 80038ce:	230c      	movs	r3, #12
 80038d0:	4638      	mov	r0, r7
 80038d2:	603b      	str	r3, [r7, #0]
 80038d4:	f000 fbfa 	bl	80040cc <__malloc_unlock>
 80038d8:	e7a1      	b.n	800381e <_malloc_r+0x22>
 80038da:	6025      	str	r5, [r4, #0]
 80038dc:	e7de      	b.n	800389c <_malloc_r+0xa0>
 80038de:	bf00      	nop
 80038e0:	200005e8 	.word	0x200005e8

080038e4 <__sfputc_r>:
 80038e4:	6893      	ldr	r3, [r2, #8]
 80038e6:	b410      	push	{r4}
 80038e8:	3b01      	subs	r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	da07      	bge.n	8003900 <__sfputc_r+0x1c>
 80038f0:	6994      	ldr	r4, [r2, #24]
 80038f2:	42a3      	cmp	r3, r4
 80038f4:	db01      	blt.n	80038fa <__sfputc_r+0x16>
 80038f6:	290a      	cmp	r1, #10
 80038f8:	d102      	bne.n	8003900 <__sfputc_r+0x1c>
 80038fa:	bc10      	pop	{r4}
 80038fc:	f7ff bc3a 	b.w	8003174 <__swbuf_r>
 8003900:	6813      	ldr	r3, [r2, #0]
 8003902:	1c58      	adds	r0, r3, #1
 8003904:	6010      	str	r0, [r2, #0]
 8003906:	7019      	strb	r1, [r3, #0]
 8003908:	4608      	mov	r0, r1
 800390a:	bc10      	pop	{r4}
 800390c:	4770      	bx	lr

0800390e <__sfputs_r>:
 800390e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003910:	4606      	mov	r6, r0
 8003912:	460f      	mov	r7, r1
 8003914:	4614      	mov	r4, r2
 8003916:	18d5      	adds	r5, r2, r3
 8003918:	42ac      	cmp	r4, r5
 800391a:	d101      	bne.n	8003920 <__sfputs_r+0x12>
 800391c:	2000      	movs	r0, #0
 800391e:	e007      	b.n	8003930 <__sfputs_r+0x22>
 8003920:	463a      	mov	r2, r7
 8003922:	4630      	mov	r0, r6
 8003924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003928:	f7ff ffdc 	bl	80038e4 <__sfputc_r>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d1f3      	bne.n	8003918 <__sfputs_r+0xa>
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003934 <_vfiprintf_r>:
 8003934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	460d      	mov	r5, r1
 800393a:	4614      	mov	r4, r2
 800393c:	4698      	mov	r8, r3
 800393e:	4606      	mov	r6, r0
 8003940:	b09d      	sub	sp, #116	; 0x74
 8003942:	b118      	cbz	r0, 800394c <_vfiprintf_r+0x18>
 8003944:	6983      	ldr	r3, [r0, #24]
 8003946:	b90b      	cbnz	r3, 800394c <_vfiprintf_r+0x18>
 8003948:	f7ff fdea 	bl	8003520 <__sinit>
 800394c:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <_vfiprintf_r+0x240>)
 800394e:	429d      	cmp	r5, r3
 8003950:	d11b      	bne.n	800398a <_vfiprintf_r+0x56>
 8003952:	6875      	ldr	r5, [r6, #4]
 8003954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003956:	07d9      	lsls	r1, r3, #31
 8003958:	d405      	bmi.n	8003966 <_vfiprintf_r+0x32>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	059a      	lsls	r2, r3, #22
 800395e:	d402      	bmi.n	8003966 <_vfiprintf_r+0x32>
 8003960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003962:	f7ff fe7b 	bl	800365c <__retarget_lock_acquire_recursive>
 8003966:	89ab      	ldrh	r3, [r5, #12]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	d501      	bpl.n	8003970 <_vfiprintf_r+0x3c>
 800396c:	692b      	ldr	r3, [r5, #16]
 800396e:	b9eb      	cbnz	r3, 80039ac <_vfiprintf_r+0x78>
 8003970:	4629      	mov	r1, r5
 8003972:	4630      	mov	r0, r6
 8003974:	f7ff fc50 	bl	8003218 <__swsetup_r>
 8003978:	b1c0      	cbz	r0, 80039ac <_vfiprintf_r+0x78>
 800397a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800397c:	07dc      	lsls	r4, r3, #31
 800397e:	d50e      	bpl.n	800399e <_vfiprintf_r+0x6a>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	b01d      	add	sp, #116	; 0x74
 8003986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398a:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <_vfiprintf_r+0x244>)
 800398c:	429d      	cmp	r5, r3
 800398e:	d101      	bne.n	8003994 <_vfiprintf_r+0x60>
 8003990:	68b5      	ldr	r5, [r6, #8]
 8003992:	e7df      	b.n	8003954 <_vfiprintf_r+0x20>
 8003994:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <_vfiprintf_r+0x248>)
 8003996:	429d      	cmp	r5, r3
 8003998:	bf08      	it	eq
 800399a:	68f5      	ldreq	r5, [r6, #12]
 800399c:	e7da      	b.n	8003954 <_vfiprintf_r+0x20>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	0598      	lsls	r0, r3, #22
 80039a2:	d4ed      	bmi.n	8003980 <_vfiprintf_r+0x4c>
 80039a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039a6:	f7ff fe5a 	bl	800365e <__retarget_lock_release_recursive>
 80039aa:	e7e9      	b.n	8003980 <_vfiprintf_r+0x4c>
 80039ac:	2300      	movs	r3, #0
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	2320      	movs	r3, #32
 80039b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039b6:	2330      	movs	r3, #48	; 0x30
 80039b8:	f04f 0901 	mov.w	r9, #1
 80039bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80039c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003b80 <_vfiprintf_r+0x24c>
 80039c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c8:	4623      	mov	r3, r4
 80039ca:	469a      	mov	sl, r3
 80039cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039d0:	b10a      	cbz	r2, 80039d6 <_vfiprintf_r+0xa2>
 80039d2:	2a25      	cmp	r2, #37	; 0x25
 80039d4:	d1f9      	bne.n	80039ca <_vfiprintf_r+0x96>
 80039d6:	ebba 0b04 	subs.w	fp, sl, r4
 80039da:	d00b      	beq.n	80039f4 <_vfiprintf_r+0xc0>
 80039dc:	465b      	mov	r3, fp
 80039de:	4622      	mov	r2, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7ff ff93 	bl	800390e <__sfputs_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f000 80aa 	beq.w	8003b42 <_vfiprintf_r+0x20e>
 80039ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039f0:	445a      	add	r2, fp
 80039f2:	9209      	str	r2, [sp, #36]	; 0x24
 80039f4:	f89a 3000 	ldrb.w	r3, [sl]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a2 	beq.w	8003b42 <_vfiprintf_r+0x20e>
 80039fe:	2300      	movs	r3, #0
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a08:	f10a 0a01 	add.w	sl, sl, #1
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	9307      	str	r3, [sp, #28]
 8003a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a14:	931a      	str	r3, [sp, #104]	; 0x68
 8003a16:	4654      	mov	r4, sl
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1e:	4858      	ldr	r0, [pc, #352]	; (8003b80 <_vfiprintf_r+0x24c>)
 8003a20:	f000 fb40 	bl	80040a4 <memchr>
 8003a24:	9a04      	ldr	r2, [sp, #16]
 8003a26:	b9d8      	cbnz	r0, 8003a60 <_vfiprintf_r+0x12c>
 8003a28:	06d1      	lsls	r1, r2, #27
 8003a2a:	bf44      	itt	mi
 8003a2c:	2320      	movmi	r3, #32
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a32:	0713      	lsls	r3, r2, #28
 8003a34:	bf44      	itt	mi
 8003a36:	232b      	movmi	r3, #43	; 0x2b
 8003a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a40:	2b2a      	cmp	r3, #42	; 0x2a
 8003a42:	d015      	beq.n	8003a70 <_vfiprintf_r+0x13c>
 8003a44:	4654      	mov	r4, sl
 8003a46:	2000      	movs	r0, #0
 8003a48:	f04f 0c0a 	mov.w	ip, #10
 8003a4c:	9a07      	ldr	r2, [sp, #28]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a54:	3b30      	subs	r3, #48	; 0x30
 8003a56:	2b09      	cmp	r3, #9
 8003a58:	d94e      	bls.n	8003af8 <_vfiprintf_r+0x1c4>
 8003a5a:	b1b0      	cbz	r0, 8003a8a <_vfiprintf_r+0x156>
 8003a5c:	9207      	str	r2, [sp, #28]
 8003a5e:	e014      	b.n	8003a8a <_vfiprintf_r+0x156>
 8003a60:	eba0 0308 	sub.w	r3, r0, r8
 8003a64:	fa09 f303 	lsl.w	r3, r9, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	46a2      	mov	sl, r4
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	e7d2      	b.n	8003a16 <_vfiprintf_r+0xe2>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	1d19      	adds	r1, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	9103      	str	r1, [sp, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bfbb      	ittet	lt
 8003a7c:	425b      	neglt	r3, r3
 8003a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a82:	9307      	strge	r3, [sp, #28]
 8003a84:	9307      	strlt	r3, [sp, #28]
 8003a86:	bfb8      	it	lt
 8003a88:	9204      	strlt	r2, [sp, #16]
 8003a8a:	7823      	ldrb	r3, [r4, #0]
 8003a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8e:	d10c      	bne.n	8003aaa <_vfiprintf_r+0x176>
 8003a90:	7863      	ldrb	r3, [r4, #1]
 8003a92:	2b2a      	cmp	r3, #42	; 0x2a
 8003a94:	d135      	bne.n	8003b02 <_vfiprintf_r+0x1ce>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3402      	adds	r4, #2
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	9203      	str	r2, [sp, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bfb8      	it	lt
 8003aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aa8:	9305      	str	r3, [sp, #20]
 8003aaa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003b84 <_vfiprintf_r+0x250>
 8003aae:	2203      	movs	r2, #3
 8003ab0:	4650      	mov	r0, sl
 8003ab2:	7821      	ldrb	r1, [r4, #0]
 8003ab4:	f000 faf6 	bl	80040a4 <memchr>
 8003ab8:	b140      	cbz	r0, 8003acc <_vfiprintf_r+0x198>
 8003aba:	2340      	movs	r3, #64	; 0x40
 8003abc:	eba0 000a 	sub.w	r0, r0, sl
 8003ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ac4:	9b04      	ldr	r3, [sp, #16]
 8003ac6:	3401      	adds	r4, #1
 8003ac8:	4303      	orrs	r3, r0
 8003aca:	9304      	str	r3, [sp, #16]
 8003acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad0:	2206      	movs	r2, #6
 8003ad2:	482d      	ldr	r0, [pc, #180]	; (8003b88 <_vfiprintf_r+0x254>)
 8003ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ad8:	f000 fae4 	bl	80040a4 <memchr>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d03f      	beq.n	8003b60 <_vfiprintf_r+0x22c>
 8003ae0:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <_vfiprintf_r+0x258>)
 8003ae2:	bb1b      	cbnz	r3, 8003b2c <_vfiprintf_r+0x1f8>
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	3307      	adds	r3, #7
 8003ae8:	f023 0307 	bic.w	r3, r3, #7
 8003aec:	3308      	adds	r3, #8
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af2:	443b      	add	r3, r7
 8003af4:	9309      	str	r3, [sp, #36]	; 0x24
 8003af6:	e767      	b.n	80039c8 <_vfiprintf_r+0x94>
 8003af8:	460c      	mov	r4, r1
 8003afa:	2001      	movs	r0, #1
 8003afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b00:	e7a5      	b.n	8003a4e <_vfiprintf_r+0x11a>
 8003b02:	2300      	movs	r3, #0
 8003b04:	f04f 0c0a 	mov.w	ip, #10
 8003b08:	4619      	mov	r1, r3
 8003b0a:	3401      	adds	r4, #1
 8003b0c:	9305      	str	r3, [sp, #20]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b14:	3a30      	subs	r2, #48	; 0x30
 8003b16:	2a09      	cmp	r2, #9
 8003b18:	d903      	bls.n	8003b22 <_vfiprintf_r+0x1ee>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0c5      	beq.n	8003aaa <_vfiprintf_r+0x176>
 8003b1e:	9105      	str	r1, [sp, #20]
 8003b20:	e7c3      	b.n	8003aaa <_vfiprintf_r+0x176>
 8003b22:	4604      	mov	r4, r0
 8003b24:	2301      	movs	r3, #1
 8003b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b2a:	e7f0      	b.n	8003b0e <_vfiprintf_r+0x1da>
 8003b2c:	ab03      	add	r3, sp, #12
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	462a      	mov	r2, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <_vfiprintf_r+0x25c>)
 8003b36:	a904      	add	r1, sp, #16
 8003b38:	f3af 8000 	nop.w
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	1c78      	adds	r0, r7, #1
 8003b40:	d1d6      	bne.n	8003af0 <_vfiprintf_r+0x1bc>
 8003b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b44:	07d9      	lsls	r1, r3, #31
 8003b46:	d405      	bmi.n	8003b54 <_vfiprintf_r+0x220>
 8003b48:	89ab      	ldrh	r3, [r5, #12]
 8003b4a:	059a      	lsls	r2, r3, #22
 8003b4c:	d402      	bmi.n	8003b54 <_vfiprintf_r+0x220>
 8003b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b50:	f7ff fd85 	bl	800365e <__retarget_lock_release_recursive>
 8003b54:	89ab      	ldrh	r3, [r5, #12]
 8003b56:	065b      	lsls	r3, r3, #25
 8003b58:	f53f af12 	bmi.w	8003980 <_vfiprintf_r+0x4c>
 8003b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b5e:	e711      	b.n	8003984 <_vfiprintf_r+0x50>
 8003b60:	ab03      	add	r3, sp, #12
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	462a      	mov	r2, r5
 8003b66:	4630      	mov	r0, r6
 8003b68:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <_vfiprintf_r+0x25c>)
 8003b6a:	a904      	add	r1, sp, #16
 8003b6c:	f000 f882 	bl	8003c74 <_printf_i>
 8003b70:	e7e4      	b.n	8003b3c <_vfiprintf_r+0x208>
 8003b72:	bf00      	nop
 8003b74:	08004258 	.word	0x08004258
 8003b78:	08004278 	.word	0x08004278
 8003b7c:	08004238 	.word	0x08004238
 8003b80:	08004298 	.word	0x08004298
 8003b84:	0800429e 	.word	0x0800429e
 8003b88:	080042a2 	.word	0x080042a2
 8003b8c:	00000000 	.word	0x00000000
 8003b90:	0800390f 	.word	0x0800390f

08003b94 <_printf_common>:
 8003b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	4616      	mov	r6, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	688a      	ldr	r2, [r1, #8]
 8003b9e:	690b      	ldr	r3, [r1, #16]
 8003ba0:	4607      	mov	r7, r0
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	bfb8      	it	lt
 8003ba6:	4613      	movlt	r3, r2
 8003ba8:	6033      	str	r3, [r6, #0]
 8003baa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bae:	460c      	mov	r4, r1
 8003bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bb4:	b10a      	cbz	r2, 8003bba <_printf_common+0x26>
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0699      	lsls	r1, r3, #26
 8003bbe:	bf42      	ittt	mi
 8003bc0:	6833      	ldrmi	r3, [r6, #0]
 8003bc2:	3302      	addmi	r3, #2
 8003bc4:	6033      	strmi	r3, [r6, #0]
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	f015 0506 	ands.w	r5, r5, #6
 8003bcc:	d106      	bne.n	8003bdc <_printf_common+0x48>
 8003bce:	f104 0a19 	add.w	sl, r4, #25
 8003bd2:	68e3      	ldr	r3, [r4, #12]
 8003bd4:	6832      	ldr	r2, [r6, #0]
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dc28      	bgt.n	8003c2e <_printf_common+0x9a>
 8003bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003be0:	1e13      	subs	r3, r2, #0
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	bf18      	it	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	0692      	lsls	r2, r2, #26
 8003bea:	d42d      	bmi.n	8003c48 <_printf_common+0xb4>
 8003bec:	4649      	mov	r1, r9
 8003bee:	4638      	mov	r0, r7
 8003bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf4:	47c0      	blx	r8
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d020      	beq.n	8003c3c <_printf_common+0xa8>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	68e5      	ldr	r5, [r4, #12]
 8003bfe:	f003 0306 	and.w	r3, r3, #6
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf18      	it	ne
 8003c06:	2500      	movne	r5, #0
 8003c08:	6832      	ldr	r2, [r6, #0]
 8003c0a:	f04f 0600 	mov.w	r6, #0
 8003c0e:	68a3      	ldr	r3, [r4, #8]
 8003c10:	bf08      	it	eq
 8003c12:	1aad      	subeq	r5, r5, r2
 8003c14:	6922      	ldr	r2, [r4, #16]
 8003c16:	bf08      	it	eq
 8003c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	bfc4      	itt	gt
 8003c20:	1a9b      	subgt	r3, r3, r2
 8003c22:	18ed      	addgt	r5, r5, r3
 8003c24:	341a      	adds	r4, #26
 8003c26:	42b5      	cmp	r5, r6
 8003c28:	d11a      	bne.n	8003c60 <_printf_common+0xcc>
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	e008      	b.n	8003c40 <_printf_common+0xac>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	4652      	mov	r2, sl
 8003c32:	4649      	mov	r1, r9
 8003c34:	4638      	mov	r0, r7
 8003c36:	47c0      	blx	r8
 8003c38:	3001      	adds	r0, #1
 8003c3a:	d103      	bne.n	8003c44 <_printf_common+0xb0>
 8003c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c44:	3501      	adds	r5, #1
 8003c46:	e7c4      	b.n	8003bd2 <_printf_common+0x3e>
 8003c48:	2030      	movs	r0, #48	; 0x30
 8003c4a:	18e1      	adds	r1, r4, r3
 8003c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c56:	4422      	add	r2, r4
 8003c58:	3302      	adds	r3, #2
 8003c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c5e:	e7c5      	b.n	8003bec <_printf_common+0x58>
 8003c60:	2301      	movs	r3, #1
 8003c62:	4622      	mov	r2, r4
 8003c64:	4649      	mov	r1, r9
 8003c66:	4638      	mov	r0, r7
 8003c68:	47c0      	blx	r8
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d0e6      	beq.n	8003c3c <_printf_common+0xa8>
 8003c6e:	3601      	adds	r6, #1
 8003c70:	e7d9      	b.n	8003c26 <_printf_common+0x92>
	...

08003c74 <_printf_i>:
 8003c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	7e0f      	ldrb	r7, [r1, #24]
 8003c7a:	4691      	mov	r9, r2
 8003c7c:	2f78      	cmp	r7, #120	; 0x78
 8003c7e:	4680      	mov	r8, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	469a      	mov	sl, r3
 8003c84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c8a:	d807      	bhi.n	8003c9c <_printf_i+0x28>
 8003c8c:	2f62      	cmp	r7, #98	; 0x62
 8003c8e:	d80a      	bhi.n	8003ca6 <_printf_i+0x32>
 8003c90:	2f00      	cmp	r7, #0
 8003c92:	f000 80d9 	beq.w	8003e48 <_printf_i+0x1d4>
 8003c96:	2f58      	cmp	r7, #88	; 0x58
 8003c98:	f000 80a4 	beq.w	8003de4 <_printf_i+0x170>
 8003c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ca4:	e03a      	b.n	8003d1c <_printf_i+0xa8>
 8003ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003caa:	2b15      	cmp	r3, #21
 8003cac:	d8f6      	bhi.n	8003c9c <_printf_i+0x28>
 8003cae:	a101      	add	r1, pc, #4	; (adr r1, 8003cb4 <_printf_i+0x40>)
 8003cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cb4:	08003d0d 	.word	0x08003d0d
 8003cb8:	08003d21 	.word	0x08003d21
 8003cbc:	08003c9d 	.word	0x08003c9d
 8003cc0:	08003c9d 	.word	0x08003c9d
 8003cc4:	08003c9d 	.word	0x08003c9d
 8003cc8:	08003c9d 	.word	0x08003c9d
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003c9d 	.word	0x08003c9d
 8003cd4:	08003c9d 	.word	0x08003c9d
 8003cd8:	08003c9d 	.word	0x08003c9d
 8003cdc:	08003c9d 	.word	0x08003c9d
 8003ce0:	08003e2f 	.word	0x08003e2f
 8003ce4:	08003d51 	.word	0x08003d51
 8003ce8:	08003e11 	.word	0x08003e11
 8003cec:	08003c9d 	.word	0x08003c9d
 8003cf0:	08003c9d 	.word	0x08003c9d
 8003cf4:	08003e51 	.word	0x08003e51
 8003cf8:	08003c9d 	.word	0x08003c9d
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003c9d 	.word	0x08003c9d
 8003d04:	08003c9d 	.word	0x08003c9d
 8003d08:	08003e19 	.word	0x08003e19
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	1d1a      	adds	r2, r3, #4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	602a      	str	r2, [r5, #0]
 8003d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0a4      	b.n	8003e6a <_printf_i+0x1f6>
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	6829      	ldr	r1, [r5, #0]
 8003d24:	0606      	lsls	r6, r0, #24
 8003d26:	f101 0304 	add.w	r3, r1, #4
 8003d2a:	d50a      	bpl.n	8003d42 <_printf_i+0xce>
 8003d2c:	680e      	ldr	r6, [r1, #0]
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	2e00      	cmp	r6, #0
 8003d32:	da03      	bge.n	8003d3c <_printf_i+0xc8>
 8003d34:	232d      	movs	r3, #45	; 0x2d
 8003d36:	4276      	negs	r6, r6
 8003d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	485e      	ldr	r0, [pc, #376]	; (8003eb8 <_printf_i+0x244>)
 8003d40:	e019      	b.n	8003d76 <_printf_i+0x102>
 8003d42:	680e      	ldr	r6, [r1, #0]
 8003d44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d48:	602b      	str	r3, [r5, #0]
 8003d4a:	bf18      	it	ne
 8003d4c:	b236      	sxthne	r6, r6
 8003d4e:	e7ef      	b.n	8003d30 <_printf_i+0xbc>
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	6820      	ldr	r0, [r4, #0]
 8003d54:	1d19      	adds	r1, r3, #4
 8003d56:	6029      	str	r1, [r5, #0]
 8003d58:	0601      	lsls	r1, r0, #24
 8003d5a:	d501      	bpl.n	8003d60 <_printf_i+0xec>
 8003d5c:	681e      	ldr	r6, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <_printf_i+0xf2>
 8003d60:	0646      	lsls	r6, r0, #25
 8003d62:	d5fb      	bpl.n	8003d5c <_printf_i+0xe8>
 8003d64:	881e      	ldrh	r6, [r3, #0]
 8003d66:	2f6f      	cmp	r7, #111	; 0x6f
 8003d68:	bf0c      	ite	eq
 8003d6a:	2308      	moveq	r3, #8
 8003d6c:	230a      	movne	r3, #10
 8003d6e:	4852      	ldr	r0, [pc, #328]	; (8003eb8 <_printf_i+0x244>)
 8003d70:	2100      	movs	r1, #0
 8003d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d76:	6865      	ldr	r5, [r4, #4]
 8003d78:	2d00      	cmp	r5, #0
 8003d7a:	bfa8      	it	ge
 8003d7c:	6821      	ldrge	r1, [r4, #0]
 8003d7e:	60a5      	str	r5, [r4, #8]
 8003d80:	bfa4      	itt	ge
 8003d82:	f021 0104 	bicge.w	r1, r1, #4
 8003d86:	6021      	strge	r1, [r4, #0]
 8003d88:	b90e      	cbnz	r6, 8003d8e <_printf_i+0x11a>
 8003d8a:	2d00      	cmp	r5, #0
 8003d8c:	d04d      	beq.n	8003e2a <_printf_i+0x1b6>
 8003d8e:	4615      	mov	r5, r2
 8003d90:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d94:	fb03 6711 	mls	r7, r3, r1, r6
 8003d98:	5dc7      	ldrb	r7, [r0, r7]
 8003d9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d9e:	4637      	mov	r7, r6
 8003da0:	42bb      	cmp	r3, r7
 8003da2:	460e      	mov	r6, r1
 8003da4:	d9f4      	bls.n	8003d90 <_printf_i+0x11c>
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d10b      	bne.n	8003dc2 <_printf_i+0x14e>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	07de      	lsls	r6, r3, #31
 8003dae:	d508      	bpl.n	8003dc2 <_printf_i+0x14e>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	6861      	ldr	r1, [r4, #4]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	bfde      	ittt	le
 8003db8:	2330      	movle	r3, #48	; 0x30
 8003dba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dc2:	1b52      	subs	r2, r2, r5
 8003dc4:	6122      	str	r2, [r4, #16]
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f8cd a000 	str.w	sl, [sp]
 8003dd0:	aa03      	add	r2, sp, #12
 8003dd2:	f7ff fedf 	bl	8003b94 <_printf_common>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d14c      	bne.n	8003e74 <_printf_i+0x200>
 8003dda:	f04f 30ff 	mov.w	r0, #4294967295
 8003dde:	b004      	add	sp, #16
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	4834      	ldr	r0, [pc, #208]	; (8003eb8 <_printf_i+0x244>)
 8003de6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dea:	6829      	ldr	r1, [r5, #0]
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	f851 6b04 	ldr.w	r6, [r1], #4
 8003df2:	6029      	str	r1, [r5, #0]
 8003df4:	061d      	lsls	r5, r3, #24
 8003df6:	d514      	bpl.n	8003e22 <_printf_i+0x1ae>
 8003df8:	07df      	lsls	r7, r3, #31
 8003dfa:	bf44      	itt	mi
 8003dfc:	f043 0320 	orrmi.w	r3, r3, #32
 8003e00:	6023      	strmi	r3, [r4, #0]
 8003e02:	b91e      	cbnz	r6, 8003e0c <_printf_i+0x198>
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f023 0320 	bic.w	r3, r3, #32
 8003e0a:	6023      	str	r3, [r4, #0]
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	e7af      	b.n	8003d70 <_printf_i+0xfc>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f043 0320 	orr.w	r3, r3, #32
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	2378      	movs	r3, #120	; 0x78
 8003e1a:	4828      	ldr	r0, [pc, #160]	; (8003ebc <_printf_i+0x248>)
 8003e1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e20:	e7e3      	b.n	8003dea <_printf_i+0x176>
 8003e22:	0659      	lsls	r1, r3, #25
 8003e24:	bf48      	it	mi
 8003e26:	b2b6      	uxthmi	r6, r6
 8003e28:	e7e6      	b.n	8003df8 <_printf_i+0x184>
 8003e2a:	4615      	mov	r5, r2
 8003e2c:	e7bb      	b.n	8003da6 <_printf_i+0x132>
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	6826      	ldr	r6, [r4, #0]
 8003e32:	1d18      	adds	r0, r3, #4
 8003e34:	6961      	ldr	r1, [r4, #20]
 8003e36:	6028      	str	r0, [r5, #0]
 8003e38:	0635      	lsls	r5, r6, #24
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	d501      	bpl.n	8003e42 <_printf_i+0x1ce>
 8003e3e:	6019      	str	r1, [r3, #0]
 8003e40:	e002      	b.n	8003e48 <_printf_i+0x1d4>
 8003e42:	0670      	lsls	r0, r6, #25
 8003e44:	d5fb      	bpl.n	8003e3e <_printf_i+0x1ca>
 8003e46:	8019      	strh	r1, [r3, #0]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4615      	mov	r5, r2
 8003e4c:	6123      	str	r3, [r4, #16]
 8003e4e:	e7ba      	b.n	8003dc6 <_printf_i+0x152>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	2100      	movs	r1, #0
 8003e54:	1d1a      	adds	r2, r3, #4
 8003e56:	602a      	str	r2, [r5, #0]
 8003e58:	681d      	ldr	r5, [r3, #0]
 8003e5a:	6862      	ldr	r2, [r4, #4]
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f921 	bl	80040a4 <memchr>
 8003e62:	b108      	cbz	r0, 8003e68 <_printf_i+0x1f4>
 8003e64:	1b40      	subs	r0, r0, r5
 8003e66:	6060      	str	r0, [r4, #4]
 8003e68:	6863      	ldr	r3, [r4, #4]
 8003e6a:	6123      	str	r3, [r4, #16]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e72:	e7a8      	b.n	8003dc6 <_printf_i+0x152>
 8003e74:	462a      	mov	r2, r5
 8003e76:	4649      	mov	r1, r9
 8003e78:	4640      	mov	r0, r8
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	47d0      	blx	sl
 8003e7e:	3001      	adds	r0, #1
 8003e80:	d0ab      	beq.n	8003dda <_printf_i+0x166>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	079b      	lsls	r3, r3, #30
 8003e86:	d413      	bmi.n	8003eb0 <_printf_i+0x23c>
 8003e88:	68e0      	ldr	r0, [r4, #12]
 8003e8a:	9b03      	ldr	r3, [sp, #12]
 8003e8c:	4298      	cmp	r0, r3
 8003e8e:	bfb8      	it	lt
 8003e90:	4618      	movlt	r0, r3
 8003e92:	e7a4      	b.n	8003dde <_printf_i+0x16a>
 8003e94:	2301      	movs	r3, #1
 8003e96:	4632      	mov	r2, r6
 8003e98:	4649      	mov	r1, r9
 8003e9a:	4640      	mov	r0, r8
 8003e9c:	47d0      	blx	sl
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	d09b      	beq.n	8003dda <_printf_i+0x166>
 8003ea2:	3501      	adds	r5, #1
 8003ea4:	68e3      	ldr	r3, [r4, #12]
 8003ea6:	9903      	ldr	r1, [sp, #12]
 8003ea8:	1a5b      	subs	r3, r3, r1
 8003eaa:	42ab      	cmp	r3, r5
 8003eac:	dcf2      	bgt.n	8003e94 <_printf_i+0x220>
 8003eae:	e7eb      	b.n	8003e88 <_printf_i+0x214>
 8003eb0:	2500      	movs	r5, #0
 8003eb2:	f104 0619 	add.w	r6, r4, #25
 8003eb6:	e7f5      	b.n	8003ea4 <_printf_i+0x230>
 8003eb8:	080042a9 	.word	0x080042a9
 8003ebc:	080042ba 	.word	0x080042ba

08003ec0 <_putc_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	460d      	mov	r5, r1
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	b118      	cbz	r0, 8003ed2 <_putc_r+0x12>
 8003eca:	6983      	ldr	r3, [r0, #24]
 8003ecc:	b90b      	cbnz	r3, 8003ed2 <_putc_r+0x12>
 8003ece:	f7ff fb27 	bl	8003520 <__sinit>
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <_putc_r+0x84>)
 8003ed4:	429c      	cmp	r4, r3
 8003ed6:	d124      	bne.n	8003f22 <_putc_r+0x62>
 8003ed8:	6874      	ldr	r4, [r6, #4]
 8003eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003edc:	07d8      	lsls	r0, r3, #31
 8003ede:	d405      	bmi.n	8003eec <_putc_r+0x2c>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	0599      	lsls	r1, r3, #22
 8003ee4:	d402      	bmi.n	8003eec <_putc_r+0x2c>
 8003ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee8:	f7ff fbb8 	bl	800365c <__retarget_lock_acquire_recursive>
 8003eec:	68a3      	ldr	r3, [r4, #8]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	60a3      	str	r3, [r4, #8]
 8003ef4:	da05      	bge.n	8003f02 <_putc_r+0x42>
 8003ef6:	69a2      	ldr	r2, [r4, #24]
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	db1c      	blt.n	8003f36 <_putc_r+0x76>
 8003efc:	b2eb      	uxtb	r3, r5
 8003efe:	2b0a      	cmp	r3, #10
 8003f00:	d019      	beq.n	8003f36 <_putc_r+0x76>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	6022      	str	r2, [r4, #0]
 8003f08:	701d      	strb	r5, [r3, #0]
 8003f0a:	b2ed      	uxtb	r5, r5
 8003f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f0e:	07da      	lsls	r2, r3, #31
 8003f10:	d405      	bmi.n	8003f1e <_putc_r+0x5e>
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	059b      	lsls	r3, r3, #22
 8003f16:	d402      	bmi.n	8003f1e <_putc_r+0x5e>
 8003f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f1a:	f7ff fba0 	bl	800365e <__retarget_lock_release_recursive>
 8003f1e:	4628      	mov	r0, r5
 8003f20:	bd70      	pop	{r4, r5, r6, pc}
 8003f22:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <_putc_r+0x88>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d101      	bne.n	8003f2c <_putc_r+0x6c>
 8003f28:	68b4      	ldr	r4, [r6, #8]
 8003f2a:	e7d6      	b.n	8003eda <_putc_r+0x1a>
 8003f2c:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <_putc_r+0x8c>)
 8003f2e:	429c      	cmp	r4, r3
 8003f30:	bf08      	it	eq
 8003f32:	68f4      	ldreq	r4, [r6, #12]
 8003f34:	e7d1      	b.n	8003eda <_putc_r+0x1a>
 8003f36:	4629      	mov	r1, r5
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4630      	mov	r0, r6
 8003f3c:	f7ff f91a 	bl	8003174 <__swbuf_r>
 8003f40:	4605      	mov	r5, r0
 8003f42:	e7e3      	b.n	8003f0c <_putc_r+0x4c>
 8003f44:	08004258 	.word	0x08004258
 8003f48:	08004278 	.word	0x08004278
 8003f4c:	08004238 	.word	0x08004238

08003f50 <_sbrk_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	2300      	movs	r3, #0
 8003f54:	4d05      	ldr	r5, [pc, #20]	; (8003f6c <_sbrk_r+0x1c>)
 8003f56:	4604      	mov	r4, r0
 8003f58:	4608      	mov	r0, r1
 8003f5a:	602b      	str	r3, [r5, #0]
 8003f5c:	f7fc fb20 	bl	80005a0 <_sbrk>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d102      	bne.n	8003f6a <_sbrk_r+0x1a>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	b103      	cbz	r3, 8003f6a <_sbrk_r+0x1a>
 8003f68:	6023      	str	r3, [r4, #0]
 8003f6a:	bd38      	pop	{r3, r4, r5, pc}
 8003f6c:	200005f0 	.word	0x200005f0

08003f70 <__sread>:
 8003f70:	b510      	push	{r4, lr}
 8003f72:	460c      	mov	r4, r1
 8003f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f78:	f000 f8ae 	bl	80040d8 <_read_r>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	bfab      	itete	ge
 8003f80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f82:	89a3      	ldrhlt	r3, [r4, #12]
 8003f84:	181b      	addge	r3, r3, r0
 8003f86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f8a:	bfac      	ite	ge
 8003f8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f8e:	81a3      	strhlt	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__swrite>:
 8003f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f96:	461f      	mov	r7, r3
 8003f98:	898b      	ldrh	r3, [r1, #12]
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	05db      	lsls	r3, r3, #23
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4616      	mov	r6, r2
 8003fa2:	d505      	bpl.n	8003fb0 <__swrite+0x1e>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fac:	f000 f868 	bl	8004080 <_lseek_r>
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	4632      	mov	r2, r6
 8003fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	4628      	mov	r0, r5
 8003fbc:	463b      	mov	r3, r7
 8003fbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	f000 b817 	b.w	8003ff8 <_write_r>

08003fca <__sseek>:
 8003fca:	b510      	push	{r4, lr}
 8003fcc:	460c      	mov	r4, r1
 8003fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd2:	f000 f855 	bl	8004080 <_lseek_r>
 8003fd6:	1c43      	adds	r3, r0, #1
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	bf15      	itete	ne
 8003fdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fe6:	81a3      	strheq	r3, [r4, #12]
 8003fe8:	bf18      	it	ne
 8003fea:	81a3      	strhne	r3, [r4, #12]
 8003fec:	bd10      	pop	{r4, pc}

08003fee <__sclose>:
 8003fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff2:	f000 b813 	b.w	800401c <_close_r>
	...

08003ff8 <_write_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	2200      	movs	r2, #0
 8004002:	4d05      	ldr	r5, [pc, #20]	; (8004018 <_write_r+0x20>)
 8004004:	602a      	str	r2, [r5, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f7fc f976 	bl	80002f8 <_write>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d102      	bne.n	8004016 <_write_r+0x1e>
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	b103      	cbz	r3, 8004016 <_write_r+0x1e>
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	bd38      	pop	{r3, r4, r5, pc}
 8004018:	200005f0 	.word	0x200005f0

0800401c <_close_r>:
 800401c:	b538      	push	{r3, r4, r5, lr}
 800401e:	2300      	movs	r3, #0
 8004020:	4d05      	ldr	r5, [pc, #20]	; (8004038 <_close_r+0x1c>)
 8004022:	4604      	mov	r4, r0
 8004024:	4608      	mov	r0, r1
 8004026:	602b      	str	r3, [r5, #0]
 8004028:	f7fc fa89 	bl	800053e <_close>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_close_r+0x1a>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_close_r+0x1a>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	200005f0 	.word	0x200005f0

0800403c <_fstat_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	2300      	movs	r3, #0
 8004040:	4d06      	ldr	r5, [pc, #24]	; (800405c <_fstat_r+0x20>)
 8004042:	4604      	mov	r4, r0
 8004044:	4608      	mov	r0, r1
 8004046:	4611      	mov	r1, r2
 8004048:	602b      	str	r3, [r5, #0]
 800404a:	f7fc fa83 	bl	8000554 <_fstat>
 800404e:	1c43      	adds	r3, r0, #1
 8004050:	d102      	bne.n	8004058 <_fstat_r+0x1c>
 8004052:	682b      	ldr	r3, [r5, #0]
 8004054:	b103      	cbz	r3, 8004058 <_fstat_r+0x1c>
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	bd38      	pop	{r3, r4, r5, pc}
 800405a:	bf00      	nop
 800405c:	200005f0 	.word	0x200005f0

08004060 <_isatty_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	2300      	movs	r3, #0
 8004064:	4d05      	ldr	r5, [pc, #20]	; (800407c <_isatty_r+0x1c>)
 8004066:	4604      	mov	r4, r0
 8004068:	4608      	mov	r0, r1
 800406a:	602b      	str	r3, [r5, #0]
 800406c:	f7fc fa81 	bl	8000572 <_isatty>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_isatty_r+0x1a>
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	b103      	cbz	r3, 800407a <_isatty_r+0x1a>
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	200005f0 	.word	0x200005f0

08004080 <_lseek_r>:
 8004080:	b538      	push	{r3, r4, r5, lr}
 8004082:	4604      	mov	r4, r0
 8004084:	4608      	mov	r0, r1
 8004086:	4611      	mov	r1, r2
 8004088:	2200      	movs	r2, #0
 800408a:	4d05      	ldr	r5, [pc, #20]	; (80040a0 <_lseek_r+0x20>)
 800408c:	602a      	str	r2, [r5, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	f7fc fa79 	bl	8000586 <_lseek>
 8004094:	1c43      	adds	r3, r0, #1
 8004096:	d102      	bne.n	800409e <_lseek_r+0x1e>
 8004098:	682b      	ldr	r3, [r5, #0]
 800409a:	b103      	cbz	r3, 800409e <_lseek_r+0x1e>
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	bd38      	pop	{r3, r4, r5, pc}
 80040a0:	200005f0 	.word	0x200005f0

080040a4 <memchr>:
 80040a4:	4603      	mov	r3, r0
 80040a6:	b510      	push	{r4, lr}
 80040a8:	b2c9      	uxtb	r1, r1
 80040aa:	4402      	add	r2, r0
 80040ac:	4293      	cmp	r3, r2
 80040ae:	4618      	mov	r0, r3
 80040b0:	d101      	bne.n	80040b6 <memchr+0x12>
 80040b2:	2000      	movs	r0, #0
 80040b4:	e003      	b.n	80040be <memchr+0x1a>
 80040b6:	7804      	ldrb	r4, [r0, #0]
 80040b8:	3301      	adds	r3, #1
 80040ba:	428c      	cmp	r4, r1
 80040bc:	d1f6      	bne.n	80040ac <memchr+0x8>
 80040be:	bd10      	pop	{r4, pc}

080040c0 <__malloc_lock>:
 80040c0:	4801      	ldr	r0, [pc, #4]	; (80040c8 <__malloc_lock+0x8>)
 80040c2:	f7ff bacb 	b.w	800365c <__retarget_lock_acquire_recursive>
 80040c6:	bf00      	nop
 80040c8:	200005e4 	.word	0x200005e4

080040cc <__malloc_unlock>:
 80040cc:	4801      	ldr	r0, [pc, #4]	; (80040d4 <__malloc_unlock+0x8>)
 80040ce:	f7ff bac6 	b.w	800365e <__retarget_lock_release_recursive>
 80040d2:	bf00      	nop
 80040d4:	200005e4 	.word	0x200005e4

080040d8 <_read_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	2200      	movs	r2, #0
 80040e2:	4d05      	ldr	r5, [pc, #20]	; (80040f8 <_read_r+0x20>)
 80040e4:	602a      	str	r2, [r5, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fc fa0c 	bl	8000504 <_read>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_read_r+0x1e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_read_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	200005f0 	.word	0x200005f0

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
